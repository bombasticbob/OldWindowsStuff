{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fmodern\fcharset0\fprq1 Courier 10cpi;}{\f15\fmodern\fcharset0\fprq1 Courier 12cpi;}
{\f16\fmodern\fcharset0\fprq1 Courier 17cpi;}{\f17\fmodern\fcharset0\fprq1 Courier 20 cpi;}{\f18\fmodern\fcharset0\fprq1 Courier 5cpi;}{\f19\fmodern\fcharset0\fprq1 Courier 6cpi;}{\f20\fmodern\fcharset0\fprq1 Sanserif 10cpi;}
{\f21\fmodern\fcharset0\fprq1 Sanserif 12cpi;}{\f22\fmodern\fcharset0\fprq1 Sanserif 17cpi;}{\f23\fmodern\fcharset0\fprq1 Sanserif 20cpi;}{\f24\fmodern\fcharset0\fprq1 Sanserif 5cpi;}{\f25\fmodern\fcharset0\fprq1 Sanserif 6cpi;}
{\f26\froman\fcharset0\fprq2 Courier PS;}{\f27\froman\fcharset0\fprq2 Sanserif PS;}{\f28\fmodern\fcharset0\fprq1 Orator II 10cpi;}{\f29\fmodern\fcharset0\fprq1 Orator II 12cpi;}{\f30\fmodern\fcharset0\fprq1 Orator II 17cpi;}
{\f31\fmodern\fcharset0\fprq1 Orator II 20cpi;}{\f32\fmodern\fcharset0\fprq1 Orator II 5cpi;}{\f33\fmodern\fcharset0\fprq1 Orator II 6cpi;}{\f34\froman\fcharset0\fprq2 Orator II PS;}{\f35\fmodern\fcharset0\fprq1 Orator I 10cpi;}
{\f36\fmodern\fcharset0\fprq1 Orator I 12cpi;}{\f37\fmodern\fcharset0\fprq1 Orator I 17cpi;}{\f38\fmodern\fcharset0\fprq1 Orator I 20cpi;}{\f39\fmodern\fcharset0\fprq1 Orator I 5cpi;}{\f40\fmodern\fcharset0\fprq1 Orator I 6cpi;}
{\f41\froman\fcharset0\fprq2 Orator I PS;}{\f42\fmodern\fcharset0\fprq1 Fixedsys;}{\f43\fmodern\fcharset255\fprq1 Terminal;}{\f44\fswiss\fcharset0\fprq2 Small Fonts;}{\f45\fmodern\fcharset255\fprq2 Modern;}{\f46\fscript\fcharset255\fprq2 Script;}
{\f47\froman\fcharset255\fprq2 Roman;}{\f48\fmodern\fcharset255\fprq1 SFTShell;}{\f49\fswiss\fcharset0\fprq2 MS Dialog;}{\f50\fswiss\fcharset0\fprq2 MS Dialog Light;}{\f51\fswiss\fcharset0\fprq2 MS SystemEx;}{\f52\fnil\fcharset2\fprq2 Marlett;}
{\f53\fnil\fcharset2\fprq2 Wingdings;}{\f54\fnil\fcharset2\fprq2 Lucida Arrows;}{\f55\fnil\fcharset0\fprq2 Lucida Blackletter;}{\f56\froman\fcharset0\fprq2 Lucida Bright;}{\f57\fnil\fcharset2\fprq2 Lucida Bright Math Extension;}
{\f58\fnil\fcharset2\fprq2 Lucida Bright Math Italic;}{\f59\fnil\fcharset2\fprq2 Lucida Bright Math Symbol;}{\f60\fscript\fcharset0\fprq2 Lucida Calligraphy;}{\f61\fnil\fcharset0\fprq2 Lucida Fax;}{\f62\fscript\fcharset0\fprq2 Lucida Handwriting;}
{\f63\fnil\fcharset2\fprq2 Lucida Icons;}{\f64\fnil\fcharset0\fprq2 Lucida Sans;}{\f65\fmodern\fcharset0\fprq1 Lucida Sans Typewriter;}{\f66\fnil\fcharset2\fprq2 Lucida Stars;}{\f67\fnil\fcharset0\fprq2 Basque Light;}
{\f68\fnil\fcharset0\fprq2 Black Chancery;}{\f69\fnil\fcharset0\fprq2 Chopin;}{\f70\fnil\fcharset0\fprq2 Garamond;}{\f71\fnil\fcharset0\fprq2 Inter;}{\f72\fnil\fcharset0\fprq2 Mapmaker Thin;}{\f73\fnil\fcharset0\fprq2 SaintFrancis;}
{\f74\fmodern\fcharset0\fprq1 Lucida Console;}{\f75\fmodern\fcharset2\fprq1 OCR-A;}{\f76\fmodern\fcharset0\fprq1 QuickType Mono;}{\f77\fswiss\fcharset0\fprq2 QuickType;}{\f78\fswiss\fcharset0\fprq2 QuickType Condensed;}
{\f79\fnil\fcharset2\fprq2 QuickType Pi;}{\f80\fswiss\fcharset0\fprq2 News Gothic MT;}{\f81\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f82\froman\fcharset0\fprq2 Book Antiqua;}{\f83\fmodern\fcharset0\fprq1 OCR A Extended;}
{\f84\froman\fcharset0\fprq2 Calisto MT;}{\f85\fswiss\fcharset0\fprq2 Abadi MT Condensed Light;}{\f86\fswiss\fcharset0\fprq2 Copperplate Gothic Bold;}{\f87\fswiss\fcharset0\fprq2 Copperplate Gothic Light;}{\f88\fscript\fcharset0\fprq2 Comic Sans MS;}
{\f89\fswiss\fcharset0\fprq2 Century Gothic;}{\f90\fswiss\fcharset0\fprq2 Arial Narrow;}{\f91\fnil\fcharset0\fprq2 Arial MT Black;}{\f92\froman\fcharset0\fprq2 Bookman Old Style;}{\f93\froman\fcharset0\fprq2 Century Schoolbook;}
{\f94\fnil\fcharset2\fprq2 Monotype Sorts;}{\f95\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f96\fdecor\fcharset0\fprq2 Algerian;}{\f97\fdecor\fcharset0\fprq2 Braggadocio;}{\f98\fswiss\fcharset0\fprq2 Britannic Bold;}
{\f99\fscript\fcharset0\fprq2 Brush Script MT;}{\f100\fdecor\fcharset0\fprq2 Colonna MT;}{\f101\fdecor\fcharset0\fprq2 Desdemona;}{\f102\froman\fcharset0\fprq2 Footlight MT Light;}{\f103\froman\fcharset0\fprq2 Garamond MT;}
{\f104\fswiss\fcharset0\fprq2 Impact;}{\f105\fdecor\fcharset0\fprq2 Kino MT;}{\f106\froman\fcharset0\fprq2 Wide Latin;}{\f107\fscript\fcharset0\fprq2 Matura MT Script Capitals;}{\f108\fdecor\fcharset0\fprq2 Playbill;}
{\f109\fmodern\fcharset2\fprq1 MS LineDraw;}{\f110\froman\fcharset0\fprq0 symbo;}{\f111\fswiss\fcharset0\fprq0 Chicago;}{\f112\fmodern\fcharset0\fprq0 Monaco;}{\f113\froman\fcharset0\fprq0 Palatino;}
{\f114\fnil\fcharset0\fprq0 BI Letter Gothic BoldSlanted;}{\f115\fnil\fcharset0\fprq0 I Letter Gothic Slanted;}{\f116\fnil\fcharset0\fprq0 CB Helvetica Condensed Bold;}{\f117\fnil\fcharset0\fprq0 CLB Helvetica Condensed Black;}
{\f118\fnil\fcharset0\fprq0 CBI Helvetica Condensed BoldObl;}{\f119\fnil\fcharset0\fprq0 CL Helvetica Condensed Light;}{\f120\fnil\fcharset0\fprq0 CLBI Helvetica Condensed BlackO;}{\f121\fnil\fcharset0\fprq0 CLI Helvetica Condensed LightOb;}
{\f122\fnil\fcharset0\fprq0 Letter Gothic;}{\f123\fnil\fcharset0\fprq0 B Letter Gothic Bold;}{\f124\fnil\fcharset0\fprq0 C Helvetica Condensed;}{\f125\fnil\fcharset0\fprq0 CI Helvetica Condensed Oblique;}{\f126\fnil\fcharset0\fprq0 MT Extra;}
{\f127\fnil\fcharset0\fprq0 MS San Serif;}{\f128\froman\fcharset0\fprq0 ODBCConnectString;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\li120\sb80\sl-240\slmult0
\widctlpar \f5\fs20 \snext0 Normal;}{\s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \snext26 heading 1;}{\s2\li120\sb120\sa60\sl-240\slmult0\widctlpar \b\f5\fs20\cf2 \snext0 heading 2;}{\s3\li120\sb120\sa60\sl-240\slmult0\widctlpar
\f5\fs20 \snext0 heading 3;}{\s4\fi-245\li360\sb120\sa60\sl-240\slmult0\widctlpar \f5\fs20\cf2 \sbasedon2\snext4 heading 4;}{\s5\li720\sb80\sl-240\slmult0\widctlpar \b\f5\fs20 \sbasedon0\snext17 heading 5;}{\s6\li720\sb80\sl-240\slmult0\widctlpar
\f5\fs20\ul \sbasedon0\snext17 heading 6;}{\s7\li720\sb80\sl-240\slmult0\widctlpar \i\f5\fs20 \sbasedon0\snext17 heading 7;}{\s8\li720\sb80\sl-240\slmult0\widctlpar \i\f5\fs20 \sbasedon0\snext17 heading 8;}{\s9\li720\sb80\sl-240\slmult0\widctlpar
\i\f5\fs20 \sbasedon0\snext17 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive\f5\fs20\cf2\up6\super \sbasedon10 footnote reference;}{\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext0 footnote text;}{
\s17\li720\sb80\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext0 Normal Indent;}{\s18\fi-240\li600\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext18 Jli;}{\s19\li120\sb60\sl-240\slmult0\keep\widctlpar\tx520\tx920\tx1320\tx1720\tx2120 \f3\fs16 \snext19
Ex;}{\s20\li360\sb80\sl-240\slmult0\widctlpar \f5\fs20 \snext0 Sa1;}{\s21\fi-240\li360\sl-240\slmult0\widctlpar\tx360 \f5\fs20 \snext22 Lb1;}{\s22\fi-240\li360\sb60\sl-240\slmult0\widctlpar\tx360 \f5\fs20 \snext22 Lb2;}{\s23\li360\sb60\sl-240\slmult0
\widctlpar \f5\fs20 \snext22 Lp1;}{\s24\li115\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f5\fs20 \snext25 Th;}{\s25\li115\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext25 Tp;}{\s26\li120\sl-240\slmult0
\widctlpar \f5\fs20 \snext0 Normal 2;}{\s27\li120\sb120\sa120\widctlpar \f5\fs20 \snext0 bitmap;}{\s28\li120\sb120\sl-240\slmult0\widctlpar \f5\fs20 \snext29 Sa2;}{\s29\fi-240\li360\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext29 Jl;}{
\s30\li115\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \f5\fs20 \sbasedon24\snext25 Th2;}{\s31\li115\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f5\fs16
\sbasedon24\snext25 Th3;}{\s32\li115\sb200\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext0 Normal 3;}{\s33\fi-1800\li1915\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1915 \b\f5\fs20
\sbasedon0\snext34 Thh;}{\s34\fi-1800\li1915\sb60\sl-240\slmult0\widctlpar\tx1915 \f5\fs20 \sbasedon0\snext34 Tph;}{\s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \sbasedon26\snext35 Normal 2a;}{
\s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 \sbasedon26\snext36 NOTE;}{\s37\fi-2880\li2995\sl-240\slmult0\widctlpar\tx835\tx1555\tx2995\tx3715\tx4435\tx5155 \f5\fs20 \sbasedon0\snext37 table1;}{\s38\li115\sb80\sl-240\slmult0
\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435\tx5155 \f5\fs20\ul \sbasedon0\snext38 tablehead;}{\s39\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext39 endnote text;}{\*\cs40 \additive\super \sbasedon10 endnote reference;}}{\*\revtbl {Unknown;}{R. E. Frazier;}}{\info
{\author Bob Frazier}{\operator R. E. Frazier}{\creatim\yr1993\mo4\dy29\min51}{\revtim\yr1995\mo9\dy24\hr17\min28}{\version2}{\edmins9}{\nofpages131}{\nofwords15339}{\nofchars87435}{\*\company Stewart~Frazier Tools, Inc.}{\vern57429}}
\widowctrl\ftnbj\aendnotes\ftnnrlc\aftnnar\linkstyles\hyphcaps0 \fet0{\*\template C:\\My Documents\\what31b.dot}\sectd \linex0 {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}
{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}
{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain
\s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SFTShell High Level Language Features}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CALC}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C000}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} Calc;Calculation;High Level Language Features}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} DisableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`contents')")}} SFTShell High Level Language Features
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
SFTShell provides many 'high level language' features, similar to that of the BASIC programming language, including the ability to handle algebraic expressions embedded within string substitution operators on a command line.  For more information, select
from one of the topics listed below.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\uldb Overview}{\v CALC_OVERVIEW}
\par {\uldb Arithmetic vs String Expressions}{\v expressions}
\par {\uldb Arithmetic & String Operators}{\v operators}
\par {\uldb Function Groups}{\v function_groups}
\par {\uldb Alphabetic List of Functions}{\v functions_alphabetic}
\par {\uldb Enhanced Commands}{\v enhanced_commands}
\par {\uldb Sample Programs}{\v sample_programs}
\par \pard\plain \s1\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} High Level Language - Calculation Overview}} {
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CALC_OVERVIEW}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +}
 C001}} {\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} Calc;Calculation Overview}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`CALC')")}} High Level Language - Calculation Overview
\par \pard\plain \sb80\sl-240\slmult0\widctlpar \f5\fs20 For SFTShell
, an EXPRESSION is that portion of a command that consists of one or more variables or constants, using functions and/or operators to generate a result. Expressions may be used in the 'LET' command, to the right of the '=', or as an argument to the 'CALC'
 command, or within '()' for the 'IF' command, or within '%()%' for the special 'text substitution' option.
\par The 'CALC' and 'LET' commands, the 'IF (expression)' form of the 'IF' command, other high level language commands, the 'FOR' extension, and the specia
l form of the '%' substitution operator have the ability to evaluate algebraic expressions involving named (environment) variables, and constant values, either as strings or as numeric values.
\par The 'CALC' command displays the result obtained from the equation that follows it onto the screen, terminated by a carriage return/line feed (i.e. <CR><LF> ) combination.  If the user wishes to simply display the results of a calculation, this command is
the best choice.
\par The 'LET' command assigns the result obtained f
rom the equation to an environment variable (or subscripted array element within an environment variable), and does not display anything to the screen.  This is also useful when the result output is not desired (i.e. when using functions that affect the d
isplay such 'PRINTSTRING()' or 'SETCURSOR()'), even though the return value from such expressions is meaningless.
\par The 'IF (expression)' and 'IF NOT (expression)' commands evaluate the expression within the '()' as either TRUE (non-zero or non-blank string)
or FALSE (zero or blank string), and execute the command within the 'IF' statement if the overall result is TRUE (as modified by the presence or absence of the 'NOT' operator).  Thus, 'IF (1)' and 'IF NOT (0)' would each execute the command following the
'IF' syntax on the command line.
\par The '%' substitution operator is normally used to cause the text of an environment variable to be inserted into a command line.  In SFTShell, this capability is extended to commands entered at the command prompt.  As an addi
tional extension, enclosing an expression in parentheses and surrounding this with '%' substitution operators will cause the expression to be evaluated, and inserted into the command line as a string.  Note that this process takes place BEFORE any equatio
n is evaluated, such as one using the 'LET' function.  It is also recursive, so that substitutions within such an expression will be evaluated before the expression is evaluated, and so forth.  As an example, the string constant "%(LEFT(UPPER(response),1)
)%" would evaluate as "Y" if the environment variable 'response' was assigned the value 'yes'.  Another example, using the ECHO command, might be:
\par \tab ECHO The time is %(TIME(NOW()))%, and the date is %(DATE(NOW()))%
\par This expression would print the current time and date by substituting the results of the expressions into the 'ECHO' command line.
\par As an extra-added benefit of the '%' substitution operator, it is also possible (outside of BATCH files) to place '%' around an environment variable or expression at the
 BEGINNING of a command line.  This causes the environment variable to be interpreted as part of the command.  The restriction on this requires that the first non-white-space character on the command line be the '%'.  In this manner it is also possible to
 have multiple lines executed by placing <CR><LF> sequences within the string assigned to the environment variable between each line.  If it is desired to place this within a 'FOR' or 'IF' statement, it is important to 'double' the '%' substitution operat
or so that it is not evaluated until AFTER the command parser has received it; otherwise, only the 1st line of code contained in the variable would be executed.  Example:
\par \tab LET my_op="DIR *.TXT"++CHAR(13)++CHAR(10)++"DIR *.BAK"
\par \tab %my_op%
\par This would execute 'DIR *.TXT', followed by 'DIR *.BAK'.  Though this is probably an impractical example, it is effective in illustrating how it might be possible to execute code within an environment variable.
\par The following examples are a comprehensive list of topics discussed in the paragraphs (above) in this section.  They are designed to help the reader fully understand the principles and use of algebraic expressions and other high level language features.

\par EXAMPLES:\tab LET var1= var2 + var3*SIN(var4)
\par \tab \tab IF (var1<>0) GOTO var1_is_not_zero
\par \tab \tab CALC LEFT("This is a test",5)++"is not a test"
\par \tab \tab DEL %(UPPER(LEFT(file_name, dot_pos)++"BAK"))%
\par In the first example, the environment variable 'var1' is assigned the calculation result from the expression 'var2 + var3*SIN(var4)'.
\par In the second example, the expression 'var<>0' is evaluated, and if the result is TRUE (non-zero, non-blank) the batch file continues at the label 'var1_is_not_zero'.
\par In the third example, the expression following the 'CALC' command is evaluated (the result should be "This is not a test"), and the result is displayed on the screen.
\par In the fourth example, the expression within the '%( )%' is evaluated (in this case it is assumed that 'file_name' contains a file name, and 'dot_pos' contains the position of the extension '.
') so that the resulting string is passed as the first argument to the 'DEL' command (that is, the same file name, but with the ".BAK" extension).
\par \pard\plain \s26\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \sb80\sl-240\slmult0\widctlpar \f5\fs20 ERROR HANDLING:
\par
\par The expression evaluation terminates on the first error found, printing an appropriate error message (stating the type of error that occurred).  If additional 'debug' information is desired, you can assign a non-zero or non-blank value to the 'CALC_DIAG'
environment variable, which causes the calculation string and a '^' (under the 'pointer posi
tion' at which the error occurred) to be printed following the standard error message.  The 'pointer position' is normally the first character AFTER the operator which follows the parameter in error.  Typically, it will be within 1 or 2 characters of the
parameter in error, and always to the right of it.  On occasions it may point after an operator such as '+' in which previous operators are being evaluated (and one of them results in an error).  In these cases it is best to look inside of parentheses or
terms that evaluate algebraically before the operator preceding the pointer.
\par A batch file that attempts to trap errors may check the 'CMD_ERROR' environment variable to see if it evaluates to 'TRUE' (non-zero) or 'FALSE' (zero).  On a TRUE condition it can immediately exit the batch file.  Normally, an error does *not* terminate a
 batch file.  In some circumstances it might be beneficial to terminate on error, or perform some other processing to
\par recover from it.  The 'CMD_ERROR' variable is *NOT* the same as the 'ERRORLEVEL' operator in the 'IF' statement.  It refers only to success or failure of the preceding command, due to some type of error.
\par
\par {\ul SPECIAL ENVIRONMENT VARIABLES:
\par }
The following is a complete listing of all 'dedicated' environment variables, and their descriptions and expected values.  In some cases it is possible to assign values to them via the 'LET' or 'SET' commands.  Such a practice is unwise, and may result in
 an error.
\par \pard \fi-2880\li2880\sb80\sl-240\slmult0\widctlpar\tx2880 {\ul VARIABLE NAME                    \tab Description of Contents and Usage\tab \tab \tab \tab }
\par TASK_ID\tab Generated whenever a program is run from within SFTShell. It contains a hexadecimal representation of its Task ID.
\par RETVAL\tab
This is used by 'RETURN', 'CALL', and 'START' to store a returned value.  For 'RETURN', the value is the result from an equation that appears on the command line.  For 'CALL' and 'START', it is the return code from the application on exit.  (This i
s only valid for 'START' when the '/Wait' option is used)
\par WINDOW_STATE\tab Contains either the string 'MINIMIZED', 'MAXIMIZED', or  NORMAL'.
  It is updated whenever the window state has been changed, either by the 'MIN' and/or 'MAX' commands, or by the System Menu or Minimize / Maximize buttons on the window's title bar.
\par COPYING\tab Set to either 'TRUE' (if copying in background) or 'FALSE' (if no copies in progress).
\par FORMATTING\tab Set to either 'TRUE' (if formatting in background) or 'FALSE' if not.
\par DDE_RESULT\tab Indicates Return (error) state of the last DDE Operation. Type HELP DDE' within SFTShell for more information on the DDE functio
ns. Possible values are:  'OK','ERROR','TIMEOUT','BUSY','NAK'. (On return from 'DDE INITIATE' it contains the conversation information, to be passed to subsequent 'DDE' commands [unaltered]).
\par DDE_SERVER_LIST\tab
Contains a list of registered servers, maintained via the 'DDE REGISTER' and 'DDE UNREGISTER' commands. (This value should never be modified directly). The arguments are separated by ',' characters, which enables use of the ARRAY subscript
 operator to access the values in this variable.
\par DDE_SERVERTOPIC_LIST\tab
A list of 'DDE 'SERVER|TOPIC' combinations, maintained via the 'DDE REGISTER' and 'DDE UNREGISTER' commands.  (This value should never be modified directly). The arguments are separated by ',' characters, which enables use of the ARRAY subscript oper
ator to access the values in this variable.
\par ODBC_RESULT\tab This contains the results from the last ODBC command.  ODBC CONNECT and ODBC CREATE STATEMENT assign a unique statement identifier to this variable, which should be saved in another variable before per
forming additional ODBC commands.  ODBC ERROR places an error string in this variable, or "OK" if there are no error messages left.  The other ODBC commands place a success/failure code here, either "OK", "ERROR", or "EOF" as appropriate to the context of
 the command.
\par CMD_ERROR\tab This variable contains a ZERO or NON-ZERO value depending on the result from the last command.  If the command was successful, the value is "0".  If the command failed (due to an error), the variable contains a non-zero numeric value.
\par CALC_DIAG\tab
Setting this variable to a non-blank / non-zero value causes additional diagnostic information to be displayed whenever the expression evaluator encounters an error.  Normally this variable is *NOT* assigned a value, which evaluates to FALSE.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Using Expressions}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} expressions}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C002}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} expressions;variables;numeric;string;arithmetic}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`CALC')")}} Arithmetic vs String Expressions
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\ul VARIABLE ASSIGNMENTS AND CALCULATION RESULTS:
\par }
The string values assigned to the environment variables may represent either string or numeric information.  Numeric information is stored as the ASCII representation of the value, normally a decimal number.  Integer values do not have a decimal point.  F
loating point values have decimal points, and optionally an exponent (with appropriate signs).  All 'white-space' information in numeric arguments is ignored.  Also, numeric arguments may be used as string arguments at any time, if desired.
\par Arrays may be contained in an environment variable, and accessed using the subscript operators '[]'.  Multiple subscripts are separated by commas.  Arrays may have either 1 or 2 dimensions only.  The first row or column in an array is always zero.  The da
ta is stored in the environment variable using either ',' and ';' to separate columns & rows, or tabs and <CR><LF> combinations.  This makes subscripted arrays ideal for DDE communications, in which applica
tions can send a block of information that is either 'tab' or 'comma' delimited, and this data can easily be manipulated using array subscripts. Assignment to a subscripted array is legal; the indices are evaluated as though they were on the right side of
 the expression.
\par At any time no more than 64kbytes of ENVIRONMENT storage can be used for all environment variables, including arrays. This limitation cannot be changed, and is due to the method used for storing data.
\par The default value for an 'undefined' va
riable is a BLANK (zero-length) string, or a ZERO numerical value.  When stored in the environment, the entries for BLANK strings are removed from the environment; however, a zero value remains, as the text for the variable becomes "0".
\par
\par {\ul String/Numeric Differences
\par }LOGICAL calculations (such as comparisons, 'AND', 'OR', 'NOT', and so forth) return a value of '1' if TRUE, and '0' if FALSE.  The 'IF' command syntax that uses expressions treats strings that consist of non-white-space characters as being a value
 of 'TRUE' also (unless the string properly evaluates to a numeric value of zero).
\par Because of the different manner in which string and numeric data must be treated (and the similar method of storage for both types) the operations for STRING data differ from that of NUMERIC data.  Under most circumstances, the operators are 'doubled'; th
at is, the operator to add numbers is '+', and to concatenate strings is '++'.
\par Functions are pre-defined (no user-defined functions in this release).  Many of the functions p
rovided duplicate capabilities provided in other areas of the program, except in a more convenient form for writing programs.  Examples of these include functions that can determine the TASK ID of a program based on the module name, for example.  This val
ue can then be passed to other functions, or 'substituted' into a command using the '%var%' syntax, which works as it should.
\par Evaluation of a function takes place AFTER all substitutions are resolved.  Therefore, you can insert '%var%' expressions, even into string literals
, and they will be resolved before the expression is passed to the interpreter.  In this way you can potentially write 'intelligent' batch files that change their own code as they go along; in a manner of speaking, 'self-writing' programs.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\ul USE OF OPERATORS IN EXPRESSIONS:
\par }The various operators which do not consist of TEXT (words) may have spaces omitted between the operator and the variables/constants, as in '1+2', '"string1"++"string2"', etc.  Those operators which would be considered 'WO
RDS' must be surrounded by white-space or parentheses to distinguish them from variables.  Some examples of this would be '(A)MOD(B)', 'x AND y', 'ISTASK(x)OR ISMODULE(x)'.
\par The use of parentheses '( )' can be used to modify the default 'order of operations', which follows an algebraic hierarchy of operations similar to that used by many programming languages.  The evaluation proceeds from left to right, and from 'the middle
out' for terms that are contained within parentheses.  If a right-parenthesis ')' is
 NOT followed by an operator (or the end of the expression) an error will result - "?Syntax error - no operator following ')'".  This can be caused by the use of operators such as 'AND' or 'MOD' which require that white-space (or parentheses) precede and
follow the operator so that it can be distinguished from a variable name.  An expression such as 'NOW()MOD7' would result in such an error, even though it might look acceptable at first glance.  A space may be inserted into the expression following the wo
rd 'MOD', as in 'NOW()MOD 7', to correct this error.
\par
\par {\ul Order of Operations:
\par }The order of operators uses algebraic logic, and parentheses '()' to assist in qualifying the order when it should differ from the default.
\par The operations are grouped in the following manner, from first to last, such that the ones mentioned first are evaluated first:
\par TEXT SUBSTITUTION:
\par \tab %env_variable%, %batch_parm, %(expression)%, %for_variable, %%
\par (this is always performed before any part of the equation is evaluated; it is done by the parser and not by the function that is invoked on the command line.)
\par UNARY:
\par \tab - (negation), ~, !, NOT
\par ARITHMETIC 3:
\par \tab ^ (exponentiation)
\par ARITHMETIC 2:
\par \tab *, /, MOD
\par ARITHMETIC 1, STRING 1:
\par \tab +, -, &, |, ++
\par COMPARISON:
\par \tab =, >, <, <>, !=, ==, >>, <<, <<>>, !==
\par LOGICAL 2:
\par \tab OR, ||
\par LOGICAL 1:
\par \tab AND, &&
\par Functions na
mes and array names are 'evaluated' immediately.  Arguments to the function or array are then properly evaluated on an individual basis; then, the function or array is evaluated by calling the correct function or finding the correct [row/]column within th
e array.
\par Logical operators do not cause 'exclusion'; that is, each term is evaluated completely, and each term is calculated as an arithmetic expression BEFORE the operation is performed.  Therefore, if the 'AND' operator is used, and the first term evaluat
es to FALSE, the second term will still be evaluated before the operation result of 'FALSE' is evaluated.  This can be a matter of importance if an interactive function such as 'INPUT()' is used (which causes an operator action to be made) within a logica
l expression.  In all cases, this function would be executed every time the expression was evaluated.  If an 'exclusion' ability is required, then more lines of code are needed to accomplish this purpose, using various 'IF' statements and 'LET' assignment
s to ensure that proper order and sequence are obtained.
\par EXAMPLE:
\par \tab the *WRONG* way
\par \tab LET x= z OR INPUT("Enter a number: ")
\par \tab (This would evaluate the 'INPUT()' function whether z was TRUE or not)
\par
\par \tab a *BETTER* way
\par \tab LET x=z
\par \tab IF (NOT z) LET x=INPUT("Enter a number: ")<>0
\par (Performs same function, but requires 2 lines of code; however, the 'INPUT()' function is only executed when z contains a ZERO)
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Arithmetic and String Operators}} {
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} operators}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C003
}} {\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} operators;numeric;string}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`CALC')")}} Arithmetic and String Operators
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 The following is a list of legal operators, and a brief description of each, including the data types involved:
\par Arithmetic:
\par \pard \fi-3240\li3355\sb40\sl-240\slmult0\widctlpar\tx835\tx3355 +\tab ADDITION\tab numeric, real/integer
\par -\tab SUBTRACTION\tab numeric, real/integer
\par \tab NEGATION\tab numeric, real/integer (unary)
\par *\tab MULTIPLICATION\tab numeric, real/integer
\par /\tab DIVISION\tab numeric, real/integer
\par MOD\tab MODULUS\tab numeric, real/integer
\par ^\tab EXPONENTIATION\tab numeric, real/integer
\par &\tab BIT-AND\tab numeric, integer
\par |\tab BIT-OR\tab numeric, integer
\par ~\tab BIT-NOT\tab numeric, integer (unary)
\par
\par String:
\par ++\tab CONCATENATION\tab string
\par
\par Logical:
\par AND\tab LOGICAL AND\tab numeric, boolean
\par OR\tab LOGICAL OR\tab numeric, boolean
\par NOT\tab LOGICAL NOT\tab numeric, boolean (unary)
\par (alternate forms)
\par &&\tab LOGICAL AND\tab numeric, boolean
\par ||\tab LOGICAL OR\tab numeric, boolean
\par !\tab LOGICAL NOT\tab numeric, boolean (unary)
\par
\par Comparison:
\par (numeric)
\par =\tab EQUAL\tab numeric, comparative
\par >\tab GREATER THAN\tab numeric, comparative
\par <\tab LESS THAN\tab numeric, comparative
\par >=\tab GREATER THAN/EQUAL\tab numeric, comparative
\par <=\tab LESS THAN/EQUAL\tab numeric, comparative
\par <>\tab NOT EQUAL\tab numeric, comparative
\par (alternate forms)
\par !=\tab NOT EQUAL\tab numeric, comparative
\par
\par (string)
\par ==\tab EQUAL\tab string, comparative
\par >>\tab GREATER THAN\tab string, comparative
\par <<\tab LESS THAN\tab string, comparative
\par >>==\tab GREATER THAN/EQUAL\tab string, comparative
\par <<==\tab LESS THAN/EQUAL\tab string, comparative
\par <<>>\tab NOT EQUAL\tab string, comparative
\par
\par (alternate forms)
\par !==\tab NOT EQUAL\tab string, comparative
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Enhanced Commands}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} enhanced_commands}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C004}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} enhanced;enhanced commands;commands}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`CALC')")}} Enhanced Commands
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LET \{variable,array expression\} = \{expression\}
\par \tab Assigns the environment variable to the left of the '=' the value resulting from the expression \{expression\}.  Array subscript operators used on the left of the '=' determine the position within the variable where the assignment is to take place, u
sing tabs or commas/quotes to separate columns, and carriage returns or semicolons to separate rows.
\par
\par CALC \{expression\}
\par \tab Displays the result of a calculation on the command line.  Similar to the following:
\par \tab \tab ECHO.%(\{expression\})%
\par
\par IF [NOT] (\{expression\}) \{command\}
\par \tab Evaluates '\{expression\}'.  If the return is NON-BLANK string or non-zero number, the evaluation is 'TRUE', and the command '\{command\}' is executed based on this result and the presence or absence of the 'NOT' modifier.
\par
\par FOR \{var\} FROM \{min\} TO \{max\} [STEP \{stepvalue\}] [DO \{command\}]
\par NEXT \{var\}
\par \tab An enhancement to the 'FOR %x in (fileset) DO \{command\}' syntax associated with the 'FOR' command.  In this case, it works similar to the 'FOR' command in BASIC or PASCAL.  If '\{stepvalue\}' is negative, then '\{max\}
' is expected to be a smaller number than '\{min\}'.  The '\{var\}' expression may be preceded by a single (or double, as required) '%' as before; alternately, it may be a legal variable name (not a subscripted array).  For each pass of \{command\} the
variable '\{var\}' is assigned PRIOR TO expanding text substitutions within '\{command\}
' and executing it.  Optionally, by leaving off the 'DO' clause, you can execute one or more commands through a 'NEXT' command, which must specify the same variable used in the 'FOR' command (for proper nested loop control).
\par EXAMPLE:  FOR x FROM 1 TO 10 DO ECHO.%x%
\par This would echo the numbers 1 through 10, inclusive.
\par
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Function Groups}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_groups}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C006}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} functions;Function Groups}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`CALC')")}} Function Groups
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\uldb Arithmetic Functions}{\v functions_arithmetic}\tab \tab \tab {\uldb Date/Time Functions}{\v functions_datetime}
\par {\uldb String Functions}{\v functions_string}\tab \tab \tab {\uldb Numeric/String Conversion}{\v functions_conversion}
\par {\uldb Clipboard Functions}{\v functions_clipboard}\tab \tab \tab {\uldb DOS Environment Functions}{\v functions_dosenvironment}
\par {\uldb Information (BOOLEAN) Functions}{\v functions_information}\tab {\uldb Display/Printing Functions}{\v functions_display}
\par {\uldb File I/O Functions}{\v functions_fileio}\tab \tab \tab {\uldb Windows Profile Functions}{\v functions_profile}
\par {\uldb Application Control Functions}{\v functions_control}\tab \tab {\uldb Information (ITERATIVE) - Advanced}{\v functions_advancedinfo}
\par {\uldb ODBC Functions}{\v functions_ODBC}
\par {\uldb
\par Alphabetic List of Functions}{\v functions_alphabetic}
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Alphabetic List of Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_alphabetic}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C006z}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Alphabetic List of Functions
\par \pard\plain \fi-2765\li2880\sb80\sl-240\slmult0\widctlpar\tx2880 \f5\fs20 {\uldb ACOS}{\v function_acos}\tab Trigonometric ARC-COSINE function
\par {\uldb ASC}{\v function_asc}\tab Returns the ASCII code for the left-most character in a string{\uldb
\par ASIN}{\v function_asin}\tab Trigonometric ARC-SINE function
\par {\uldb ATAN}{\v function_atan}\tab Trigonometric ARC-TANGENT function
\par {\uldb CENTER}{\v function_center}\tab Returns the same string, centered within the same width as the string.{\uldb
\par CHAR}{\v function_char}\tab Returns a single character string with the indicated ASCII value
\par {\uldb CHDIR}{\v function_chdir}\tab Changes the current directory for the specified drive{\uldb
\par CHDRIVE}{\v function_chdrive}\tab Changes the current drive{\uldb
\par COS}{\v function_cos}\tab Trigonometric COSINE function
\par {\uldb DATE}{\v function_date}\tab Returns the ASCII date representation of a real number date value
\par {\uldb DATEVAL}{\v function_dateval}\tab Returns the real number date representation for an ASCII date value
\par {\uldb DAY}{\v function_day}\tab Returns the day within the month for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb DIRLIST}{\v function_dirlist}\tab Returns an array of file names according to the specified path{\uldb
\par DOW}{\v function_dow}\tab Calculates the 'day of the week' for a real number date value
\par {\uldb EXP}{\v function_exp}\tab Natural Anti-logarithm (e{\up6 x})
\par {\uldb EXP10}{\v function_exp10}\tab Anti-logarithm (10{\up6 x})
\par {\uldb FILECLOSE}{\v function_fileclose}\tab Closes an open disk file{\uldb
\par FILEINFO}{\v function_fileinfo}\tab Returns an array of information about a file name{\uldb
\par FILEOPEN}{\v\uldb function_fileopen}\tab Opens a disk file for read, write, or append access{\uldb
\par FILESMATCH}{\v function_filesmatch}\tab Returns TRUE if two files are binary matches{\uldb
\par FINDWINDOW}{\v function_findwindow}\tab Returns an array of window handles matching criteria{\uldb
\par FINDCHILDWINDOW}{\v function_findchildwindow}\tab Returns an array of 'child' window handles matching criteria{\uldb
\par GETBKCOLOR}{\v function_getbkcolor}\tab Returns the current background color for displayed text{\uldb
\par GETCHILDWINDOW}{\v function_getchildwindow}\tab Returns an array of information about a 'child' window{\uldb
\par GETCLIPBOARDDATA}{\v function_getclipboarddata}\tab Returns the current clipboard text{\uldb
\par GETCURSOR}{\v function_getcursor}\tab Returns the current cursor position{\uldb
\par GETDIR}{\v function_getdir}\tab Gets the current directory for the specified drive{\uldb
\par GETDRIVE}{\v function_getdrive}\tab Gets the current drive{\uldb
\par GETINSTANCE}{\v function_getinstance}\tab Returns an instance handle associated with the parameter{\uldb
\par GETMODULE}{\v function_getmodule}\tab Returns a module handle associated with the parameter{\uldb
\par GETPROFILESTRING}{\v function_getprofilestring}\tab Retrieves the profile string for the specified keys{\uldb
\par GETTASK}{\v function_gettask}\tab Returns a task handle associated with the parameter{\uldb
\par GETTEXTCOLOR}{\v function_gettextcolor}\tab Returns the current text color for displayed text{\uldb
\par GETWINDOW}{\v function_getwindow}\tab Returns an array of information about a window{\uldb
\par HOUR}{\v function_hour}\tab Returns the hour within the day for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb INPUT}{\v function_input}\tab Retrieves a line of user input as an ASCII string{\uldb
\par INSTR}{\v function_instr}\tab Returns the position of one string within another{\uldb
\par INT}{\v function_int}\tab "Greatest Integer" function
\par {\uldb ISINSTANCE}{\v function_isinstance}\tab Returns TRUE if parameter represents a valid 'instance' handle{\uldb
\par ISMODULE}{\v function_ismodule}\tab Returns TRUE if parameter represents a valid module handle{\uldb
\par ISNO}{\v function_isno}\tab Returns TRUE if string contains 'no' value{\uldb
\par ISTASK}{\v function_istask}\tab Returns TRUE if parameter represents a valid task handle{\uldb
\par ISWINDOW}{\v function_iswindow}\tab Returns TRUE if parameter represents a valid window handle{\uldb
\par ISYES}{\v function_isyes}\tab Returns TRUE if string contains 'yes' value{\uldb
\par LEFT}{\v function_left}\tab Returns the left-most 'n' characters of a string{\uldb
\par LEN}{\v function_len}\tab Returns the length of the string in characters{\uldb
\par LJ}{\v function_lj}\tab Returns the same string, left-justified within the same width as the string{\uldb
\par LN}{\v function_ln}\tab Natural Logarithm (base 'e') function.
\par {\uldb LOG}{\v function_log}\tab Logarithm (base 10) function
\par {\uldb LOWER}{\v function_lower}\tab Returns the same string, converted to lower case{\uldb
\par LTRIM}{\v function_ltrim}\tab Returns the same string, minus leading white space{\uldb
\par MID}{\v function_mid}\tab Returns the middle 'n' characters of a string, starting at 'm'.{\uldb
\par MINUTE}{\v function_minute}\tab Returns the minute within the hour for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb MODULEINFO}{\v function_moduleinfo}\tab Returns an array of information about a module{\uldb
\par MODULELIST}{\v function_modulelist}\tab Returns an array of handles for each loaded module{\uldb
\par MONTH}{\v function_month}\tab Returns the month within the year for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb NOW}{\v function_now}\tab Returns current date and time as real number
\par {\uldb PARSE}{\v function_parse}\tab Converts a line of text into an array.{\uldb
\par PAUSE}{\v function_pause}\tab Waits for a specified time period in milliseconds before continuing{\uldb
\par PRINTSTRING}{\v function_printstring}\tab Prints the given string in the display window{\uldb
\par READLN}{\v function_readln}\tab Reads text from an open disk file{\uldb
\par RIGHT}{\v function_right}\tab Returns the right-most 'n' characters of a string{\uldb
\par RJ}{\v function_rj}\tab Returns the same string, right-justified within the same width as the string{\uldb
\par ROUND}{\v function_round}\tab Round off to nearest integer.
\par {\uldb RTRIM}{\v function_rtrim}\tab Returns the same string, minus trailing white space{\uldb
\par SECOND}{\v function_second}\tab Returns the second within the minute for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb SECONDS}{\v function_seconds}\tab Calculates the number of seconds for a real number time value.
\par {\uldb SENDKEYS}{\v function_sendkeys}\tab Sends keystrokes to a window{\uldb
\par SENDVIRTUALKEY}{\v\uldb function_sendvirtualkey}\tab Sends a 'virtual key' code to a window
\par {\uldb SETBKCOLOR}{\v function_setbkcolor}\tab Assigns a new background color for displayed text{\uldb
\par SETCLIPBOARDDATA}{\v function_setclipboarddata}\tab Assigns the specified text to the clipboard
\par {\uldb SETCURSOR}{\v function_setcursor}\tab Assigns a new cursor position{\uldb
\par SETTEXTCOLOR}{\v function_settextcolor}\tab Assigns a new text color for displayed text{\uldb
\par SHOWWINDOW}{\v function_showwindow}\tab Modifies the display state of a window{\uldb
\par SIN}{\v function_sin}\tab Trigonometric SINE function
\par {\uldb STRING}{\v function_string}\tab Returns a multiple character string with the indicated length and ASCII value
\par {\uldb TAN}{\v function_tan}\tab Trigonometric TANGENT function
\par {\uldb TASKINFO}{\v function_taskinfo}\tab Returns an array of information about a task
\par {\uldb TASKLIST}{\v function_tasklist}\tab Returns an array of task handles for each running task{\uldb
\par TIME}{\v function_time}\tab Returns the ASCII time representation for a real number time value
\par {\uldb TIMEVAL}{\v function_timeval}\tab Returns the real number time representation for an ASCII time value
\par {\uldb TRUENAME}{\v function_truename}\tab Returns 'TRUE NAME' for a specified path{\uldb
\par TRUNC}{\v function_trunc}\tab Truncate fraction, leaving integer portion.
\par {\uldb UPPER}{\v function_upper}\tab Returns the same string, converted to upper case{\uldb
\par WRITELN}{\v function_writeln}\tab Writes text to an open disk file{\uldb
\par WRITEPROFILESTRING}{\v function_writeprofilestring}\tab Writes the profile string for the specified keys{\uldb
\par YEAR}{\v function_year}\tab Returns the year for the given real number date/time value, as returned by the 'NOW()' function.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Arithmetic Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_arithmetic}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Arithmetic Functions
\par \pard\plain \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar\tx1440 \f5\fs20 {\uldb SIN}{\v function_sin}\tab Trigonometric SINE function
\par {\uldb COS}{\v function_cos}\tab Trigonometric COSINE function
\par {\uldb TAN}{\v function_tan}\tab Trigonometric TANGENT function
\par {\uldb ASIN}{\v function_asin}\tab Trigonometric ARC-SINE function
\par {\uldb ACOS}{\v function_acos}\tab Trigonometric ARC-COSINE function
\par {\uldb ATAN}{\v function_atan}\tab Trigonometric ARC-TANGENT function
\par {\uldb LOG}{\v function_log}\tab Logarithm (base 10) function
\par {\uldb LN}{\v function_ln}\tab Natural Logarithm (base 'e') function.
\par {\uldb EXP}{\v function_exp}\tab Natural Anti-logarithm (e{\up6 x})
\par {\uldb EXP10}{\v function_exp10}\tab Anti-logarithm (10{\up6 x})
\par {\uldb INT}{\v function_int}\tab "Greatest Integer" function
\par {\uldb TRUNC}{\v function_trunc}\tab Truncate fraction, leaving integer portion.
\par {\uldb ROUND}{\v function_round}\tab Round off to nearest integer.
\par \pard\plain \s26\fi-1325\li1440\sl-240\slmult0\widctlpar\tx1440 \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SIN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_sin}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;sin}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} SIN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SIN(x) - NUMERIC
\par returns the trigonometric 'sine' function of the numeric value 'x' (which is in RADIANS) as a value between -1 and 1, inclusive.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} COS Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_cos}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;cos}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} COS Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 COS(x) - NUMERIC
\par returns the trigonometric 'cosine' function of the numeric value 'x' (which is in RADIANS) as a value between -1 and 1, inclusive.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TAN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_tan}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007c}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;tan}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} TAN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TAN(x) - NUMERIC
\par returns the trigonometric 'tangent' function of the numeric value 'x' (which is in RADIANS) as a value between -1 and 1, inclusive.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ASIN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_asin}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007d}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;asin}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} ASIN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ASIN(x) - NUMERIC
\par returns the arc (in RADIANS) of the trigonometric 'sine' function value 'x', which must be a value between -1 and 1, inclusive.  The result is between -{\f1 p}/2 and {\f1 p}/2, inclusive.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ACOS Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_acos}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007e}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;acos`}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} ACOS Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ACOS(x) - NUMERIC
\par returns the arc (in RADIANS) of the trigonometric 'cosine' function value 'x', which must be a value between -1 and 1, inclusive.  The result is between -{\f1 p}/2 and {\f1 p}/2, inclusive.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ATAN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_atan}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007f}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;atan}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} ATAN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ATAN(x) - NUMERIC
\par returns the arc (in RADIANS) of the trigonometric 'tangent' function value 'x'.  The result is between -{\f1 p}/2 and {\f1 p}/2, inclusive.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LOG Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_log}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007g}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;log}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} LOG Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LOG(x) - NUMERIC
\par returns the base-10 logarithm of 'x' (x > 0).
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_ln}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007h}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;ln}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} LN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LN(x) - NUMERIC
\par returns the NATURAL logarithm (base 'e') of 'x' (x > 0).
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} EXP Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_exp}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007i}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;exp}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} EXP Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 EXP(x) - NUMERIC
\par returns the 'exponential' of 'x' ('e' to the 'x' power).  This is the inverse of the 'NATURAL logarithm' function 'LN(x)'.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} EXP10 Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_exp10}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007j}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;exp10}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} EXP10 Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 EXP10(x) - NUMERIC
\par returns the value of 10 raised to the 'x' power.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} INT Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_int}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007k}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;int}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} INT Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 INT(x) - NUMERIC
\par This is the 'greatest integer' function, and returns the greatest integer less than or equal to the value of 'x'.  Therefore, if 'x' is negative, the magnitude of the absolute value will be higher for
\par values of 'x' in which there is a decimal fraction.  This is generally equivalent to the 'INT' function in BASIC and other programming languages.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TRUNC Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_trunc}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007l}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;trunc}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} TRUNC Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TRUNC(x) - NUMERIC
\par This function truncates any fractional component from the value of 'x' and returns the integer portion only.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ROUND Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_round}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C007m}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} arithmetic;functions;round}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_arithmetic')")}} ROUND Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ROUND(x) - NUMERIC
\par This function performs a
 'ROUNDING' operation on 'x', such that if the absolute value of the fractional component of 'x' is equal to or above 1/2 (0.5) it will increase the absolute value of the integer portion to the next highest in magnitude.  That is, it will 'round up' for f
ractions above .5, and down (truncate) for the rest.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Date/Time Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_datetime}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Date/Time Functions
\par \pard\plain \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar\tx1440 \f5\fs20 {\uldb NOW}{\v function_now}\tab Returns current date and time as real number
\par {\uldb DATE}{\v function_date}\tab Returns the ASCII date representation of a real number date value
\par {\uldb DATEVAL}{\v function_dateval}\tab Returns the real number date representation for an ASCII date value
\par {\uldb TIME}{\v function_time}\tab Returns the ASCII time representation for a real number time value
\par {\uldb TIMEVAL}{\v function_timeval}\tab Returns the real number time representation for an ASCII time value
\par {\uldb DOW}{\v function_dow}\tab Calculates the 'day of the week' for a real number date value
\par {\uldb SECONDS}{\v function_seconds}\tab Calculates the number of seconds for a real number time value.
\par {\uldb YEAR}{\v function_day}\tab Returns the year for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb MONTH}{\v function_month}\tab Returns the month within the year for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb DAY}{\v function_day}\tab Returns the day within the month for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb HOUR}{\v function_hour}\tab Returns the hour within the day for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb MINUTE}{\v function_minute}\tab Returns the minute within the hour for the given real number date/time value, as returned by the 'NOW()' function.
\par {\uldb SECOND}{\v function_second}\tab Returns the second within the minute for the given real number date/time value, as returned by the 'NOW()' function.
\par \pard\plain \s26\fi-1325\li1440\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} NOW Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_now}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;now}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} NOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 NOW() - NUMERIC
\par This function returns a 'serialized' date/time value in which the current date/time is a fractional representation of the number of days since 1/1/1900.
The integer portion represents the date, and the fractional portion represents the time on the current day (in 'days'; that is, 12:00 PM is 0.5).
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DATE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_date}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;date}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} DATE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 DATE([x]) - STRING
\par This function returns a STRING representation of the 'serialized' date or date/time numeric value contained in 'x'.  The format of the date string corresponds to the settings found in WIN.INI as assigned by the Control Panel under INTERNATIONAL settings.

\par If 'x' is omitted, it uses the value returned by 'NOW()'.
\par NOTE:  For custom date formatting, you can write a user-defined function that utilizes the 'YEAR', 'MONTH', and 'DAY' functions (and 'DOW', if desired) to provide a custom text format for a date value.  For more information, see the '{\uldb DEFINE}{\v
CMD_DEFINE}' command.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DATEVAL Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_dateval}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008c}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;dateval}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} DATEVAL Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 DATEVAL(x) - NUMERIC
\par This function returns a NUMERIC value representing the 'serialized' date (as an integer) value of the string contained in 'x'.  This function uses a wide variety of possible date representations to attempt to convert the value.  The return value is BLANK
if no date value could be rendered from the string.
\par NOTE:  An important feature of 'DATEVAL' is its ability to 'guess' at the correct year or century, or the month, day, and year order when it detects the string format to be different than the international settings would allow.  As an example, we shall as
sume that "MM/DD/YY" date format is in use.  The following table will illustrate how 'DATEVAL' interprets the string representation to form a serialized date value.  Assuming the current date is September 1{\super st}, 1995:
\par \pard \fi-1320\li1440\sb80\sl-240\slmult0\widctlpar\tx1440 {\ul Date String}\tab {\ul Interpreted by 'DATEVAL' as}
\par 1/1/95\tab 01/01/1995
\par 1/1/0\tab 01/01/2000
\par 1/1\tab 01/01/1995
\par 1/1/44\tab 01/01/2044  (values less than (95 - 50) are interpreted as the next century)
\par 1/1/45\tab 01/01/1945  (values greater than or equal to (95 - 50) are interpreted as the current century)
\par 101\tab 01/01/1995
\par 10195\tab 01/01/1995
\par 123195\tab 12/31/1995
\par 19950101\tab 01/01/1995  (numbers >=13000000 are assumed to be in YYYYMMDD format)
\par 1995-04-01\tab 04/01/1995  (this format is used by ODBC for date and date/time)
\par 1/sep/95\tab 01/09/1995
\par 01-Sep-95\tab 01/09/1995  (note that case of 3-character month is unimportant)
\par
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
One important rule in determining a year:  If the century is omitted from the year, a year which is 50 less than the current year (or 50 greater than the current year if the last 2 digits of the year is less than 50) is used as the "cutoff point" for cent
ury conversion, and the century conversion is done in a "common sense" manner.  Therefore, entering "44" for the year when the current year is 1995 will result in a year of 2044, an
d entering "45" for the year when the current year is 1995 will result in a year of 1945.  And, if the current year is 2020, entering a year of "71" will result in a year of 1971, and entering a year of "70" will result in a year of 2070.  Years ending in
 '49' or '50' always keep the same century as the current year.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TIME Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_time}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008d}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;time}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} TIME Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TIME([x]) - STRING
\par This function returns a STRING representation of the 'serialized' time or date/time numeric value contained in 'x'.  The format of the time string corresponds to the settings found in WIN.INI as assigned by the Control Panel under INTERNATIONAL settings.

\par If 'x' is omitted, it uses the value returned by 'NOW()'.
\par NOTE:  For custom time formatting, you can write a user-defined function that utilizes the 'HOUR', 'MINUTE', and 'SECOND' functions to provide a custom text format for a time value.  For more information, see the '{\uldb DEFINE}{\v CMD_DEFINE}' command.

\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TIMEVAL Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_timeval}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008e}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;timeval}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} TIMEVAL Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TIMEVAL(x) - NUMERIC
\par This function returns a NUMERIC value representing the 'serialized' time (as a decimal fraction) value of the st
ring contained in 'x'. This function uses a wide variety of possible time representations to attempt to convert the value.  The return value is BLANK if no time value could be rendered from the string.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DOW Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_dow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008f}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;dow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} DOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 DOW([x]) - STRING
\par This function returns the DAY of the week (Sunday, Monday, etc.) as determined from the 'serialized' date or date/time value that is contained in the (optional) numeric parameter 'x'.
\par The integer portion of the value returned by 'NOW()' and 'DATEVAL()' represents the number of days since 1/1/1900, in which the first value is a 1, representing a Monday.  If it is desired only to get the day of the week as an integer, this value may be c
alculated by the formula (INT(x) MOD 7), which would result in 0 for Sunday, 1 for Monday, 2 for Tuesday, etc.
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SECONDS Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_seconds}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008g}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;seconds}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} SECONDS Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SECONDS([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x
'.  This function is most useful for determining an elapsed time, in which two date/time values are subtracted, one from the other, and the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the i
nteger portion of the result, and can be obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} YEAR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_year}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008h}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;year}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} YEAR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 YEAR([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x'.  This function is most useful for determining an elapsed time, in which two date/time values are subtracted, one from the other, an
d the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the integer portion of the result, and can be obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MONTH Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_month}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008i}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;month}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} MONTH Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 MONTH([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x'.  This function is most useful for determining an elapsed time, in which two date/time values are subtracted, one from the other, an
d the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the integer portion of the result, and can be obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DAY Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_day}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008j}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;day}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} DAY Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 DAY([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x'.  This function is most useful for determining an elapsed time, in which two date/time values are subtracted, one from the other, an
d the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the integer portion of the result, and can be obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} HOUR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_hour}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008k}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;hour}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} HOUR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 HOUR([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x'.  This function is most useful for determining an elapsed time, in which two date/time values are subtracted
, one from the other, and the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the integer portion of the result, and can be obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MINUTE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_minute}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008l}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;minute}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} MINUTE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 MINUTE([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x'.  This function is most useful for determining an elapsed time, in which two date/time values are subtracted, one from the other, an
d the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the integer portion of the result, and can be obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SECOND Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_second}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C008m}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} date;time;functions;second}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_datetime')")}} SECOND Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SECOND([x]) - NUMERIC
\par This function returns the total number of seconds represented by the 'serialized' time or date/time value contained in 'x'.  This function is most useful for det
ermining an elapsed time, in which two date/time values are subtracted, one from the other, and the result fed into this function to obtain the total number of seconds that elapsed (the total number of days is the integer portion of the result, and can be
 obtained using the 'INT()' function).
\par If 'x' is omitted, this function uses the value returned by 'NOW()'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} String Functions}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_string}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C009}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} String Functions
\par \pard\plain \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar\tx1440 \f5\fs20 {\uldb LEN}{\v function_len}\tab Returns the length of the string in characters{\uldb
\par LEFT}{\v function_left}\tab Returns the left-most 'n' characters of a string{\uldb
\par RIGHT}{\v function_right}\tab Returns the right-most 'n' characters of a string{\uldb
\par MID}{\v function_mid}\tab Returns the middle 'n' characters of a string, starting at 'm'.{\uldb
\par INSTR}{\v function_instr}\tab Returns the position of one string within another{\uldb
\par UPPER}{\v function_upper}\tab Returns the same string, converted to upper case{\uldb
\par LOWER}{\v function_lower}\tab Returns the same string, converted to lower case{\uldb
\par CENTER}{\v function_center}\tab Returns the same string, centered within the same width as the string.{\uldb
\par LJ}{\v function_lj}\tab Returns the same string, left-justified within the same width as the string{\uldb
\par RJ}{\v function_rj}\tab Returns the same string, right-justified within the same width as the string{\uldb
\par LTRIM}{\v function_ltrim}\tab Returns the same string, minus leading white space{\uldb
\par RTRIM}{\v function_rtrim}\tab Returns the same string, minus trailing white space{\uldb
\par ASC}{\v function_asc}\tab Returns the ASCII code for the left-most character in a string{\uldb
\par CHAR}{\v function_char}\tab Returns a single character string with the indicated ASCII value
\par {\uldb STRING}{\v function_string}\tab Returns a multiple character string with the indicated length and ASCII value
\par \pard \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar {\uldb
\par }\pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LEN Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_len}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009a}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;len}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }LEN Function

\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LEN(x) - NUMERIC
\par Returns the length of the string argument 'x' as an integer.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LEFT Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_left}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009b}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;left}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
LEFT Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LEFT(x,y) - STRING
\par Returns the 'left' portion of a string 'x' up to 'y' characters in length.  If the length of 'x' is greater than 'y' characters, the resulting string represents the left 'y' characters of 'x'.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} RIGHT Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_right}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009c}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;right}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
RIGHT Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 RIGHT(x,y) - STRING
\par Returns the 'right' portion of a string 'x' up to 'y' characters in length.  If the length of 'x' is greater than 'y' characters, the resulting string represents the right 'y' characters of 'x'.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MID Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_mid}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009d}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;mid}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }MID Function

\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 MID(x,y[,z]) - STRING
\par Returns the 'middle' portion of a string 'x', beginning at position 'y' (1-based; that is the 1st character in a string is 1) and extending for 'z' characters (if 'z' is not specified, or there are fewer than 'z' characters remaining, it extends to the en
d of the string 'x').
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} INSTR Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_instr}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009e}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;instr}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
INSTR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 INSTR([w,]x,y) - NUMERIC
\par Returns the position of string 'y' within string 'x', beginning the search at position 'w' if 'w' is specified (otherwise the search starts at position '1').  If the string is not found, the function returns zero.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} UPPER Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_upper}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009f}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;upper}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
UPPER Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 UPPER(x) - STRING
\par Returns the 'UP-SHIFTED' characters from the string 'x', converting all lower case characters to upper case.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LOWER Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_lower}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009g}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;lower}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
LOWER Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LOWER(x) - STRING
\par Returns the 'DOWN-SHIFTED' characters from the string 'x', converting all upper case characters to lower case.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CENTER Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_center}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009h}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;center}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
CENTER Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 CENTER(x) - STRING
\par Beginning with the first non-white-space character within 'x', and ending with the last non-white-space character within 'x', it CENTERS the resulting string segment within a string of equal length. Example:  CENTER(" HI   ") would be "  HI  ".
\par NOTE:  'U.S.' spelling of the word 'CENTER' (vs 'CENTRE' for UK and other nations).
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LJ Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_lj}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009i}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;lj}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }LJ Function

\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LJ(x) - STRING
\par Beginning with the first non-white-space character within 'x', and ending with the last non-white-space character within 'x', it LEFT JUSTIFIES the resulting string segment within a string of equal length.  Example:  LJ(" HI   ") would be "HI    ".
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} RJ Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_rj}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009j}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;rj}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }RJ Function

\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 RJ(x) - STRING
\par Beginning with the first non-white-space character within 'x', and ending with the last non-white-space character within 'x', it RIGHT JUSTIFIES the resulting string segment within a string of equal length.  Example:  RJ(" HI   ") would be "    HI".

\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LTRIM Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_ltrim}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009k}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;ltrim}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
LTRIM Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 LTRIM(x) - STRING
\par This function returns a string in which all 'white-space' characters have been removed from the left portion of the string.  White space characters at the end of the string remain unscathed.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} RTRIM Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_rtrim}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009l}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;rtrim}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
RTRIM Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 RTRIM(x) - STRING
\par This function returns a string in which all 'white-space' characters have been removed from the end of the string.  White space characters at the beginning of the string remain unscathed.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ASC Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_asc}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009m}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;asc}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }ASC Function

\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ASC(x) - NUMERIC
\par This function returns the ASCII code represented by the first character in the string 'x' as an integer value.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CHAR Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_char}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009n}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions;char}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}}{\b0\fs18\up6  }
CHAR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 CHAR(x) - STRING
\par This function returns the ASCII character corresponding with the integer value 'x'.  If 'x' is zero, it returns the string "\\0" (since an ASCII ZERO would conflict with the method used for storing variables and rendering strings).
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} STRING Function}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_string}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C009o}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} string;functions}}{\b0\fs18\up6  }{\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_string')")}} STRING Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 STRING(x,y) - STRING
\par This function returns a string of 'x' ASCII characters corresponding with the integer value 'y'.  If 'y' is zero, it uses "\\
0" in place of the ASCII  zero (since an ASCII ZERO would conflict with the method used for storing variables and rendering strings).
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\b0\fs18\up6 \page }{\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Numeric/String Conversion Functions}}{
\b0\fs18\up6  }{\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_conversion}}{\b0\fs18\up6  }{\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0
\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C010}}{\b0\fs18\up6  }{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} conversion;functions;numeric;string}}{\b0\fs18\up6  }{
\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}}{\b0\fs18\up6  }Numeric/String Conversion Functions
\par \pard\plain \fi-605\li720\widctlpar\tx720 \f5\fs20 {\uldb STR}{\v function_str}\tab Returns an ASCII string representation of the number value
\par {\uldb VAL}{\v function_val}\tab Returns the number value of the ASCII string
\par \pard \li115\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} STR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_str}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C010a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} conversion;functions;numeric;string;str}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_conversion')")}} STR Function
\par \pard\plain \li115\widctlpar \f5\fs20 STR(x[,y]) - STRING
\par This function converts the numeric value 'x' to a string.  If the parameter 'y' is excluded, it uses the standard decimal notation and converts both floating point and integer values to strings.  If
\par the parameter 'y' is INCLUDED, however, it represents the RADIX used to convert 'x' (y must be between 1 and 16), and 'x' is treated as an unsigned INTEGER value (with appropriate conversions, if necessary).
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} VAL Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_val}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C010b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} conversion;functions;numeric;string;val}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_conversion')")}} VAL Function
\par \pard\plain \li115\widctlpar \f5\fs20 VAL(x) - NUMERIC
\par Returns the value of the string representation of a number in 'x'. This representation is normally a decimal integer or floating point value.  If a HEXADECIMAL or OCTAL value is specified, it must be in one of the following formats:
\par HEX: '0x' followed by the digits, or digits followed by 'H'
\par OCTAL: '0' followed by the digits (no terminating 'H')
\par NOTE: if a HEX value begins with 'A' through 'F', it should be preceded by a '0' to prevent errors.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Clipboard Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_clipboard}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C011}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} clipboard;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Clipboard Functions
\par \pard\plain \fi-2765\li2880\sb80\sl-240\slmult0\widctlpar\tx2880 \f5\fs20 {\uldb GETCLIPBOARDDATA}{\v function_getclipboarddata}\tab Returns the current clipboard text{\uldb
\par SETCLIPBOARDDATA}{\v function_setclipboarddata}\tab Assigns the specified text to the clipboard
\par \pard \li120\sb80\sl-240\slmult0\widctlpar {\uldb
\par }\pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETCLIPBOARDDATA Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getclipboarddata}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C011a}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} clipboard;functions;getclipboarddata}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_clipboard')")}} GETCLIPBOARDDATA Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETCLIPBOARDDATA() - STRING
\par This function returns the current TEXT clipboard data.  Non-text data is not copied with this function.  On error (or if the clipboard is empty) a BLANK string is returned.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SETCLIPBOARDDATA Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_setclipboarddata}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C011b}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} clipboard;functions;setclipboarddata}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_clipboard')")}} SETCLIPBOARDDATA Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SETCLIPBOARDDATA(string) - No return value
\par This function sets the clipboard data with the string representation of the result of the expression represented by 'string', using the 'CF_TEXT' (ANSI TEXT) clipboard format.  No value is returned.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Dos Environment Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_dosenvironment}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C012}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DOS,functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} DOS Environment Functions
\par \pard\plain \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar\tx1440 \f5\fs20 {\uldb TRUENAME}{\v function_truename}\tab Returns 'TRUE NAME' for a specified path{\uldb
\par CHDIR}{\v function_chdir}\tab Changes the current directory for the specified drive{\uldb
\par CHDRIVE}{\v function_chdrive}\tab Changes the current drive{\uldb
\par GETDIR}{\v function_getdir}\tab Gets the current directory for the specified drive{\uldb
\par GETDRIVE}{\v function_getdrive}\tab Gets the current drive{\uldb
\par }\pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TRUENAME Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_truename}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C012a}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DOS,functions;truename}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_dosenvironment')")}} TRUENAME Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TRUENAME(x) - STRING
\par This function returns the 'TRUE' name of a file, fully qualified including any 'SUBST'ed or 'JOIN'ed drives specified.  Device names (such as 'CON') will be specified from the root directory.  This function is equivalent to INT 21H function 60H in determi
ning the fully qualified path name of the file specified by 'x'.  The name may include wild-card characters, and need not exist.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CHDIR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_chdir}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C012b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DOS,functions;chdir}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_dosenvironment')")}} CHDIR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 CHDIR(x) - BOOLEAN
\par This function changes the directory for the drive specified in the argument string 'x' to that specified by 'x'.  If no drive letter is specified in 'x', the current drive is assumed.  If successful, the function returns TRUE; otherwise, it returns FALSE.

\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CHDRIVE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_chdrive}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C012c}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DOS,functions;chdrive}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_dosenvironment')")}} CHDRIVE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 CHDRIVE(x) - BOOLEAN
\par This function changes the current (active) drive to that specified by 'x'.  The parameter 'x' must be a valid DRIVE SPECIFIER of the format 'd:' where 'd' is the drive letter; the ':' must be present as well.  If the function is successful, it returns TRU
E; otherwise, it returns FALSE.  If the drive specification is NOT a valid DRIVE SPECIF
IER, an error results.  However, if the drive specification is of the correct format and the drive does not exist, a value of FALSE is returned.  This way the presence of a particular drive may be checked for using this function, without obtaining unneces
sary error messages.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETDIR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getdir}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C012d}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DOS,functions;getdir}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_dosenvironment')")}} GETDIR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETDIR([x]) - STRING
\par This function returns the current (active) directory for the active drive (if 'x' is not specified), or the drive designated by 'x' (if 'x' was specified).  The parameter 'x', when present, must be a valid DRIVE SPECIFIER of the format 'd:' where 'd' is t
he drive letter; the ':' must be present as well.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETDRIVE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getdrive}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C012e}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DOS,functions;getdrive}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_dosenvironment')")}} GETDRIVE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETDRIVE() - STRING
\par This function returns the current (active) drive in a string as a DRIVE SPECIFIER, which consists of the drive letter followed by a ':'.  If not successful, an error results (this is not likely to happen, as it would be DOS which caused the error).
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Information (BOOLEAN) Functions}} {
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_information}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C013}} {\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0
\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Information (BOOLEAN) Functions
\par \pard\plain \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar\tx1440 \f5\fs20 {\uldb ISYES}{\v function_isyes}\tab Returns TRUE if string contains 'yes' value{\uldb
\par ISNO}{\v function_isno}\tab Returns TRUE if string contains 'no' value{\uldb
\par ISTASK}{\v function_istask}\tab Returns TRUE if parameter represents a valid task handle{\uldb
\par ISWINDOW}{\v function_iswindow}\tab Returns TRUE if parameter represents a valid window handle{\uldb
\par ISINSTANCE}{\v function_isinstance}\tab Returns TRUE if parameter represents a valid 'instance' handle{\uldb
\par ISMODULE}{\v function_ismodule}\tab Returns TRUE if parameter represents a valid module handle{\uldb
\par }\pard \fi-1325\li1440\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ISYES Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_isyes}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C013a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions;isyes}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_information')")}} ISYES Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ISYES(x) - BOOLEAN
\par Returns a TRUE (non-zero) value when 'x' contains a string that represents a 'YES' value, such as "Y", "ye", "Yes", etc.  Returns a FALSE (zero) value otherwise.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ISNOq Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_isno}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C013b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions;isno}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_information')")}} ISNO Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ISNO(x) - BOOLEAN
\par Returns a TRUE (non-zero) value when 'x' contains a string that represents a 'NO' value, such as "N", "no", "No", etc.  Returns a FALSE (zero) value otherwise.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ISTASK Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_istask}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C013c}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions;istask}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_information')")}} ISTASK Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ISTASK(x) - BOOLEAN
\par Returns a TRUE (non-zero) value when 'x' contains a valid TASK HANDLE value.  This is similar to the 'IF ISTASK' command syntax.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ISWINDOW Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_iswindow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C013d}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions;iswindow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_information')")}} ISWINDOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ISWINDOW(x) - BOOLEAN
\par Returns a TRUE (non-zero) value when 'x' contains a valid WINDOW HANDLE value.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ISINSTANCE Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_isinstance}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C013e}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions;isinstance}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_information')")}} ISINSTANCE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ISINSTANCE(x) - BOOLEAN
\par Returns a TRUE (non-zero) value when 'x' contains a valid INSTANCE HANDLE value.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ISMODULE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_ismodule}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C013f}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information;functions;ismodule}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_information')")}} ISMODULE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ISMODULE(x) - BOOLEAN
\par Returns a TRUE (non-zero) value when 'x' contains a valid MODULE HANDLE value.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Display/Printing Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_display}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Display/Printing Functions
\par \pard\plain \fi-2045\li2160\sb80\sl-240\slmult0\widctlpar\tx2160 \f5\fs20 {\uldb PRINTSTRING}{\v function_printstring}\tab Prints the given string in the display window{\uldb
\par GETCURSOR}{\v function_getcursor}\tab Returns the current cursor position{\uldb
\par SETCURSOR}{\v function_setcursor}\tab Assigns a new cursor position{\uldb
\par GETBKCOLOR}{\v function_getbkcolor}\tab Returns the current background color for displayed text{\uldb
\par SETBKCOLOR}{\v function_setbkcolor}\tab Assigns a new background color for displayed text{\uldb
\par GETTEXTCOLOR}{\v function_gettextcolor}\tab Returns the current text color for displayed text{\uldb
\par SETTEXTCOLOR}{\v function_settextcolor}\tab Assigns a new text color for displayed text{\uldb
\par }\pard\plain \s26\fi-2045\li2160\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PRINTSTRING Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_printstring}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014a}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;printstring}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} PRINTSTRING Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 PRINTSTRING(x) - No return value
\par This function prints a string 'x' onto the display beginning at the current cursor position.  No terminating <CR> <LF> is added to the string.  The purpose of this function is to allow the program to generate output without the use of the 'ECHO' command,
and in a more precise (and controlled) manner.
\par See also the {\uldb GETCURSOR}{\v\uldb function_getcursor} and {\uldb SETCURSOR}{\v\uldb function_setcursor}.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETCURSOR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getcursor}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014b}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;getcursor}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} GETCURSOR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETCURSOR() - ARRAY of NUMBERS
\par This function returns a 2-dimensional array that consists of the x and y position of the cursor, in that order.  That is, element 0 of the array is the 'x' coordinate, and element 1 of the array is the 'y' coordinate.  The upper left corner of the display
 is always 0,0.  The maximum width of the screen is 80 columns.  The maximum length of the screen is currently 128 lines.
\par Note that the display only shows a portion of the maximum number of lines that may be displayed.  The scroll bars may be used to move the 'display window' about the virtual screen.  This function assumes that the coordinates refer to the VIRTUAL screen, a
nd not the current display window.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SETCURSOR Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_setcursor}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014c}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;setcursor}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} SETCURSOR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SETCURSOR(x[,y]) - No return value
\par This function assigns the new cursor position to that represented by the 'x' (and 'y', if present) parameters.  If the 'y' parameter is NOT present, it is assumed that the 'x' parameter contains an array similar to that returned by GETCURSOR() (above).  I
f the 'y' parameter *is* present, the 'x' and 'y' values are assumed to be integers.  The cursor is set to the appropriate values, where the upper left corner of the VIRTUAL screen is 0,0.
\par Note that the display only shows a portion of the maximum number of lines that may be displayed.  The scroll bars may be used to move the 'display window' about the virtual screen.  This function assumes that the coordinates refer to the VIRTUAL screen, a
nd not the current display window.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETBKCOLOR Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getbkcolor}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014d}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;getbkcolor}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} GETBKCOLOR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETBKCOLOR()    - NUMERIC
\par The GETBKCOLOR() function returns a number that represents the color attribute value associated with the background color.  This value is the current 'default' setting for all text written to the screen.  To change the background color, use {\uldb
SETBKCOLOR()}{\v function_setbkcolor} with the desired 'color number' as the 'x' parameter.  All subsequent output writte
n to the screen will use this background display color until an ANSI sequence is sent that modifies the background color, or another call to 'SETBKCOLOR()' is made.  The following is a list of the screen colors and their associated 'color number' values t
hat are passed to/returned by the functions listed in this section:
\par {\ul TEXT\tab BACKGROUND\tab COLOR NAME
\par }0\tab \tab 0\tab \tab BLACK
\par 1\tab \tab 1\tab \tab DARK RED
\par 2\tab \tab 2\tab \tab DARK GREEN
\par 3\tab \tab 3\tab \tab BROWN/DARK YELLOW
\par 4\tab \tab 4\tab \tab DARK BLUE
\par 5\tab \tab 5\tab \tab DARK MAGENTA
\par 6\tab \tab 6\tab \tab DARK CYAN
\par 7\tab \tab 7\tab \tab DARK WHITE/LIGHT GREY
\par 8\tab \tab \tab \tab BRIGHT BLACK/DARK GREY
\par 9\tab \tab \tab \tab BRIGHT RED
\par 10\tab \tab \tab \tab BRIGHT GREEN
\par 11\tab \tab \tab \tab BRIGHT YELLOW
\par 12\tab \tab \tab \tab BRIGHT BLUE
\par 13\tab \tab \tab \tab BRIGHT MAGENTA
\par 14\tab \tab \tab \tab BRIGHT CYAN
\par 15\tab \tab \tab \tab BRIGHT WHITE\tab
\par
\par These colors are equivalent to the 'ANSI' colors which are associated with the <ESC>[\{color\}m' ANSI sequence.
\par NOTE: 'U.S.' spelling of the word 'COLOR' (vs 'COLOUR' for U.K. and other countries).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SETBKCOLOR Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_setbkcolor}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014e}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;setbkcolor}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} SETBKCOLOR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SETBKCOLOR(x)   - No return value
\par The SETBKCOLOR function allows you to programatically alter the display background color attributes.  The {\uldb GETBKCOLOR()}{\v function_getbkcolor}
 function returns the current color attribute value associated with the background color.  This value is the current 'default' setting for all text written to the scr
een.  To change the background color, call SETBKCOLOR() with the desired 'color number' as the 'x' parameter. All subsequent output written to the screen will use this background display color until an ANSI sequence is sent that modifies the background co
lor, or another call to SETBKCOLOR() is made.  The following is a list of the screen colors and their associated 'color number' values that are passed to/returned by the functions listed in this section:
\par {\ul TEXT\tab BACKGROUND\tab COLOR NAME
\par }0\tab \tab 0\tab \tab BLACK
\par 1\tab \tab 1\tab \tab DARK RED
\par 2\tab \tab 2\tab \tab DARK GREEN
\par 3\tab \tab 3\tab \tab BROWN/DARK YELLOW
\par 4\tab \tab 4\tab \tab DARK BLUE
\par 5\tab \tab 5\tab \tab DARK MAGENTA
\par 6\tab \tab 6\tab \tab DARK CYAN
\par 7\tab \tab 7\tab \tab DARK WHITE/LIGHT GREY
\par 8\tab \tab \tab \tab BRIGHT BLACK/DARK GREY
\par 9\tab \tab \tab \tab BRIGHT RED
\par 10\tab \tab \tab \tab BRIGHT GREEN
\par 11\tab \tab \tab \tab BRIGHT YELLOW
\par 12\tab \tab \tab \tab BRIGHT BLUE
\par 13\tab \tab \tab \tab BRIGHT MAGENTA
\par 14\tab \tab \tab \tab BRIGHT CYAN
\par 15\tab \tab \tab \tab BRIGHT WHITE\tab
\par
\par These colors are equivalent to the 'ANSI' colors which are associated with the <ESC>[\{color\}m' ANSI sequence.
\par NOTE: 'U.S.' spelling of the word 'COLOR' (vs 'COLOUR' for U.K. and other countries).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETTEXTCOLOR Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_gettextcolor}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014f}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;gettextcolor}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} GETTEXTCOLOR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETTEXTCOLOR()  - NUMERIC
\par The GETTEXTCOLOR() function returns a number that represents the color attribute value associated with the text color.  This value is the current 'default' setting for all text written to the screen.  To change the text color, call {\uldb SETTEXTCOLOR()}{
\v function_settextcolor}
 with the desired 'color number' as the 'x' parameter. All subsequent output written to the screen will use this text color until an ANSI sequence is sent that modifies the text color, or another call to SETTEXTCOLOR() is made. The following is a list of
the screen colors and their associated 'color number' values that are passed to/returned by the functions listed in this section:
\par {\ul TEXT\tab BACKGROUND\tab COLOR NAME
\par }0\tab \tab 0\tab \tab BLACK
\par 1\tab \tab 1\tab \tab DARK RED
\par 2\tab \tab 2\tab \tab DARK GREEN
\par 3\tab \tab 3\tab \tab BROWN/DARK YELLOW
\par 4\tab \tab 4\tab \tab DARK BLUE
\par 5\tab \tab 5\tab \tab DARK MAGENTA
\par 6\tab \tab 6\tab \tab DARK CYAN
\par 7\tab \tab 7\tab \tab DARK WHITE/LIGHT GREY
\par 8\tab \tab \tab \tab BRIGHT BLACK/DARK GREY
\par 9\tab \tab \tab \tab BRIGHT RED
\par 10\tab \tab \tab \tab BRIGHT GREEN
\par 11\tab \tab \tab \tab BRIGHT YELLOW
\par 12\tab \tab \tab \tab BRIGHT BLUE
\par 13\tab \tab \tab \tab BRIGHT MAGENTA
\par 14\tab \tab \tab \tab BRIGHT CYAN
\par 15\tab \tab \tab \tab BRIGHT WHITE\tab
\par
\par These colors are equivalent to the 'ANSI' colors which are associated with the <ESC>[\{color\}m' ANSI sequence.
\par NOTE: 'U.S.' spelling of the word 'COLOR' (vs 'COLOUR' for U.K. and other countries).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SETTEXTCOLOR Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_settextcolor}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C014g}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} display;print;printing;functions;settextcolor}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_display')")}} SETTEXTCOLOR Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SETTEXTCOLOR(x) - No return value
\par The SETTEXTCOLOR function allows you to programatically alter the display text color attributes.  The {\uldb GETTEXTCOLOR()}{\v function_gettextcolor}
 function returns the current color attribute value associated with the text color.  This value is the current '
default' setting for all text written to the screen.  To change the text color, call SETBKCOLOR() with the desired 'color number' as the 'x' parameter. All subsequent output written to the screen will use this text color until an ANSI sequence is sent tha
t modifies the text color, or another call to SETTEXTCOLOR() is made.  The following is a list of the screen colors and their associated 'color number' values that are passed to/returned by the functions listed in this section:
\par {\ul TEXT\tab BACKGROUND\tab COLOR NAME
\par }0\tab \tab 0\tab \tab BLACK
\par 1\tab \tab 1\tab \tab DARK RED
\par 2\tab \tab 2\tab \tab DARK GREEN
\par 3\tab \tab 3\tab \tab BROWN/DARK YELLOW
\par 4\tab \tab 4\tab \tab DARK BLUE
\par 5\tab \tab 5\tab \tab DARK MAGENTA
\par 6\tab \tab 6\tab \tab DARK CYAN
\par 7\tab \tab 7\tab \tab DARK WHITE/LIGHT GREY
\par 8\tab \tab \tab \tab BRIGHT BLACK/DARK GREY
\par 9\tab \tab \tab \tab BRIGHT RED
\par 10\tab \tab \tab \tab BRIGHT GREEN
\par 11\tab \tab \tab \tab BRIGHT YELLOW
\par 12\tab \tab \tab \tab BRIGHT BLUE
\par 13\tab \tab \tab \tab BRIGHT MAGENTA
\par 14\tab \tab \tab \tab BRIGHT CYAN
\par 15\tab \tab \tab \tab BRIGHT WHITE\tab
\par
\par These colors are equivalent to the 'ANSI' colors which are associated with the <ESC>[\{color\}m' ANSI sequence.
\par NOTE: 'U.S.' spelling of the word 'COLOR' (vs 'COLOUR' for U.K. and other countries).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} File I/O Functions}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_fileio}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C015}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} file;I/O;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} File I/O Functions
\par \pard\plain \fi-1512\li1627\sb80\sl-240\slmult0\widctlpar\tx1620 \f5\fs20 {\uldb FILEOPEN}{\v\uldb function_fileopen}\tab Opens a disk file for read, write, or append access{\uldb
\par READLN}{\v function_readln}\tab Reads text from an open disk file{\uldb
\par WRITELN}{\v function_writeln}\tab Writes text to an open disk file{\uldb
\par FILECLOSE}{\v function_fileclose}\tab Closes an open disk file{\uldb
\par FILESMATCH}{\v function_filesmatch}\tab Returns TRUE if two files are binary matches{\uldb
\par }\pard \fi-1512\li1627\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FILEOPEN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_fileopen}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C015a}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} file;I/O;functions;fileopen}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_fileio')")}} FILEOPEN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 FILEOPEN(x,y) - NUMERIC
\par This function opens the file whose name is in 'x' using the access mode specified by 'y'.  The 'x' parameter is a string containing the file name.  The 'y' parameter is a number with one of the following values:
\par 0 - open file for read access
\par 1 - open file for write access
\par 2 - open file for append access
\par If the file is opened for 'write' or 'append' access, and it does not exist, it is created.
\par All I/O on the open file is performed SERIALLY, using character I/O.  The <CR><LF> characters are used to terminate lines.  The 'append' access mode differs from the 'write' mode in that the 'WRITELN()' function adds lines to the end of the file, leaving
any existing data unscathed.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} READLN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_readln}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C015b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} file;I/O;functions;readln}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_fileio')")}} READLN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 READLN(x) - STRING
\par This function reads a single line of characters from the file referenced by the 'x' argument (must be a file previously opened using 'FILEOPEN()', above) and returns this line without the terminating <CR><LF>.  On end of file it returns a string that cont
ains CHAR(26).  You can test for this condition using the ISEOF() function (below).  Example:
\par \tab LET F1=FILEOPEN("MYFILE.TXT",0)
\par \tab :READLOOP
\par \tab LET L=READLN(F1)
\par \tab IF (ISEOF(L)) GOTO END_OF_FILE
\par \tab ECHO.%L%
\par \tab GOTO READLOOP
\par \tab :END_OF_FILE
\par \tab ECHO.
\par \tab ECHO.** COMPLETED **
\par \tab ECHO.
\par If the file was not opened using 'read' access, this function will fail.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} WRITELN Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_writeln}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C015c}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} file;I/O;functions;writeln}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_fileio')")}} WRITELN Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 WRITELN(x, y) - STRING
\par This function writes a
single line of characters from the string referenced by the 'y' argument to the file referenced by the 'x' argument (must be a file previously opened using 'FILEOPEN()', above).  The string in 'y' will have a <CR><LF> sequence appended to it before it is
written to the file.
\par If the file was not opened using either 'write' or 'append' access, this function will fail.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FILECLOSE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_fileclose}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C015d}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} file;I/O;functions;fileclose}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_fileio')")}} FILECLOSE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 FILECLOSE(x) - VOID
\par This function closes a file opened using 'FILEOPEN()' (above).  *IMPORTANT* - you MUST call this function for each file that is opened using 'FILEOPEN()', or else the memory and file resources will eventually be exhausted.  If you terminate the program, a
ll files opened using 'FILEOPEN()' will be automatically closed for you, in case the file ID values returned by 'FILEOPEN()' are somehow lost (and you cannot close them manually).
\par It is important to remember that use of FILEOPEN() and FILECLOSE() has the potential of causing an APPLICATION ERROR, since the value returned by 'FILEOPEN()' references memory directly.  Closing the same file more than once, or performing read/write oper
ations with an invalid file ID can adversely affect the operation of SFTShell, or even other programs on the system!  Use caution to ensure that only valid file ID values (as returned by FILEOPEN()') are ever passed to functions that operate on files.

\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FILESMATCH Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_filesmatch}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C015e}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} file;I/O;functions;filesmatch}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_fileio')")}} FILESMATCH Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 FILESMATCH(x,y) - BOOL
\par This function compares the 2 files defined by the filename expressions 'x' and 'y', returning a value of zero if the files do not match, or an error occurs, o
r a non-zero value if they match.  File dates and attributes are not taken into consideration during this test; only the length of the files and the binary data contained within them is checked.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Windows Profile Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_profile}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C016}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} functions;profile}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Windows Profile Functions
\par \pard\plain \fi-2765\li2880\sb80\sl-240\slmult0\widctlpar\tx2880 \f5\fs20 {\uldb GETPROFILESTRING}{\v function_getprofilestring}\tab Retrieves the profile string for the specified keys{\uldb
\par WRITEPROFILESTRING}{\v function_writeprofilestring}\tab Writes the profile string for the specified keys{\uldb
\par }\pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETPROFILESTRING Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getprofilestring}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C016a}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} functions;profile;getprofilestring}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_profile')")}} GETPROFILESTRING Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETPROFILESTRING([profile,] appname, valuename) - STRING
\par This functions gets the profile string from the profile specified in the 'profile' parameter (if not specified, it uses 'WIN.INI').  Within the profile, the 'appname' and 'valuename' strings are used to identify which value to obtain.  Example:
\par For the following profile contents in 'PROFILE.INI'
\par               [appname]
\par               valuename=STRING VALUE
\par the following function call
\par               GETPROFILESTRING("PROFILE.INI","appname","valuename")
\par returns the value "STRING VALUE".
\par If no string value exists for 'valuename', a blank string is returned by this function.
\par SPECIAL CASE:  If the 'valuename' parameter is a zero-length string the function returns an array of all of the possible values for 'valuename' within 'appname' that currently exist in the profile.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} WRITEPROFILESTRING Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_writeprofilestring}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C016b}}
{\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} functions;profile;writeprofilestring}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
{\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_profile')")}} WRITEPROFILESTRING Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 WRITEPROFILESTRING([profile,] appname, valuename, string) - VOID
\par This function is like 'GETPROFILESTRING()' except that it allows you to set a value for a given profile string.  The 'string' parameter is the value to assign to the profile string 'valuename' within the 'appname'.
\par SPECIAL CASE:  If the 'string' parameter is a zero-length string, the entry for 'valuename' is removed from the profile.  If you wish a 'blank' entry to remain, use a value of " " for 'string'.
\par Additionally, if both 'valuename' and 'string' are zero-length strings, all of the entries for 'appname', plus the '[appname]' entry, will be removed from the profile.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Application Control Functions}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_control}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}} Application Control Functions
\par \pard\plain \fi-2045\li2160\sb80\sl-240\slmult0\widctlpar\tx2160 \f5\fs20 {\uldb INPUT}{\v function_input}\tab Retrieves a line of user input as an ASCII string{\uldb
\par PAUSE}{\v function_pause}\tab Waits for a specified time period in milliseconds before continuing{\uldb
\par PARSE}{\v function_parse}\tab Converts a line of text into an array.{\uldb
\par }
\par \pard \li120\sb80\sl-240\slmult0\widctlpar\tx2160 {\b\cf9 Advanced Features}
\par \pard \fi-2045\li2160\sb80\sl-240\slmult0\widctlpar\tx2160 {\uldb SHOWWINDOW}{\v function_showwindow}\tab Modifies the display state of a window{\uldb
\par SENDKEYS}{\v function_sendkeys}\tab Sends keystrokes to a window{\uldb
\par SENDVIRTUALKEY}{\v\uldb function_sendvirtualkey}\tab Sends a 'virtual key' code to a window
\par \pard \fi-2045\li2160\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} INPUT Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_input}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions;input}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_control')")}} INPUT Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 INPUT([x [,y]]) - STRING
\par This function obtains input from the user (similar to the INPUT command), returning the un-altered string entered by the user.  If the optional 'x' parameter is omitted, a prompt of "? " is printed before obtaining the user response.  Otherwise, the strin
g contained in 'x' (with no carriage return or line feed chara
cters added to the string) is printed on the screen as an 'input prompt'.  If the optional parameter 'y' is specified, it contains the "default" value to be pre-assigned to the line input buffer.  This way the user can edit the 'default' value as though i
t had already been typed in.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PAUSE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_pause}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions;pause}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_control')")}} PAUSE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 PAUSE(x) - BOOLEAN
\par This function will perform the equivalent of a 'WAIT FOR ' command, except that 'x' is a numeric value representing the number of MILLISECONDS in which to wait.  The function returns a value of TRUE if the 'PAUSE' was interrupted by the user; otherwise it
 returns FALSE.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PARSE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_parse}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017c}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions;parse}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_control')")}} PARSE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 PARSE(x) - ARRAY of STRINGS
\par This function takes the string 'x' and attempts to 'parse out' the various arguments in the string as though it were the command line of a program, or the parameters passed to a 'batch' command file.  The individual 'parse'd parameters are then stored in
the array, with leading and trailing white-space removed.  Any parameter that is contained in QUOTES (" or ') remains the same, except that the quote marks are removed, (and \\" or \\' escapes are 'contracted' to " and ', respectively).
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SHOWWINDOW Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_showwindow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017d}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions;showwindow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_control')")}} SHOWWINDOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SHOWWINDOW([window,]mode) - No return value
\par Performs a 'ShowWindow()' API function, using the value of 'mode' to display the window whose handle is sp
ecified by the optional 'window' parameter (or the SFTShell 'main window' if only 1 parameter is specified as the argument).  If specified, the 'window' parameter must be a valid window handle.  The following is a list of the possible values for 'mode':

\par \pard \li120\sb240\sl-240\slmult0\widctlpar {\ul Mode\tab Description\tab \tab \tab \tab \tab \tab \tab
\par }\pard \li120\sl-240\slmult0\widctlpar 0\tab SW_HIDE (window is no longer visible)
\par 1\tab SW_SHOWNORMAL/SW_NORMAL - Undo min/max and activate
\par 2\tab SW_SHOWMINIMIZED - minimize window (icon)
\par 3\tab SW_SHOWMAXIMIZED/SW_MAXIMIZE - maximize window
\par 4\tab SW_SHOWNOACTIVATE - show (unhide), but do not activate
\par 5\tab SW_SHOW - show (unhide) window and activate
\par 6\tab SW_MINIMIZE - minimize window (icon)
\par 7\tab SW_SHOWMINNOACTIVE - minimize but do not activate
\par 8\tab SW_SHOWNA - show (unhide), but do not activate
\par 9\tab SW_RESTORE - Undo min/max and activate
\par \pard \li120\sb80\sl-240\slmult0\widctlpar This function does not return a value.
\par If the 'mode' argument passed to this function is a 'blank' or non-numeric string, the value for 'SW_SHOWNORMAL' (a value of 1) is assumed to prevent accidental hiding of the window.
\par Use of this function allows SFTShell to control windo
ws belonging to other applications.  Use the 'GETWINDOW()' function to obtain handles for other application's windows (index 0 within the array returned by 'GETWINDOW()').  It is important to note that the control of other applications' windows may cause
problems in the applications, possibly leading to an inability to close or activate the application, or a 'system hang-up'.  Discretion in the use of this function is advised.
\par For more information on the 'ShowWindow()' API function, or the various modes, see the Windows{\f1 \'d4} 3.1 Software Development Kit documentation, or similar API documentation.
\par See also:  {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb GETCHILDWINDOW()}{\v function_getchildwindow}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SENDKEYS Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_sendkeys}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017e}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions;sendkeys}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_control')")}} SENDKEYS Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SENDKEYS(window,string) - No return value
\par This function sends the characters in 'string' to the window specified by the 'window' parameter as ASCII characters using the 'WM_CHAR' message.  There is no return value. The 'window' parameter must be a valid window handle.
\par See also:  {\uldb SENDVIRTUALKEY()}{\v function_sendvirtualkey}, {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb GETCHILDWINDOW()}{\v function_getchildwindow}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SENDVIRTUALKEY Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_sendvirtualkey}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C017f}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} application control;functions;sendvirtualkey}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_control')")}} SENDVIRTUALKEY Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SENDVIRTUALKEY(window,charcode[,ctrlaltflag]) - No return value
\par \pard \li120\sb240\sl-240\slmult0\widctlpar
This function sends a single keystroke represented by the NUMERIC value 'charcode', and modified by the optional 'ctrlaltflag' to the window specified by the 'window' parameter.  The 'window' parameter must be a valid window handle (see GETWINDOW()).  The
 character is posted to the message queue using either the 'WM_KEYDOWN' and 'WM_KEYUP' messages (for 'non-alt' keys) or the 'WM_SYSKEYDOWN' and 'WM_SYSKEYUP' messages (for 'alt' keys).  If specified, the 'ctrlaltflag' must be one of the following values:

\par {\ul Value\tab Description\tab \tab \tab \tab \tab \tab \tab
\par }\pard \li120\sl240\slmult0\widctlpar 0\tab No SHIFT, CTRL, or ALT
\par 1\tab SHIFT only
\par 2\tab CTRL only
\par 3\tab SHIFT + CTRL
\par 4\tab ALT only  (uses 'WM_SYSKEYDOWN' and 'WM_SYSKEYUP')
\par 5\tab SHIFT + ALT
\par 6\tab CTRL + ALT
\par 7\tab SHIFT + CTRL + ALT
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The value of 'ctrlaltflag' is assumed to be '0' when the parameter is not specified.
\par The 'charcode' parameter must be a valid 'virtual' key code.  A complete list of 'virtual' key codes can be found in the Microsoft{\f1 \'e2} Windows{\f1 \'d4}
 3.1 Software Development Kit documentation.  Below is a list of commonly used 'virtual' key codes:
\par \pard \li120\sl-240\slmult0\widctlpar {\ul Key\tab Char Code\tab \tab Key\tab Char Code
\par }\pard \li120\sl-240\slmult0\widctlpar\tx720\tqr\tx1440\tx2160\tx2880\tx3600\tqr\tx4320 F1\tab \tab 112\tab \tab PgDn\tab \tab 33
\par F2\tab \tab 113\tab \tab PgUp\tab \tab 34
\par F3\tab \tab 114\tab \tab End\tab \tab 35
\par F4\tab \tab 115\tab \tab Home\tab \tab 36
\par F5\tab \tab 116\tab \tab Left\tab \tab 37
\par F6\tab \tab 117\tab \tab Up\tab \tab 38
\par F7\tab \tab 118\tab \tab Right\tab \tab 39
\par F8\tab \tab 119\tab \tab Down\tab \tab 40
\par F9\tab \tab 120\tab \tab PrtScn\tab \tab 44
\par F10\tab \tab 121\tab \tab Insert\tab \tab 45
\par F11\tab \tab 122\tab \tab Delete\tab \tab 46
\par F12\tab \tab 123\tab \tab Enter\tab \tab 13
\par Tab\tab \tab 9\tab \tab Escape\tab \tab 27
\par Bksp\tab \tab 8
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
For alphanumeric characters, the 'virtual' key codes are the same as the UPPER CASE 'ASCII' code values.  Therefore, to send an 'ALT-X' to an application whose window is stored in the environment variable 'hwnd', you could use:
\par \tab LET a=SENDVIRTUALKEY(hwnd, ASC("X"), 4)
\par If the window had a menu item that had an 'underscore' on the 'x' character, that menu would be activated by the above command.
\par If it is only desired to 'press' the 'ALT', 'SHIFT', or 'CONTROL' keys (or a combination of them) specify a 'charcode' value of zero.  Typically, pressing the 'ALT' key by itself activates the menu bar.  To perform this operation, you could use:
\par \tab LET a=SENDVIRTUALKEY(hwnd, 0, 4)
\par IMPORTANT:  If a virtual key is sent to a window using the 'ALT' flag, it is possible to confuse the system if this window does not have the focus.  Therefore, it is a good idea to use SHOWWINDOW() to set the focus to the appropriate window before using S
ENDVIRTUALKEY(). ('GETWINDOW()' can be used to verify a window as being the 'active' window; that is, having the input focus).
\par Example:
\par \tab LET void=SHOWWINDOW(hwnd,9)
\par \tab LET void=SENDVIRTUALKEY(hwnd, ASC("E"), 4)
\par See also:  {\uldb SENDKEYS()}{\v function_sendkeys}, {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb GETCHILDWINDOW()}{\v function_getchildwindow}, {\uldb SHOWWINDOW()}{\v function_showwindow}
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Information (ITERATIVE) - Advanced}} {
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} functions_advancedinfo}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C018}} {\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions}} {\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`function_groups')")}}
 Information (ITERATIVE) - Advanced
\par \pard\plain \fi-2045\li2160\sb80\sl-240\slmult0\widctlpar\tx2160 \f5\fs20 {\uldb GETTASK}{\v function_gettask}\tab Returns a task handle associated with the parameter{\uldb
\par GETINSTANCE}{\v function_getinstance}\tab Returns an instance handle associated with the parameter{\uldb
\par GETMODULE}{\v function_getmodule}\tab Returns a module handle associated with the parameter{\uldb
\par GETWINDOW}{\v function_getwindow}\tab Returns an array of information about a window{\uldb
\par GETCHILDWINDOW}{\v function_getchildwindow}\tab Returns an array of information about a 'child' window{\uldb
\par FINDWINDOW}{\v function_findwindow}\tab Returns an array of window handles matching criteria{\uldb
\par FINDCHILDWINDOW}{\v function_findchildwindow}\tab Returns an array of 'child' window handles matching criteria{\uldb
\par TASKLIST}{\v function_tasklist}\tab Returns an array of task handles for each running task{\uldb
\par MODULELIST}{\v function_modulelist}\tab Returns an array of handles for each loaded module{\uldb
\par DIRLIST}{\v function_dirlist}\tab Returns an array of file names according to the specified path{\uldb
\par FILEINFO}{\v function_fileinfo}\tab Returns an array of information about a file name{\uldb
\par MODULEINFO}{\v function_moduleinfo}\tab Returns an array of information about a module{\uldb
\par TASKINFO}{\v function_taskinfo}\tab Returns an array of information about a task
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETTASK Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_gettask}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018a}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;gettask}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} GETTASK Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETTASK([x,[y]]) - TASK HANDLE
\par Returns a TASK HANDLE value based on the value in 'x', and the optional 'iteration' value in 'y'.  Depending upon the type of data that 'x' represents, the GETTASK() function will attempt to find the 1st (or 'y + 1'th) occurrence of 'x', and return the ta
sk handle that corresponds to it.
\par EXAMPLE 1:\tab to get the 2nd occurrence of 'NOTEPAD' in the system, you would use:
\par \tab GETTASK("NOTEPAD",1)
\par EXAMPLE 2:  to get the task handle corresponding to the instance handle in 'a', you would use:
\par \tab GETTASK(a)
\par EXAMPLE 3:  to see if FILE MANAGER is loaded, and get the 1st task handle if it is, you would use:
\par \tab GETTASK("WINFILE")
\par The value of 'x' may be one of the following:
\par WINDOW HANDLE
\par INSTANCE HANDLE
\par TASK HANDLE
\par MODULE HANDLE
\par MODULE NAME
\par If the parameter 'x' is not specified, it assumes the current task (SFTShell).
\par If the value of 'x' cannot be correlated with a TASK HANDLE, the return value is a blank string (which also evaluates to zero).
\par See also:  {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb GETINSTANCE()}{\v function_getinstance}, {\uldb GETMODULE()}{\v function_getmodule}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETINSTANCE Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getinstance}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018b}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;getinstance}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} GETINSTANCE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETINSTANCE([x[,y]]) - INSTANCE HANDLE
\par This function is much like 'GETTASK()'.  The parameters for this function are identical, except that it returns an INSTANCE HANDLE rather than a TASK HANDLE.  If the parameter 'x' is not specified, it assumes the current task (SFTShell).
\par If the value of 'x' cannot be correlated with an INSTANCE HANDLE, the return value is a blank string (which also evaluates to zero).
\par See also:  {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb GETTASK()}{\v function_gettask}, {\uldb GETMODULE()}{\v function_getmodule}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETMODULE Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getmodule}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018c}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;getmodule}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} GETMODULE Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETMODULE([x]) - MODULE HANDLE
\par This function is much like 'GETTASK()', but only allows a single parameter 'x' which may be one of the following:
\par WINDOW HANDLE
\par INSTANCE HANDLE
\par TASK HANDLE
\par MODULE HANDLE
\par MODULE NAME
\par If the parameter 'x' is not specified, it assumes the current task (SFTShell).
\par If the value of 'x' cannot be correlated with a MODULE HANDLE, the return value is a blank string (which also evaluates to zero).
\par See also:  {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb GETTASK()}{\v function_gettask}, {\uldb GETINSTANCE()}{\v function_getinstance}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETWINDOW Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getwindow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018d}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;getwindow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} GETWINDOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETWINDOW([x[,y]]) - ARRAY (see description below)
\par Returns an array which describes the window referenced by 'x', and the optional 'iteration' value in 'y'.  Depending upon the type of data that 'x' represents, the GETWINDOW() function will attempt to find the 1st (or 'y + 1'th) occurrence of 'x', and ret
urn the window handle that corresponds to it.  The parameters for this function are identical to those of GETTASK(), except that it returns an ARRAY describing a WINDOW, rather than a TASK HANDLE.
\par The returned array contains both NUMERIC and STRING data.  Below is a description of each element of the array, and its contents:
\par {\ul Index\tab Description
\par }\pard \fi-540\li720\sl-240\slmult0\widctlpar\tx720 0\tab Window Handle (NUMERIC) - uniquely identifies window
\par 1\tab Window Title (STRING) - the 'title bar' text
\par 2\tab Window Parent (NUMERIC) - the parent (owning) window (zero if no parent - i.e. 'top level' window)
\par 3\tab Window State (NUMERIC) - one of the following:
\par \tab 0  - Window is hidden
\par \tab 1  - Window is being shown 'normally'
\par \tab 2  - Window is MINIMIZED (iconic)
\par \tab 3  - Window is MAXIMIZED
\par 4\tab Window Active (BOOLEAN) - 1 if window is 'active' (has 'input focus', title bar highlighted), 0 if not.
\par 5\tab Window Enabled (BOOLEAN) - 1 if window is 'enabled' (can accept input from mouse/keyboard), 0 if not
\par 6\tab Window Instance (NUMERIC) - the owning instance
\par 7\tab Window Class (STRING) - the window's 'class name'
\par \pard \li120\sb80\sl-240\slmult0\widctlpar If the parameter 'x' is not specified, it assumes the current task (SFTShell) and the main window.
\par If the value of 'x' cannot be correlated with a WINDOW HANDLE, the return value is a blank string (empty array).
\par See also:  {\uldb GETCHILDWINDOW()}{\v function_getchildwindow}, {\uldb GETTASK()}{\v function_gettask}, {\uldb GETINSTANCE()}{\v function_getinstance}, {\uldb GETMODULE()}{\v function_getmodule}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GETCHILDWINDOW Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_getchildwindow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018e}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;getchildwindow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0
\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} GETCHILDWINDOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 GETCHILDWINDOW(window,iter) - ARRAY (see 'GETWINDOW()')
\par This function is similar to GETWINDOW() above, except that it allows you to obtain information about CHILD windows that belong to the window whose handle is specified in the 'window' parameter.  The return value is identical to that returned by 'GETWINDOW
()'.
\par The 'window' parameter must be a valid WINDOW
 HANDLE (as obtained from the first entry (index '0') in the array returned by 'GETWINDOW()').  The 'iter' parameter is the iteration value, in which the first entry is 0, the next 1, and so forth.  This parameter is required (unlike 'GETWINDOW()').  A 'c
hild' window is defined as a window that is owned by a 'parent' window.  The 'GETWINDOW()' function only enumerates 'parent' windows, though some may have parents themselves.  A 'button' or other control item on a dialog box, for example, is a child windo
w.
  Also, the 'NOTEPAD' application currently creates an 'EDIT' control within the main window; this is also a child window.  If you desired to send keystrokes to NOTEPAD, you would need to get this window handle before you could insert the keystrokes as te
xt into the current file.
\par The various 'standard controls' that are defined by Windows{\f1 \'d4} and are normally used as CHILD windows have CLASS NAMES (array index 7) that are one of the following:
\par \pard \li120\sb80\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435            {\ul Class Name\tab Description
\par }\pard \li120\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435            BUTTON\tab \tab Pushbuttons, 'Radio' buttons, Checkboxes
\par            COMBOBOX\tab 'COMBO' box ('List' box plus 'Edit' box)
\par            EDIT\tab \tab 'Edit' box - allows you to type in/edit text
\par            LISTBOX\tab 'List' box - displays a list of items
\par            SCROLLBAR\tab Scroll-bar (vertical or horizontal)
\par            STATIC\tab \tab 'Static' text box - text labels and so forth
\par \pard \li120\sb80\sl-240\slmult0\widctlpar Other classes may be present which are defined by the programmer.  Testing for a particular class name (as well as the 'caption') is useful when writing intelligent 'macro' programs th
at perform keystroke entry to particular windows in an application when they appear.  It is possible to test for the presence (or absence) of a particular window or child window to verify the status of the application, and thereby perform complex automate
d tasks.
\par See also:  {\uldb GETWINDOW()}{\v function_getwindow}, {\uldb SENDKEYS()}{\v function_sendkeys}, {\uldb SENDVIRTUALKEY()}{\v function_sendvirtualkey}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FINDWINDOW Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_findwindow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018f}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;findwindow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} FINDWINDOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 FINDWINDOW([x[,y[,z]]]) - ARRAY of 'WINDOW HANDLE's
\par This function generates an array containing WINDOW HANDLE values that correspond to all of the top-level windows meeting the criteria passed to the function.  This function corresponds to using {\uldb GetWindow()}{\v function_getwindow}
 and stepping the 'iteration' value until no more windows are available, while at the same time selecting only those window handles which meet a specific criteria.
\par The 'x' parameter contains either a module name, module handle, task handle, instance handle, or 'owner' window handle.  This parameter is optional; specifying a blank string for the 'x' parameter (or not including it in the argument list) will include al
l windows in the search criteria.
\par The 'y' parameter contains a WINDOW CLASS NAME.  You can use the 'GetWindow()' function if you wish to determine which class a particular window has.  The search criteria is NOT case sensitive, so a window with a class of "Progman
" will match both "progman" and "PROGMAN".  A blank value (or no value) matches all window classes.
\par The 'z' parameter contains the window 'Caption' (or assigned text) for the window you are searching for.  This is a case-insensitive ASCII compare (no wildcards).  A window with a caption of "Program Manager" will match both "PROGRAM MANAGER" and "program
 manager".  A blank value (or no value) matches all window captions.
\par As an example, to obtain a list of all windows belonging to 'WINFILE' that are of class 'WFS_Tree' you can use the following:
\par FINDWINDOW("WINFILE","WFS_Tree")
\par And, to obtain a list of all windows belonging to 'PROGMAN' that have the caption "Accessories" you can use the following:
\par FINDWINDOW("PROGMAN","","Accessories")
\par
\par This function can be particularly useful in AUTOMATED PROCESS CONTROL applications, to search for a particular window to which keystrokes will be sent.  It is an efficient function which do
es not yield t o other applications until the window list has been generated, thus generating an effective 'snapshot' of window handles at the time it is called..
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FINDCHILDWINDOW Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_findchildwindow}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018g}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;findchildwindow}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0
\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} FINDCHILDWINDOW Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 FINDCHILDWINDOW(w[,x[,y[,z]]]) - ARRAY of 'WINDOW HANDLE's
\par This function generates an array containing WINDOW HANDLE values that correspond to all of the child windows meeting the criteria passed to the function.  This function corresponds to using {\uldb GetChildWindow()}{\v function_getchildwindow}
 and stepping the 'iteration' value until no more windows are available, while at the same time selecting only those window handles which meet a specific criteria.
\par The 'w' parameter contains either a module name, module handle, task handle, instance handle, or '
parent' window handle.  This parameter is required; however, you can specify a blank string for the 'w' parameter  to include all 'child' windows in this part of the search criteria.
\par The 'x' parameter contains a WINDOW CLASS NAME.  You can use the 'GetChildWindow()' function if you wish to determine which class a particular 'child' window has.  The search criteria is NOT case sensitive, so a window with a class of "EDIT" will match bo
th "Edit" and "edit".  A blank value (or no value) matches all 'child' window classes.
\par The 'y' parameter contains the window 'Caption' (or assigned text) for the window you are searching for.  This is a case-insensitive ASCII compare (no wildcards).  A 'child' window with a caption of "Enter Password:" will match both "ENTER PASSWORD:" and
"enter password:".  A blank value (or no value) matches all 'child' window captions.
\par The 'z' parameter contains the CONTROL ID that you wish to search for.  Excluding this parameter  will include all 'child' windows in this part of the search criteria.
\par As an example, to obtain a list of all 'child' windows belonging to 'WINFILE' that are of class 'LISTBOX' you can use the following:
\par FINDCHILDWINDOW("WINFILE","LISTBOX")
\par And, to obtain a list of all 'child' windows belonging to 'PROGMAN' that have the caption "SFTShell" you can use the following:
\par FINDCHILDWINDOW("PROGMAN","","SFTShell")
\par
\par This function can be particularly useful in AUTOMATED PROCESS CONTROL applications, to search for a particular 'child' window to which keystrokes will be sent.  I
t is an efficient function which does not yield t o other applications until the 'child' window list has been generated, thus generating an effective 'snapshot' of 'child' window handles at the time it is called..
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TASKLIST Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_tasklist}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018h}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;tasklist}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} TASKLIST Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TASKLIST(x) - ARRAY of 'TASK HANDLE's
\par This function generates an array containing TASK HANDLE values that correspond to all of the current running tasks in the system.  Using this function enables taking 'snapshot' of the current running tasks prior to performing any additional operations tha
t may affect the system's internal task list.  The parameter 'x' is an optional STRING value that contains a 'pattern' which may be used to include only certain tasks based on the name of the program (module name).  So, to get a list o
f all of the CARDFILE tasks running in the system, you would use:
\par \tab TASKLIST("CARDFILE")
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MODULELIST Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_modulelist}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018i}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;modulelist}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} MODULELIST Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 MODULELIST(x) - ARRAY of 'MODULE HANDLE's
\par This function generates an array containing MODULE HANDLE values that correspond to all of the current running tasks in the system.  Using this function enables taking 'snapshot' of the current running tasks prior to performing any additional operations t
hat may affect the system's internal task list.  The parameter 'x' is an optional STRING value that contains a 'pattern' which may be used to include only certain tasks based on the name of the program (module name).  So, to get a list of all modules begi
nning with 'Q', you would use:
\par \tab MODULELIST("Q*")
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DIRLIST Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_dirlist}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018j}} {\cs15\fs20\up6\super
K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;dirlist}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} DIRLIST Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 DIRLIST(x[,y]) - ARRAY of STRINGS
\par This function generates a list of file names which correspond to the pattern in 'x', and optional attributes in 'y'.  The 'y' parameter is a string containing the '/a' switches used by the 'dir' command.  A blank string represents '/a' with no switches (w
hich is different than a missing parameter).  The first entry in the array is the fully-qualified path name without the file name specification, and a trailing '\\'.  The remaining entries are the file names themselves.
\par
\par Valid attributes: A, R, H, S, D
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FILEINFO Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_fileinfo}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018k}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;fileinfo}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} FILEINFO Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 FILEINFO(x) - ARRAY (see below)
\par This function generates an array that contains information about a file whose name is in 'x' (no wildcards allowed in the name).  If the file does not exist, a 'blank' (zero length) string is returned.
This function can also be used to test for a file's existence by using something similar to:
\par \tab 'IF (LEN(FILEINFO(file_name))) GOTO file_exists'
\par The array returned by this function contains the following:
\par \pard\plain \s38\li115\sb80\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435\tx5155 \f5\fs20\ul {\ulnone \tab }INDEX\tab TYPE\tab \tab DESCRIPTION
\par \pard\plain \s37\fi-2880\li2995\sl-240\slmult0\widctlpar\tx835\tx1555\tx2995\tx3715\tx4435\tx5155 \f5\fs20 \tab   0\tab STRING\tab FILE NAME
\par \tab   1\tab STRING\tab FULLY QUALIFIED PATH
\par \tab   2\tab STRING\tab FILE ATTRIBUTES (ARHSDV)
\par \tab   3\tab NUMERIC\tab SIZE (blank if directory or label)
\par \tab   4\tab NUMERIC\tab DATE/TIME, same format as returned by the 'NOW()' function.
\par \tab   5\tab STRING\tab 'program' type (if known or applicable)
\par \tab   6\tab STRING\tab 'long name' (if long file names are supported)
\par \tab   7\tab NUMERIC\tab DISK SPACE required by file (whole clusters)
\par \tab   8\tab NUMERIC\tab COMPRESSED SIZE of file (whole MDFAT clusters)
\par \tab \tab \tab (blank if not known or can't be determined)
\par \tab   9\tab NUMERIC\tab LAST ACCESS DATE/TIME (same format as 'NOW()')
\par \tab  10\tab NUMERIC\tab CREATE DATE/TIME (same format as 'NOW()')
\par \tab  11\tab NUMERIC\tab 'FILE OPEN' flag; 1=0pen, 0=Not Open (valid only if SHARE loaded or OS intrinsically supports file sharing/locking)
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 Other elements may be added in future releases.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MODULEINFO Function}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_moduleinfo}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018l}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;moduleinfo}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} MODULEINFO Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 MODULEINFO(x) - ARRAY (see below)
\par This function generates an array that contains information about a module whose MODULE HANDLE is 'x'.  The array returned by this function contains the following:
\par \pard\plain \s38\li115\sb80\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435\tx5155 \f5\fs20\ul {\ulnone \tab }INDEX\tab TYPE\tab \tab DESCRIPTION
\par \pard\plain \s37\fi-2880\li2995\sl-240\slmult0\widctlpar\tx835\tx1555\tx2995\tx3715\tx4435\tx5155 \f5\fs20 \tab   0\tab STRING\tab MODULE HANDLE
\par \tab   1        STRING\tab MODULE NAME
\par \tab   2        STRING\tab MODULE FILE NAME (fully qualified)
\par \tab   3        NUMERIC\tab REFERENCE COUNT (number of instances)
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par Other elements may be added in future releases.
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TASKINFO Function}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} function_taskinfo}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C018m}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} information - iterative;functions;taskinfo}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`functions_advancedinfo')")}} TASKINFO Function
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 TASKINFO(x) - ARRAY (see below)
\par This function generates an array that contains information about a task whose TASK HANDLE or INSTANCE HANDLE is 'x'.  The array returned by this function contains the following:
\par \pard\plain \s38\li115\sb80\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435\tx5155 \f5\fs20\ul {\ulnone \tab }INDEX\tab TYPE\tab \tab DESCRIPTION
\par \pard\plain \s37\fi-2880\li2995\sl-240\slmult0\widctlpar\tx835\tx1555\tx2995\tx3715\tx4435\tx5155 \f5\fs20 \tab   0\tab NUMERIC\tab TASK HANDLE
\par \tab   1\tab NUMERIC\tab INSTANCE HANDLE
\par \tab   2\tab NUMERIC\tab MODULE HANDLE
\par \tab   3\tab STRING\tab MODULE NAME
\par \tab   4\tab NUMERIC\tab REFERENCE COUNT (number of instances)
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 Other elements may be added in future releases.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Sample Programs}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} sample_programs}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C019}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} Sample Programs}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`CALC')")}} Sample Programs
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\uldb Alarm Program}{\v sample_alarm}
\par {\uldb Calculator Program}{\v sample_calculator}
\par {\uldb Directory Program}{\v sample_directory}
\par {\uldb Process Control Program}{\v sample_control}
\par {\uldb Window Information Program}{\v sample_windowinfo}
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Alarm Sample Program}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} sample_alarm}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C020}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} alarm;sample program}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`sample_programs')")}} Alarm Sample Program
\par \pard\plain \sb240\sa120\sl240\slmult0\widctlpar \f5\fs20 The following is a sample program which demonstrates the use of some of the basic I/O capabilities that are part of SFTShell's high level language extens
ions.  The following program will begin playing every '.WAV' file it finds in the 'C:\\
WINDOWS' directory at a specified 'alarm' time, either from the command line of the BATCH file (first parameter), or as entered in by the user.  Some error checking is performed, and some ANSI color strings are created
 to show one method of controlling display color.  Additionally, expression substitution is used in ECHO commands to center displayed strings within a 64 byte 'page' area (making the display a bit nicer).
\par \pard \widctlpar {\f3\fs16       @ECHO OFF
\par       LET esc=char(27)
\par       LET blanks="                                                      "
\par       REM
\par       REM set up ANSI color strings
\par       REM
\par       LET wht_on_red=esc++"[1;37;41m"
\par       LET yel_on_red=esc++"[1;33;41m"
\par       LET cyn_on_blu=esc++"[1;36;44m"
\par       REM
\par       ECHO.
\par       ECHO. %wht_on_red%%(CENTER(LEFT("** The ALARM Batch File **"++blanks,64)))%%cyn_on_blu%
\par       ECHO.
\par       REM
\par       REM determine if the user specified a time on the command line,
\par       REM and get input from user if not
\par       REM
\par       LET WAIT_UNTIL="%1"
\par       IF NOT (LEN(WAIT_UNTIL)) LET WAIT_UNTIL=LTRIM(RTRIM(INPUT("WHEN SHOULD I WAIT UNTIL?")))
\par       IF NOT (TIMEVAL(WAIT_UNTIL)) GOTO INVALID_TIME
\par       REM
\par       REM if the current time is AFTER the time to wait for, we'll be doing
\par       REM our wait until TOMORROW.  Warn the user in this case.
\par       REM
\par       IF (TIMEVAL(WAIT_UNTIL)<=NOW()) ECHO ?Warning - current time is %(TIME(NOW()))%
\par       WAIT UNTIL %WAIT_UNTIL%
\par       REM
\par       REM ** at this point the WAIT is complete **
\par       REM
\par       :INFINITE_LOOP
\par       REM
\par       REM USING THE 'FOR' COMMAND, PLAY EVERY '.WAV' FILE IN 'C:\\WINDOWS'
\par       REM
\par       FOR %%X in (C:\\WINDOWS\\*.WAV) DO PS /W %%X
\par       REM
\par       REM BECAUSE I WANT TO 'WAKE UP' THE USER, KEEP GOING 'TILL THE USER
\par       REM PRESSES CTRL-BREAK TO HALT THE BATCH PROCESS.
\par       REM
\par       GOTO INFINITE_LOOP
\par       REM
\par       REM
\par       :INVALID_TIME
\par       REM
\par       LET msg1="** TIME VALUE \\"%WAIT_UNTIL%\\" IS NOT VALID **"
\par       REM
\par       ECHO %yel_on_red%%(CENTER(LEFT(msg1++blanks,64)))%%cyn_on_blu%
\par       ECHO %(CENTER(LEFT("** OPERATION ABORTED **"++blanks,64)))%
\par       REM
\par       REM EXAMPLE OF A 'CLEANUP' SECTION - GET RID OF VARIABLES USED BY
\par       REM THIS BATCH FILE SO THAT WE DON'T CLUTTER THE ENVIRONMENT
\par       REM
\par       SET msg1=
\par       SET blanks=
\par       SET yel_on_red=
\par       SET cyn_on_blu=
\par       SET wht_on_red=
\par       SET WAIT_UNTIL=}{\fs16
\par }\pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Calculator Sample Program}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} sample_calculator}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C021}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} calculator;sample program}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`sample_programs')")}} Calculator Sample Program
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
This program demonstrates the use of the cursor control and color control capabilities that are part of SFTShell's high level language extensions, plus the ability to evaluate an expression that is contained within a variable.  It is a simple program, whi
ch may have limited practical use, that can be modified to perform tasks like 'keeping history' (similar to paper tape) by scrolling the equations and results inside of small 'windows' on the screen.  The development of such modifications to this code is
left to the user as an exercise in using SFTShell's BATCH language capability.
\par \pard \li120\sl-240\slmult0\widctlpar {\f3\fs16       @ECHO OFF
\par       LET old_bk=GETBKCOLOR()
\par       LET old_text=GETTEXTCOLOR()
\par       REM
\par       REM new colors - white on blue
\par       REM
\par       LET void=SETBKCOLOR(4)++SETTEXTCOLOR(15)
\par       CLS
\par       LET blanks="                                                                                "
\par       LET void=PRINTSTRING(CENTER(LEFT("** CALCULATOR PROGRAM **"++blanks,80)))
\par       LET void=SETCURSOR(5,2)++SETTEXTCOLOR(11)++PRINTSTRING("RESULT:")
\par       LET void=SETCURSOR(5,4)++SETTEXTCOLOR(14)++PRINTSTRING("EQUATION:")
\par       REM
\par       :MAINLOOP
\par       REM
\par       LET void=SETCURSOR(0,7)++SETTEXTCOLOR(15)++SETBKCOLOR(4)
\par       LET eqn=LTRIM(RTRIM(INPUT("Enter equation (<ENTER> to exit): ")))
\par       IF (LEN(eqn)=0) GOTO THE_END
\par       REM
\par       REM use 'printstring()' to clear out 2 rows using ANSI sequence
\par       REM
\par       LET void=SETCURSOR(0,7)++PRINTSTRING(CHAR(27)++"[K")
\par       LET void=SETCURSOR(0,8)++PRINTSTRING(CHAR(27)++"[K")
\par       REM
\par       REM display the equation beneath the 'equation' label
\par       REM color is BLACK on LIGHT GREY
\par       REM
\par       LET void=SETCURSOR(5,5)++SETTEXTCOLOR(0)++SETBKCOLOR(7)
\par       LET void=PRINTSTRING(LJ(LEFT(eqn++blanks,70)))
\par       REM
\par       REM evaluate equation
\par       REM
\par       LET rval=%eqn%
\par       REM
\par       REM display the result to the right of the 'RESULT:' label
\par       REM color is BRIGHT YELLOW on DARK RED
\par       REM
\par       LET void=SETCURSOR(12,2)++SETTEXTCOLOR(11)++SETBKCOLOR(1)
\par       LET void=PRINTSTRING(LJ(LEFT(rval++blanks,60)))
\par       REM
\par       REM continue until user presses <ENTER> (blank line)
\par       REM
\par       GOTO MAINLOOP
\par       REM
\par       :THE_END
\par       REM
\par       LET void=SETCURSOR(0,10)++SETTEXTCOLOR(old_text)++SETBKCOLOR(old_bk)
\par       ECHO.
\par       ECHO. ** COMPLETE **
\par       ECHO.
\par       SET blanks=
\par       SET void=
\par       SET eqn=
\par       SET rval=
\par }\pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Directory Sample Program}} {\cs15\fs20\up6\super #
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} sample_directory}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} C022}} {
\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} sample program;directory}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`sample_programs')")}} Directory Sample Program
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 Use of arrays is important with certain functions, such as TASKLIST() or DIRLIST().  The following section of code is a 'custom DIR' utility that gets file information for each file in the list.

\par \pard \li120\sl-240\slmult0\widctlpar {\f3\fs16       @ECHO OFF
\par       REM
\par       REM   BEGINNING OF PROGRAM
\par       REM
\par       :MAINLOOP
\par       LET in=INPUT("Enter File specification (Blank line to end): ")
\par       REM
\par       REM   TRIM OFF UNNECESSARY JUNK (WHITE-SPACE)
\par       REM
\par       LET in=LTRIM(RTRIM(in))
\par       REM
\par       REM   BLANK STRING?  END PROGRAM
\par       REM
\par       IF (LEN(in)=0) GOTO THE_END
\par       REM
\par       REM   GET FILE LISTING INTO ARRAY 'b'
\par       REM
\par       LET b=DIRLIST(in)
\par       REM
\par       REM   IF THERE ARE NO FILES, b[1] WILL BE 'blank'
\par       REM
\par       IF (LEN(b[1])) GOTO THERE_ARE_FILES
\par       REM
\par       ECHO ?No files matching criteria
\par       GOTO MAINLOOP
\par       REM
\par       REM
\par       :THERE_ARE_FILES
\par       REM
\par       LET c=b[0]
\par       REM     ** note - arrays do not expand when placed in '%%' **
\par       REM
\par       ECHO Directory for %c%
\par       REM
\par       REM     INITIALIZE COUNTER FOR LOOP 'ctr'
\par       REM
\par       LET ctr=1
\par       REM
\par       REM
\par       :FILE_LOOP
\par       REM
\par       REM     WHEN WE ARE DONE WITH THE FILE LIST, 'b[ctr]' WILL BE A
\par       REM     STRING CONSISTING OF ONLY 'WHITE-SPACE'.  IF WE TRIM
\par       REM     ALL OF THE WHITE SPACE, AND THE LENGTH IS ZERO, WE
\par       REM     ARE THEREFORE DONE WITH THE LOOP!
\par       REM
\par       IF NOT (LEN(LTRIM(RTRIM(b[ctr])))) GOTO FILE_LOOP_DONE
\par       REM
\par       REM     USING THE 'FILEINFO()' FUNCTION OBTAIN INFO ABOUT FILE
\par       REM     NOTE THAT WE CONCATENATE THE NAME IN 'b[ctr]' ONTO THE
\par       REM     FULLY QUALIFIED PATHNAME 'b[0]' USING THE '++' OPERATOR
\par       REM
\par       LET c=FILEINFO(b[0]++b[ctr])
\par       REM
\par       REM     EXTRACT EACH FIELD FROM THE ARRAY 'c'
\par       REM
\par       LET name=c[0]
\par       LET attr=c[2]
\par       LET size=c[3]
\par       LET date_time=c[4]
\par       LET type=c[5]
\par       LET dt=DATE(date_time)
\par       LET tm=TIME(date_time)
\par       REM
\par       REM     ** FORMAT ITEMS FOR DISPLAY **
\par       REM     ** DEMO OF FORMAT UTILITIES **
\par       REM
\par       LET name=LJ(LEFT(name++"             ",13))
\par       LET attr=LJ(LEFT(attr++"        ",8))
\par       LET size=RJ(LEFT(size++"          ",10))
\par       LET type=LJ(LEFT(type++"        ",8))
\par       REM
\par       ECHO %name% %attr% %size% %dt% %tm% %type%
\par       REM
\par       REM    CONTINUE WITH THE LOOP
\par       REM
\par       LET ctr=ctr+1
\par       GOTO FILE_LOOP
\par       REM
\par       REM
\par       :FILE_LOOP_DONE
\par       ECHO.
\par       ECHO.
\par       GOTO MAINLOOP
\par       REM
\par       REM   *** WHEN THE USER TYPES A BLANK LINE, THE PROGRAM GOES HERE ***
\par       REM
\par       :THE_END
\par       ECHO.
\par       ECHO.
\par       ECHO ** FINISHED **
\par       REM
\par       REM ** end of program **
\par       REM
\par }\pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Process Control Sample Program}} {
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} sample_control}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +}
 C023}} {\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} process control;sample program}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`sample_programs')")}} Process Control Sample Program
\par \pard\plain \widctlpar \f5\fs20
The following batch program is a small sample of the capabilities that SFTShell makes available through the ADVANCED features; namely, the ability to gather information about an application and post 'character messages' to it (simulating entered keystroke
s), and control the manner in which specified windows are displayed.  The
 sample 'CONTROL' program can be re-written to activate at a particular time of day, day of the week, or in whatever manner is applicable.  It could then take control of a Windows application, sending keystrokes to it to perform menu selection or input fu
nctions.  The status of the application can be monitored, and its success or failure tracked through various means (including Dynamic Data Exchange - see the on-line help regarding DDE), with the appropriate action taken on either success or failure.  Wit
h the gaining popularity of 'downsizing' corporate computer systems, programs like this one have new value in their ability to control the system, and bring to reality the concept of 'operator-free production' in a business environment.
\par {\b\f3\fs16
\par }{\f3\fs16       @ECHO OFF
\par       REM
\par       REM ** THIS PROGRAM DEMONSTRATES THE ABILITY TO CONTROL ANOTHER **
\par       REM ** USING SFTSHELL'S BATCH LANGUAGE AND LANGUAGE EXTENSIONS. **
\par       REM
\par       LET old_text_color=GETTEXTCOLOR()
\par       LET old_bk_color=GETBKCOLOR()
\par       REM
\par       REM set text/background color to YELLOW on BLACK
\par       REM
\par       LET void=SETTEXTCOLOR(11)
\par       LET void=SETBKCOLOR(0)
\par       CLS
\par       SET hdlg=
\par       SET hwnd=
\par       SET hedit=
\par       ECHO.
\par       ECHO.** 'CONTROL' DEMO PROGRAM **
\par       ECHO.
\par       REM
\par       REM set text color to CYAN
\par       REM
\par       LET void=SETTEXTCOLOR(14)
\par       REM
\par       REM ** LOAD THE 'NOTEPAD' APPLICATION AS AN ICONIC WINDOW
\par       REM
\par       LH NOTEPAD
\par       IF NOT (CMD_ERROR) GOTO OK_SO_FAR
\par       ECHO.
\par       ECHO.** Could not start NOTEPAD application **
\par       ECHO.
\par       GOTO THE_END
\par       REM
\par       :OK_SO_FAR
\par       REM
\par       REM ** SAVE THE TASK ID ASSOCIATED WITH THE APPLICATION WE LOADED
\par       REM
\par       LET htask=TASK_ID
\par       REM
\par       REM ** GET THE 'MAIN' WINDOW FOR THIS TASK ('NOTEPAD' CLASS) BY LOOKING
\par       REM ** AT ALL OF THE WINDOWS FOR THE TASK ID USING 'GETWINDOW()' UNTIL
\par       REM ** WE FIND ONE THAT HAS A CLASS NAME 'NOTEPAD'.
\par       REM
\par       LET ctr=0
\par       :LOOP1
\par       REM
\par       REM ** GET WINDOW INFORMATION FOR THIS 'ITERATION' COUNT
\par       REM
\par       LET a=GETWINDOW(htask,ctr)
\par       REM
\par       IF (LEN(a)=0) GOTO LOOP1_BAILOUT
\par       IF (UPPER(a[7])=="NOTEPAD") GOTO LOOP1_END
\par       REM
\par       LET ctr=ctr+1
\par       GOTO LOOP1
\par       REM
\par       :LOOP1_BAILOUT
\par       REM
\par       REM ** COULD NOT FIND 'MAIN' WINDOW FOR 'NOTEPAD' APPLICATION
\par       REM
\par       ECHO.
\par       ECHO.** could not find top-level window for NOTEPAD! **
\par       ECHO.
\par       CLOSETASK %htask%
\par       GOTO THE_END
\par       REM
\par       :LOOP1_END
\par       REM
\par       REM ** 'a' NOW CONTAINS THE INFORMATION ABOUT THE 'MAIN' WINDOW
\par       REM ** ASSIGN THE WINDOW HANDLE TO A VARIABLE 'hwnd'
\par       REM
\par       LET hwnd=a[0]
\par       REM
\par       REM ** BEFORE I SELECT ANY MENU ITEMS, SET FOCUS TO THIS WINDOW
\par       REM
\par       LET void=SHOWWINDOW(hwnd,9)
\par       REM
\par       REM ** SEND THE KEYSTROKES FOR 'ALT-F' 'O' TO THE WINDOW.  NOTICE THAT
\par       REM ** FOR MENU SELECTIONS I ABSOLUTELY MUST SEND 'VIRTUAL' KEY MESSAGES
\par       REM
\par       LET void=SENDVIRTUALKEY(hwnd,ASC("F"),4)
\par       REM
\par       LET void=SENDVIRTUALKEY(hwnd,ASC("O"),0)
\par       REM
\par       REM ** ESTABLISH A RETRY LOOP FOR FINDING THE 'OPEN' DIALOG BOX THAT I
\par       REM ** AM ABOUT TO CREATE.  THE CLASS NAME IS '#32770' (THIS CAN BE
\par       REM ** DETERMINED BY EXPERIMENTATION OR USE OF DIAGNOSTIC SOFTWARE),
\par       REM ** AND THE WINDOW TITLE IS 'OPEN'.
\par       REM
\par       LET ctr1=0
\par       :LOOP2a
\par       REM
\par       REM ** USE A .2 SEC PAUSE PERIOD TO ALLOW THE 'NOTEPAD' APPLICATION SOME
\par       REM ** CPU TIME TO CREATE THE DIALOG BOX (BUT NOT TOO MUCH!).
\par       REM
\par       LET void=PAUSE(200)
\par       LET ctr=0
\par       REM
\par       REM ** AGAIN, STEP THROUGH ALL OF THE WINDOWS UNTIL WE FIND ONE THAT HAS
\par       REM ** THE CORRECT CLASS NAME ('#32770') *AND* WINDOW TITLE ('OPEN').
\par       REM
\par       :LOOP2
\par       REM
\par       LET a=GETWINDOW(htask,ctr)
\par       REM
\par       IF (LEN(a)=0) GOTO LOOP2_BAIL
\par       IF (UPPER(a[7])=="#32770" AND UPPER(a[1])=="OPEN") GOTO LOOP2_END
\par       REM
\par       LET ctr=ctr+1
\par       GOTO LOOP2
\par       REM
\par       :LOOP2_BAIL
\par       REM
\par       REM ** AT THIS POINT NO MATCH WAS FOUND.  SINCE IT IS POSSIBLE THAT THIS
\par       REM ** WINDOW WAS NOT YET CREATED, WE PERFORM SEVERAL 'RETRY' PASSES
\par       REM ** UNTIL WE ACTUALLY FIND IT, OR ELSE PERFORM TOO MANY PASSES.  EACH
\par       REM ** PASS INCLUDES THE .2 SEC DELAY (ABOVE) TO ENSURE THE 'NOTEPAD'
\par       REM ** APPLICATION GETS SOME CPU TIME TO CREATE THE DIALOG BOX.
\par       REM
\par       LET ctr1=ctr1+1
\par       IF (ctr1<10) GOTO LOOP2a
\par       REM
\par       REM ** AT THIS POINT THE 'OPEN' DIALOG DID NOT SHOW.  SO, REPORT THE
\par       REM ** ERROR CONDITION, AND KILL THE APPLICATION.
\par       REM
\par       ECHO.
\par       ECHO.** 'OPEN' DIALOG BOX NOT FOUND! **
\par       ECHO.
\par       REM
\par       CLOSETASK htask
\par       REM
\par       GOTO THE_END
\par       REM
\par       :LOOP2_END
\par       REM
\par       REM ** AT THIS POINT, 'a' CONTAINS THE INFORMATION ABOUT THE 'OPEN'
\par       REM ** DIALOG BOX.  PLACE THE WINDOW HANDLE INTO 'hdlg'.
\par       REM
\par       LET hdlg=a[0]
\par       REM
\par       REM ** NEXT, USING THE DIALOG BOX WINDOW HANDLE, LOOK AT ALL OF THE
\par       REM ** 'CHILD' WINDOWS LOCATED WITHIN THE DIALOG BOX UNTIL WE FIND THE
\par       REM ** ONE THAT IS AN 'EDIT' CLASS... THIS ONE WILL BE THE ONE INTO
\par       REM ** WHICH WE CAN TYPE A FILE NAME.  ONCE WE HAVE THIS WINDOW HANDLE
\par       REM ** WE CAN FORCE THE KEYSTROKES FOR THE DESIRED FILE NAME INTO IT.
\par       REM
\par       LET void=PAUSE(200)
\par       LET ctr=0
\par       REM
\par       :LOOP3
\par       REM
\par       REM ** THIS TIME, USE 'GETCHILDWINDOW()' WHICH OBTAINS 'CHILD'
\par       REM ** WINDOWS (i.e. windows that are located within another window,
\par       REM ** such as the controls on a dialog box, or 'sub-windows' within
\par       REM ** an 'MDI' application, like PROGRAM MANAGER).
\par       REM
\par       LET a=GETCHILDWINDOW(hdlg,ctr)
\par       REM
\par       IF (LEN(a)=0) GOTO LOOP3_BAIL
\par       IF (UPPER(a[7])=="EDIT") GOTO LOOP3_END
\par       REM
\par       LET ctr=ctr+1
\par       GOTO LOOP3
\par       REM
\par       :LOOP3_BAIL
\par       ECHO.
\par       ECHO.** COULD NOT FIND THE 'EDIT' CONTROL **
\par       ECHO.
\par       REM
\par       CLOSETASK htask
\par       REM
\par       GOTO THE_END
\par       :LOOP3_END
\par       REM
\par       REM ** AT THIS POINT, 'a' CONTAINS THE INFORMATION ON THE 'EDIT' CONTROL
\par       REM ** LOCATED ON THE 'OPEN' DIALOG BOX.  SAVE THE WINDOW HANDLE INTO
\par       REM ** THE 'hedit' ENVIRONMENT VARIABLE.
\par       REM
\par       LET hedit=a[0]
\par       REM
\par       REM ** NOW, JUST TO SHOW THAT IT CAN BE DONE, I SHALL *HIDE* THE SFTShell
\par       REM ** MAIN WINDOW DURING THE NEXT PROCESS.
\par       REM
\par       LET void=SHOWWINDOW(0)
\par       REM
\par       REM ** FORCE KEYSTROKES TO THE 'EDIT' WINDOW! **
\par       REM ** TO AVOID VIRTUAL KEY TRANSLATION PROBLEMS, FIRST SET FOCUS TO
\par       REM ** DIALOG's 'EDIT' CONTROL, THEN TO THE DIALOG ITSELF!  NEXT, SEND
\par       REM ** ALL OF THE VIRTUAL KEYS FOR CURSOR MOTION AND SELECTION TO THE
\par       REM ** DIALOG BOX (they get passed to the control properly this way)
\par       REM
\par       LET void=SHOWWINDOW(hedit,9)
\par       LET void=SHOWWINDOW(hdlg,9)
\par       REM
\par       REM ** CTRL-HOME
\par       REM
\par       LET void=SENDVIRTUALKEY(hdlg,36,2)
\par       REM
\par       REM ** SHIFT-CTRL-END (selects everything in the box!)
\par       REM
\par       LET void=SENDVIRTUALKEY(hdlg,35,3)
\par       REM
\par       REM ** DELETE (this deletes the current text contents)
\par       REM
\par       LET void=SENDVIRTUALKEY(hdlg,46,0)
\par       REM
\par       REM ** INSERT THE TEXT "C:\\AUTOEXEC.BAT" (sent to 'EDIT' control)
\par       REM
\par       LET void=SENDKEYS(hedit,"C:\\AUTOEXEC.BAT")
\par       REM
\par       REM ** A QUICK WAY TO PRESS THE 'OK' BUTTON - SEND THE 'ENTER' KEY
\par       REM ** (VIRTUAL KEY 13) TO THE 'EDIT' CONTROL!
\par       REM
\par       LET void=SENDVIRTUALKEY(hedit,13,0)
\par       REM
\par       REM ** THIS NEXT SECTION DISPLAYS WHILE THE WINDOW IS HIDDEN...
\par       REM
\par       ECHO.
\par       ECHO.** THE TASK IS COMPLETE! **
\par       ECHO.
\par       REM
\par       REM ** END OF PROGRAM - DO CLEANUP, DISPLAY WINDOW, ETC.
\par       REM
\par       :THE_END
\par       REM
\par       REM ** DISPLAY THE 'SFTShell' MAIN WINDOW AND GET THE 'FOCUS'
\par       REM
\par       LET a=SHOWWINDOW(9)
\par       REM
\par       REM ** RESTORE SCREEN COLORS TO THE ORIGINAL VALUES
\par       REM
\par       LET void=SETTEXTCOLOR(old_text_color)
\par       LET void=SETBKCOLOR(old_bk_color)
\par       REM
\par       REM ** CLEAR OUT THE VARIABLES WE USED - DONE!
\par       REM
\par       SET old_text_color=
\par       SET old_bk_color=
\par       SET void=
\par       SET a=
\par       SET hdlg=
\par       SET hwnd=
\par       SET hedit=
\par       SET ctr=
\par }\pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} Window Information Sample Program}} {
\cs15\fs20\up6\super #{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} sample_windowinfo}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {
\cs15\cf2\up6\super +} C024}} {\cs15\fs20\up6\super K{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} window information;sample program}} {\cs15\fs20\up6\super !{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previous");DisableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`sample_programs')")}}
 Window Information Sample Program
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
If it is ever necessary to gather information about an application's 'WINDOW STATUS', as could be necessary for writing programs such as the 'CONTROL' application (above), a short batch file like the one below might be helpful in obtaining the necessary i
nformation:
\par \pard \li120\sl-240\slmult0\widctlpar {\f3\fs16       @ECHO OFF
\par       REM
\par       REM ** APPLICATION WINDOW INFO **
\par       REM
\par       LET app=LTRIM(RTRIM(INPUT("ENTER TASK, INSTANCE, MODULE, or APPLICATION NAME: ")))
\par       IF (LEN(app)=0) GOTO THE_END
\par       REM
\par       LET blanks="                                "
\par       LET ctr=0
\par       :LOOP1
\par       LET a=GETWINDOW(app,ctr)
\par       IF (LEN(a)=0) GOTO LOOP1_DONE
\par       REM
\par       REM ** DISPLAY THE WINDOW INFO HERE! **
\par       REM
\par       IF (ctr=0) ECHO.HANDLE  TITLE                   OWNER   CLASS NAME
\par       IF (ctr=0) ECHO.-----------------------------------------------------------------
\par       LET line=LJ(LEFT(a[0]++blanks,8))++LJ(LEFT(a[1]++blanks,24))
\par       LET line=line++LJ(LEFT(a[2]++blanks,8))++"\\""++a[7]++"\\""
\par       ECHO.%line%
\par       REM
\par       LET ctr=ctr+1
\par       GOTO LOOP1
\par       :LOOP1_DONE
\par       IF (ctr=0) ECHO.??WARNING - NO MATCH FOUND FOR "%app%"!
\par       ECHO.
\par       :THE_END
\par       SET ctr=
\par       SET a=
\par       SET blanks=
\par       SET app=
\par
\par }\pard \li120\sb80\sl-240\slmult0\widctlpar (To obtain information about 'CHILD' windows, a similar program using the 'GETCHILDWINDOW()' program could be used.  The result would provide adequate
 'sleuthing' capability to determine critical information needed for writing applications such as the 'CONTROL' sample application, above)
\par
\par
\par }
