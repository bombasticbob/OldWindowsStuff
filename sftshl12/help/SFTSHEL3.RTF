{\rtf1\ansi \deff5\deflang1033{\fonttbl{\f0\froman\fcharset0\fprq2 Tms Rmn;}{\f1\froman\fcharset2\fprq2 Symbol;}{\f2\fswiss\fcharset0\fprq2 Helv;}{\f3\fmodern\fcharset0\fprq1 Courier;}
{\f4\froman\fcharset0\fprq2 Times New Roman;}{\f5\fswiss\fcharset0\fprq2 Arial;}{\f6\froman\fcharset0\fprq2 MS Serif;}{\f7\fswiss\fcharset0\fprq2 MS Sans Serif;}{\f8\froman\fcharset0\fprq2 Times;}{\f9\fswiss\fcharset0\fprq2 Helvetica;}
{\f10\fswiss\fcharset0\fprq2 System;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f12\froman\fcharset0\fprq2 New York;}{\f13\fswiss\fcharset0\fprq2 Geneva;}{\f14\fnil\fcharset2\fprq2 Marlett;}{\f15\fnil\fcharset2\fprq2 Wingdings;}
{\f16\fnil\fcharset2\fprq2 Lucida Arrows;}{\f17\fnil\fcharset0\fprq2 Lucida Blackletter;}{\f18\froman\fcharset0\fprq2 Lucida Bright;}{\f19\fnil\fcharset2\fprq2 Lucida Bright Math Extension;}{\f20\fnil\fcharset2\fprq2 Lucida Bright Math Italic;}
{\f21\fnil\fcharset2\fprq2 Lucida Bright Math Symbol;}{\f22\fscript\fcharset0\fprq2 Lucida Calligraphy;}{\f23\fnil\fcharset0\fprq2 Lucida Fax;}{\f24\fscript\fcharset0\fprq2 Lucida Handwriting;}{\f25\fnil\fcharset2\fprq2 Lucida Icons;}
{\f26\fnil\fcharset0\fprq2 Lucida Sans;}{\f27\fmodern\fcharset0\fprq1 Lucida Sans Typewriter;}{\f28\fnil\fcharset2\fprq2 Lucida Stars;}{\f29\fnil\fcharset0\fprq2 Basque Light;}{\f30\fnil\fcharset0\fprq2 Black Chancery;}{\f31\fnil\fcharset0\fprq2 Chopin;}
{\f32\froman\fcharset0\fprq2 Garamond;}{\f33\fnil\fcharset0\fprq2 Inter;}{\f34\fnil\fcharset0\fprq2 Mapmaker Thin;}{\f35\fnil\fcharset0\fprq2 SaintFrancis;}{\f36\fmodern\fcharset0\fprq1 Lucida Console;}{\f37\fmodern\fcharset2\fprq1 OCR-A;}
{\f38\fmodern\fcharset0\fprq1 QuickType Mono;}{\f39\fswiss\fcharset0\fprq2 QuickType;}{\f40\fswiss\fcharset0\fprq2 QuickType Condensed;}{\f41\fnil\fcharset2\fprq2 QuickType Pi;}{\f42\fswiss\fcharset0\fprq2 News Gothic MT;}
{\f43\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f44\froman\fcharset0\fprq2 Book Antiqua;}{\f45\fmodern\fcharset0\fprq1 OCR A Extended;}{\f46\froman\fcharset0\fprq2 Calisto MT;}{\f47\fswiss\fcharset0\fprq2 Abadi MT Condensed Light;}
{\f48\fswiss\fcharset0\fprq2 Copperplate Gothic Bold;}{\f49\fswiss\fcharset0\fprq2 Copperplate Gothic Light;}{\f50\fscript\fcharset0\fprq2 Comic Sans MS;}{\f51\fswiss\fcharset0\fprq2 Century Gothic;}{\f52\fswiss\fcharset0\fprq2 Arial Narrow;}
{\f53\fswiss\fcharset0\fprq2 Arial Black;}{\f54\froman\fcharset0\fprq2 Bookman Old Style;}{\f55\froman\fcharset0\fprq2 Century Schoolbook;}{\f56\fnil\fcharset2\fprq2 Monotype Sorts;}{\f57\fswiss\fcharset0\fprq2 Haettenschweiler;}
{\f58\fdecor\fcharset0\fprq2 Algerian;}{\f59\fdecor\fcharset0\fprq2 Braggadocio;}{\f60\fswiss\fcharset0\fprq2 Britannic Bold;}{\f61\fscript\fcharset0\fprq2 Brush Script MT;}{\f62\fdecor\fcharset0\fprq2 Colonna MT;}{\f63\fdecor\fcharset0\fprq2 Desdemona;}
{\f64\froman\fcharset0\fprq2 Footlight MT Light;}{\f65\fswiss\fcharset0\fprq2 Impact;}{\f66\fdecor\fcharset0\fprq2 Kino MT;}{\f67\froman\fcharset0\fprq2 Wide Latin;}{\f68\fscript\fcharset0\fprq2 Matura MT Script Capitals;}
{\f69\fdecor\fcharset0\fprq2 Playbill;}{\f70\fmodern\fcharset2\fprq1 MS LineDraw;}{\f71\froman\fcharset2\fprq2 MT Extra;}{\f72\fswiss\fcharset0\fprq2 Arial Rounded MT Bold;}{\f73\fmodern\fcharset255\fprq2 Modern;}{\f74\fscript\fcharset255\fprq2 Script;}
{\f75\froman\fcharset255\fprq2 Roman;}{\f76\fswiss\fcharset0\fprq1 MS Dialog;}{\f77\fmodern\fcharset0\fprq1 Courier 10cpi;}{\f78\fmodern\fcharset0\fprq1 Courier 12cpi;}{\f79\fmodern\fcharset0\fprq1 Courier 17cpi;}
{\f80\fmodern\fcharset0\fprq1 Courier 20 cpi;}{\f81\fmodern\fcharset0\fprq1 Courier 5cpi;}{\f82\fmodern\fcharset0\fprq1 Courier 6cpi;}{\f83\fmodern\fcharset0\fprq1 Sanserif 10cpi;}{\f84\fmodern\fcharset0\fprq1 Sanserif 12cpi;}
{\f85\fmodern\fcharset0\fprq1 Sanserif 17cpi;}{\f86\fmodern\fcharset0\fprq1 Sanserif 20cpi;}{\f87\fmodern\fcharset0\fprq1 Sanserif 5cpi;}{\f88\fmodern\fcharset0\fprq1 Sanserif 6cpi;}{\f89\froman\fcharset0\fprq2 Courier PS;}
{\f90\froman\fcharset0\fprq2 Sanserif PS;}{\f91\fmodern\fcharset0\fprq1 Orator II 10cpi;}{\f92\fmodern\fcharset0\fprq1 Orator II 12cpi;}{\f93\fmodern\fcharset0\fprq1 Orator II 17cpi;}{\f94\fmodern\fcharset0\fprq1 Orator II 20cpi;}
{\f95\fmodern\fcharset0\fprq1 Orator II 5cpi;}{\f96\fmodern\fcharset0\fprq1 Orator II 6cpi;}{\f97\froman\fcharset0\fprq2 Orator II PS;}{\f98\fmodern\fcharset0\fprq1 Orator I 10cpi;}{\f99\fmodern\fcharset0\fprq1 Orator I 12cpi;}
{\f100\fmodern\fcharset0\fprq1 Orator I 17cpi;}{\f101\fmodern\fcharset0\fprq1 Orator I 20cpi;}{\f102\fmodern\fcharset0\fprq1 Orator I 5cpi;}{\f103\fmodern\fcharset0\fprq1 Orator I 6cpi;}{\f104\froman\fcharset0\fprq2 Orator I PS;}
{\f105\fmodern\fcharset0\fprq1 Fixedsys;}{\f106\fmodern\fcharset255\fprq1 Terminal;}{\f107\fswiss\fcharset0\fprq2 Small Fonts;}{\f108\fmodern\fcharset255\fprq1 SFTShell;}{\f109\fswiss\fcharset0\fprq2 MS Dialog Light;}
{\f110\fswiss\fcharset0\fprq2 MS SystemEx;}{\f111\fnil\fcharset0\fprq2 Arial MT Black;}{\f112\froman\fcharset0\fprq2 Garamond MT;}{\f113\froman\fcharset0\fprq0 symbo;}{\f114\fswiss\fcharset0\fprq0 Chicago;}{\f115\fmodern\fcharset0\fprq0 Monaco;}
{\f116\froman\fcharset0\fprq0 Palatino;}{\f117\fnil\fcharset0\fprq0 BI Letter Gothic BoldSlanted;}{\f118\fnil\fcharset0\fprq0 I Letter Gothic Slanted;}{\f119\fnil\fcharset0\fprq0 CB Helvetica Condensed Bold;}
{\f120\fnil\fcharset0\fprq0 CLB Helvetica Condensed Black;}{\f121\fnil\fcharset0\fprq0 CBI Helvetica Condensed BoldObl;}{\f122\fnil\fcharset0\fprq0 CL Helvetica Condensed Light;}{\f123\fnil\fcharset0\fprq0 CLBI Helvetica Condensed BlackO;}
{\f124\fnil\fcharset0\fprq0 CLI Helvetica Condensed LightOb;}{\f125\fnil\fcharset0\fprq0 Letter Gothic;}{\f126\fnil\fcharset0\fprq0 B Letter Gothic Bold;}{\f127\fnil\fcharset0\fprq0 C Helvetica Condensed;}
{\f128\fnil\fcharset0\fprq0 CI Helvetica Condensed Oblique;}{\f129\fnil\fcharset0\fprq0 MS San Serif;}{\f130\froman\fcharset0\fprq0 ODBCConnectString;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \snext0 Normal;}{\s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \snext26 heading 1;}{\s2\li120\sb120\sa60\sl-240\slmult0\widctlpar \b\f5\fs20\cf2 \snext0
heading 2;}{\s3\li120\sb120\sa60\sl-240\slmult0\widctlpar \f5\fs20 \snext0 heading 3;}{\s4\fi-245\li360\sb120\sa60\sl-240\slmult0\widctlpar \f5\fs20\cf2 \sbasedon2\snext4 heading 4;}{\s5\li720\sb80\sl-240\slmult0\widctlpar \b\f5\fs20 \sbasedon0\snext17
heading 5;}{\s6\li720\sb80\sl-240\slmult0\widctlpar \f5\fs20\ul \sbasedon0\snext17 heading 6;}{\s7\li720\sb80\sl-240\slmult0\widctlpar \i\f5\fs20 \sbasedon0\snext17 heading 7;}{\s8\li720\sb80\sl-240\slmult0\widctlpar \i\f5\fs20 \sbasedon0\snext17
heading 8;}{\s9\li720\sb80\sl-240\slmult0\widctlpar \i\f5\fs20 \sbasedon0\snext17 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive\f5\fs20\cf2\up6\super \sbasedon10 footnote reference;}{\s16\li120\sb80\sl-240\slmult0\widctlpar
\f5\fs20 \sbasedon0\snext0 footnote text;}{\s17\li720\sb80\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext0 Normal Indent;}{\s18\fi-240\li600\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext18 Jli;}{\s19\li120\sb60\sl-240\slmult0
\keep\widctlpar\tx520\tx920\tx1320\tx1720\tx2120 \f3\fs16 \snext19 Ex;}{\s20\li360\sb80\sl-240\slmult0\widctlpar \f5\fs20 \snext0 Sa1;}{\s21\fi-240\li360\sl-240\slmult0\widctlpar\tx360 \f5\fs20 \snext41 Lb1;}{\s22\fi-240\li360\sb60\sl-240\slmult0
\nowidctlpar \f5 \snext22 Style;}{\s23\li360\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext41 Lp1;}{\s24\li115\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f5\fs20 \snext25 Th;}{
\s25\li115\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext25 Tp;}{\s26\li120\sl-240\slmult0\widctlpar \f5\fs20 \snext0 Normal 2;}{\s27\li120\sb120\sa120\widctlpar \f5\fs20 \snext0 bitmap;}{\s28\li120\sb120\sl-240\slmult0\widctlpar \f5\fs20 \snext29 Sa2;}{
\s29\fi-240\li360\sb60\sl-240\slmult0\widctlpar \f5\fs20 \snext29 Jl;}{\s30\li115\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \f5\fs20 \sbasedon24\snext25 Th2;}{\s31\li115\sb120\sa40\sl-240\slmult0
\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \b\f5\fs16 \sbasedon24\snext25 Th3;}{\s32\li115\sb200\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext0 Normal 3;}{\s33\fi-1800\li1915\sb120\sa40\sl-240\slmult0\widctlpar\brdrb
\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15 \f5 \snext33 Style1;}{\s34\fi-1800\li1915\sb60\sl-240\slmult0\widctlpar\tx1915 \f5\fs20 \sbasedon0\snext34 Tph;}{\s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715
\f5\fs20 \sbasedon26\snext35 Normal 2a;}{\s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 \sbasedon26\snext36 NOTE;}{\s37\fi-2880\li2995\sl-240\slmult0\widctlpar\tx835\tx1555\tx2995\tx3715\tx4435\tx5155 \f5\fs20 \sbasedon0\snext37 table1;}{
\s38\li115\sb80\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995\tx3715\tx4435\tx5155 \f5\fs20\ul \sbasedon0\snext38 tablehead;}{\s39\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \sbasedon0\snext39 endnote text;}{\*\cs40 \additive\super \sbasedon10
endnote reference;}{\s41\fi-240\li360\sb60\sl-240\slmult0\widctlpar\tx360 \f5\fs20 \snext41 Lb2;}{\s42\fi-1800\li1915\sb120\sa40\sl-240\slmult0\widctlpar\brdrb\brdrs\brdrw15\brsp20 \brdrbtw\brdrs\brdrw15\brsp20 \tx1915 \b\f5\fs20 \sbasedon0\snext34 Thh;}}{\*\revtbl {Unknown
;}{R. E. Frazier;}}{\info{\author Bob Frazier}{\operator R. E. Frazier}{\creatim\yr1993\mo4\dy29\min51}{\revtim\yr1996\mo4\dy10\hr16\min7}{\version3}{\edmins18}{\nofpages79}{\nofwords11131}{\nofchars63450}{\*\company Stewart~Frazier Tools, Inc.}
{\vern57431}}\widowctrl\ftnbj\aendnotes\ftnnrlc\aftnnar\linkstyles\hyphcaps0 \fet0{\*\template C:\\My Documents\\what31b.dot}\sectd \linex0 {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain
\s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SFTShell - Commands}} {\cs15\fs20\up6\super #{\footnote \pard\plain
\s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} COMMANDS}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X001}} {\cs15\fs20\up6\super K{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} Commands}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 DisableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`contents')")}} SFTShell - Commands
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
SFTShell can run programs, open documents, print documents, or execute internal "batch language" commands by either typing in the file name or command at the prompt, including the file name or command in a batch file, or by us
ing the File Manager (or other 'shell') to 'Drag & Drop' a file onto the SFTShell window.  If a file of a particular type has been "associated" with an application, you can execute the application with the desired document file by typing the name of the
file.  An example would be to type 'SFTSHELL.HLP' at the command prompt, which would open the WINHELP application with this help file (SFTSHELL.HLP) in view.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 SFTShell supports both re-direction (use of the ">" and "<" operators on the command line) as well
as piping support (for MS-DOS programs and Win32 console applications only) using the "|" operator.  An exception is the "ECHO" command, which does not process the ">" character (to write a string to a file, as you would using a re-directed 'ECHO' command
, use the 'File I/O' functions that are part of SFTShell's high level language extensions.  In addition, all commands except for ECHO allow you to specify a '/?' switch at the beginning of the command line to obtain a character mode help, similar to typin
g 'HELP \{command\}'.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
The following is a list of "batch language" commands that are supported by SFTShell.  These commands operate similar to the same commands used by the MS-DOS "COMMAND.COM" program, and other supporting programs that are included with MS-DOS.  Many are enha
nced, and others are specific to SFTShell.  For more information on a particular command, select the desired item from the list below.
\par \pard \li115\sb80\sl-240\slmult0\widctlpar\tx1555\tx2995\tx4435\tx5875\tx7315 {\uldb ATTRIB}{\v\uldb CMD_ATTRIB} \tab {\uldb BREAK}{\v\uldb CMD_BREAK}\tab {\uldb CALC}{\v\uldb CMD_CALC}\tab {\uldb CALL}{\v\uldb CMD_CALL}
\par {\uldb CD}{\v\uldb CMD_CHDIR}\tab {\uldb CHDIR}{\v\uldb CMD_CHDIR}\tab {\uldb CLOSETASK}{\v\uldb CMD_CLOSETASK}\tab {\uldb CLS}{\v\uldb CMD_CLS}
\par {\uldb COMMAND}{\v\uldb CMD_COMMAND}\tab {\uldb COPY}{\v\uldb CMD_COPY}\tab {\uldb CT}{\v\uldb CMD_CLOSETASK}\tab {\uldb DATE}{\v\uldb CMD_DATE}
\par {\uldb DBLSPACE}{\v\uldb CMD_DBLSPACE}\tab {\uldb DDE}{\v\uldb CMD_DDE}\tab {\uldb DEFINE}{\v CMD_DEFINE}\tab {\uldb DEL}{\v\uldb CMD_DEL}
\par {\uldb DELTREE}{\v\uldb CMD_DELTREE}\tab {\uldb DIR}{\v\uldb CMD_DIR}\tab {\uldb ECHO}{\v\uldb CMD_ECHO}\tab {\uldb ERASE}{\v\uldb CMD_DEL}
\par {\uldb EXIT}{\v\uldb CMD_EXIT}\tab {\uldb FOR}{\v\uldb CMD_FOR}\tab {\uldb FORMAT}{\v\uldb CMD_FORMAT}\tab {\uldb GOTO}{\v\uldb CMD_GOTO}
\par {\uldb HELP}{\v\uldb CMD_HELP}\tab {\uldb IF}{\v\uldb CMD_IF}\tab {\uldb INPUT}{\v\uldb CMD_INPUT}\tab {\uldb JOIN}{\v\uldb CMD_JOIN}
\par {\uldb KILLTASK}{\v\uldb CMD_KILLTASK}\tab {\uldb KT}{\v\uldb CMD_KILLTASK}\tab {\uldb LABEL}{\v\uldb CMD_LABEL}\tab {\uldb LET}{\v\uldb CMD_LET}
\par {\uldb LH}{\v\uldb CMD_LOAD}\tab {\uldb LISTOPEN}{\v\uldb CMD_LISTOPEN}\tab {\uldb LO}{\v\uldb CMD_LISTOPEN}\tab {\uldb LOAD}{\v\uldb CMD_LOAD}
\par {\uldb LOADHIGH}{\v\uldb CMD_LOAD}\tab {\uldb MAX}{\v\uldb CMD_MAX}\tab {\uldb MD}{\v\uldb CMD_MKDIR}\tab {\uldb MEM}{\v\uldb CMD_MEM}
\par {\uldb MIN}{\v\uldb CMD_MIN}\tab {\uldb MKDIR}{\v\uldb CMD_MKDIR}\tab {\uldb MOVE}{\v\uldb CMD_MOVE}\tab {\uldb NEXT}{\v CMD_NEXT}
\par {\uldb NUKETASK}{\v CMD_NUKETASK}\tab {\uldb ODBC}{\v CMD_ODBC}\tab {\uldb PATH}{\v\uldb CMD_PATH}\tab {\uldb PAUSE}{\v\uldb CMD_PAUSE}
\par {\uldb PLAYSOUND}{\v\uldb CMD_PLAYSOUND}\tab {\uldb PRINT}{\v\uldb CMD_PRINT}\tab {\uldb PROMPT}{\v\uldb CMD_PROMPT}\tab {\uldb PS}{\v\uldb CMD_PLAYSOUND}
\par {\uldb RD}{\v\uldb CMD_RMDIR}\tab {\uldb REM}{\v\uldb CMD_REM}\tab {\uldb REMOVE}{\v\uldb CMD_REMOVE}\tab {\uldb REN}{\v\uldb CMD_RENAME}
\par {\uldb RENAME}{\v\uldb CMD_RENAME}\tab {\uldb REPEAT}{\v CMD_REPEAT}\tab {\uldb REPLACE}{\v\uldb CMD_REPLACE}\tab {\uldb RETURN}{\v\uldb CMD_RETURN}
\par {\uldb RMDIR}{\v\uldb CMD_RMDIR}\tab {\uldb SET}{\v\uldb CMD_SET}\tab {\uldb SHIFT}{\v\uldb CMD_SHIFT}\tab {\uldb START}{\v\uldb CMD_START}
\par {\uldb SUBST}{\v\uldb CMD_SUBST}\tab {\uldb SYS}{\v\uldb CMD_SYS}\tab {\uldb TASKLIST}{\v\uldb CMD_TASKLIST}\tab {\uldb TIME}{\v\uldb CMD_TIME}
\par {\uldb TL}{\v\uldb CMD_TASKLIST}\tab {\uldb TREE}{\v\uldb CMD_TREE}\tab {\uldb TRUENAME}{\v\uldb CMD_TRUENAME}\tab {\uldb TYPE}{\v\uldb CMD_TYPE}
\par {\uldb UNTIL}{\v CMD_UNTIL}\tab {\uldb VER}{\v\uldb CMD_VER}\tab {\uldb VERIFY}{\v\uldb CMD_VERIFY}\tab {\uldb VOL}{\v\uldb CMD_VOL}
\par {\uldb WAIT}{\v\uldb CMD_WAIT}\tab {\uldb WEND}{\v CMD_WEND}\tab {\uldb WHILE}{\v CMD_WHILE}\tab {\uldb XCOPY}{\v\uldb CMD_XCOPY}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ATTRIB Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_ATTRIB}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X002}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} ATTRIB}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} ATTRIB Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 ATTRIB [+r|-r] [+a|-a] [+s|-s] [+h|-h] [pathname] [/s]
\par \pard \s26\li120\sl-240\slmult0\widctlpar ATTRIB [+r|-r] [+a|-a] [+s|-s] [+h|-h] [pathname]
\par The 'ATTRIB' command allows you to either view or change the attributes of a DOS file.
\par PARAMETERS: pathname  - valid DOS path (default = *.*)
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 SWITCHES:\tab +r\tab -\tab set 'read only' attribute
\par \tab \tab -r\tab -\tab clear 'read only' attribute
\par \tab \tab +a\tab -\tab set 'archive' attribute
\par \tab \tab -a\tab -\tab clear 'archive' attribute
\par \tab \tab +s\tab -\tab set 'system file' attribute
\par \tab \tab -s\tab -\tab clear 'system file' attribute
\par \tab \tab +h\tab -\tab set 'hidden' attribute
\par \tab \tab -h\tab -\tab clear 'hidden' attribute
\par \tab \tab /S\tab -\tab recurse sub-directories
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 On output, the left 8 characters of each line will contain various letters indicating which attribute bits are "on" for the particular entry.  The following is a list and explanation of each:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab \tab A\tab - 'archive' bit (file has been modified since backup).
\par \tab \tab R\tab - 'read-only' bit.  This file may not be modified.
\par \tab \tab H\tab - 'hidden' bit.  File does not show up in normal 'DIR' listings.
\par \tab \tab S\tab - 'system' bit.  File is used by the operating system.
\par \tab \tab V\tab - 'volume ID' bit.  This is only set for volume labels.
\par \tab \tab D\tab - 'directory' bit.  This is a sub-directory entry.
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:  to view files with specific attributes only, use the '/A' switch on the 'DIR' command (type 'HELP DIR' for more info).
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} BREAK Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_BREAK}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X003}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} BREAK}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} BREAK Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 BREAK [ON|OFF]
\par \pard \s26\li120\sl-240\slmult0\widctlpar The 'BREAK' command allows you to enable/disable/view the ability to stop an operation via the 'Ctrl-Break' key combination.
\par \pard \s26\li120\sl-240\slmult0\widctlpar\tx835\tx1555\tx2275\tx2995 PARAMETERS:\tab ON   - enables Ctrl-Break checking (default)
\par \tab \tab OFF - disables Ctrl-Break checking
\par \pard \s26\li120\sl-240\slmult0\widctlpar Specifying the 'BREAK' command with no parameter displays the current setting.  Note that this only applies for functions that are internal to the Windows{\f1 \'d4}
 Command Line Interpreter, and does not include any background operations (such as 'COPY').  For further information see the respective HELP display for the command in question.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CALC Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_CALC}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X004}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} CALC}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} CALC Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 CALC expression
\par Calculates and displays the result of an expression.  For more information, see the {\uldb High Level Language Overview}{\v CALC}.
  This command is useful for displaying the results of a particular expression, as opposed to assigning the value to a variable (as with the 'LET' command). When called from within a BATCH program a single <CR><LF> sequence is added following the return v
alue from 'expression', which may also contain such sequences, cursor control functions, I/O functions, and so on.  If it is desired to perform a particular 'expression' function, and output of the result would degrade from the performance of the command
(as it would be for cursor control functions or output functions) the result may be assigned to a 'dummy' variable using the 'LET' command; i.e. 'LET dummy=expression'.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar See also: {\uldb LET}{\v CMD_LET}, {\uldb SET}.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CALL Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_CALL}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X005}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} CALL}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} CALL Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 CALL pathname
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command may be used either within a batch file, or from the command line to run programs 'synchronously'.  It will begin executing a program and WAIT until it completes before continuing.  If this command is invoked from within a batch file, control
returns to the statement
 that follows the CALL command.  The 'CALL' commands from within batch files may also be used in 'CALL'ed batch files if desired, limited only by the available stack space.  For an additional method of waiting for programs to complete, type 'HELP IF' at t
he command prompt, specifically regarding 'ISTASK' operator.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar When an application is executed via the 'CALL' command, the 'RETVAL' environment variable contains the return code from the application, similar to 'ERRORLEVEL' in 'COMMAND.COM', except that the
value persists until another command (such as 'RETURN', or another 'CALL') causes it to be re-assigned.
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20
\par \pard \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 NOTE:\tab
The 'CALL' command is the only method by which a batch file can run a subsequent batch file and have it return to the caller.  If the 'CALL' command is not used, the current batch file will terminate at the point the new batch file begins, and be su
bstituted by the new batch file (similar to 'CHAIN' in certain BASIC languages).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par See also:  {\uldb LOAD}{\v CMD_LOAD}, {\uldb START}{\v CMD_START}, {\uldb RETURN}{\v CMD_RETURN}.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CHDIR Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_CHDIR}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X006}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} CD;CHDIR}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} CHDIR Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 CD pathname
\par \pard \s26\li120\sl-240\slmult0\widctlpar CHDIR pathname
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function changes directories to the specified pathname for the specified drive (default is current drive).  If no 'pathname' parameter is specified, the current drive:pathname is displayed.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CLOSETASK Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_CLOSETASK}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X007}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} CT;CLOSETASK}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} CLOSETASK Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 CLOSETASK task|instance|window|module name
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function allows you to close a task using either the Task 'ID', the Main Window 'ID', or the MODULE NAME (enhancement from prior release). To obtain a list of running tasks and their associated MOD
ULE NAMEs, Task 'ID's see the 'TASKLIST' function.  The preferred method uses the MODULE NAME (normally the same as the Program Name, without the extension) to identify the task to be closed.  If more than one 'instance' of the same program is running a l
ist of these tasks, their Task 'ID's, and their Main Window 'Captions' (titles) will appear, with sequence numbers to the left. The program then prompts which one to delete.  You may respond by entering the appropriate sequence number (1,2,3,etc.) or by p
re
ssing <ENTER> to cancel the operation.  For Task 'ID's and Main Window 'ID's there will always be a unique task associated with it. The Task 'ID' is normally obtained as a result of running a program, in which the Task 'ID' value was returned in the 'TASK
_ID' environment If no valid Main Window exists for a given task handle, but the task is valid, then you must use either 'KILLTASK' or 'NUKETASK' to end it. This application closes tasks in the same manner as using the TASK MANAGER application (runs via C
trl-Esc, 'Switch To' system menu, or double clicking the desktop).
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 See also:  {\uldb KILLTASK}{\v CMD_KILLTASK}, {\uldb NUKETASK}{\v CMD_NUKETASK}.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} CLS Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_CLS}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X008}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} CLS}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} CLS Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 CLS
\par \pard \s26\li120\sl-240\slmult0\widctlpar This command causes the screen to be cleared.  The attribute byte for the last displayed character is used to determine the screen background and text colors.
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:\tab The Windows{\f1 \'d4}
 Command Line Interpreter allows imbedded ANSI escape sequences in the PROMPT and ECHO commands to force the screen background and text colors to a specific value.  Some ANSI sequences (
such as BLINKING TEXT) are not supported.  See the MS-DOS User's Guide and Reference for information regarding ANSI escape sequences under the section for the ANSI.SYS device driver.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} COMMAND Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_COMMAND}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X009}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} COMMAND}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} COMMAND Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 COMMAND [command string]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
Runs the program specified in the COMSPEC environment variable; if this environment variable is not present, it attempts to run 'COMMAND.COM'.  The argument specified in 'command string' is passed to the program as it's command line argument.
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:\tab When running MS-DOS programs in a DOS shell it is best to use 'COMMAND /C program \{args\}
' whenever file re-direction or piping is desired.  Otherwise, SFTSHELL will attempt to run the program and pass the re-direction and piping commands as arguments to the MS-DOS program, thereby not producing the desired results.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} COPY Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_COPY}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X010}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} COPY}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} COPY Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 COPY [/a|/b] source[/a|/b][+source2[/a|/b][+...]] [dest[/a|/b]][/v][/w]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This command will copy a file from one location/device to another.  As an enhancement to the normal DOS 'COPY' command, this
operation is done in BACKGROUND to avoid tying up the user interface for such operations.  As more file sets are selected (through additional 'COPY' commands) they are added to the internal QUEUE.  When copy operations are complete the user will be notifi
ed by the appearance of a message box.  Additionally, for BATCH operations, the 'COPYING' environment variable contains one of two values:  'TRUE' while background copy is in progress, and 'FALSE' otherwise (this is assigned whenever copy status changes).

\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 SWITCHES:\tab /A\tab -\tab ASCII COPY (as default or for single file).  A ctrl-Z (1aH) generates an END OF FILE condition.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /B\tab -\tab
BINARY COPY (as default or for single file).  No character checking is performed.  ASCII files appended together using BINARY mode may have multiple CTRL-Z's inserted into the destination file, depending upon the contents of the source.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /V\tab -\tab VERIFY FLAG - causes files to be re-read after copying to ensure that the copy was completed properly.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /W\tab -\tab ENHANCEMENT - forces COPY to wait until
the copy queue is empty before continuing to the next command.  Use this in batch files that must wait for copies to complete.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DATE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DATE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X011}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DATE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DATE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DATE [mm/dd/yy]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Displays or changes system date from the command line.  Specifying a new date causes the system date to change to the new value.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DBLSPACE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DBLSPACE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X012}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DBLSPACE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DBLSPACE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DBLSPACE [/switch [Drive][...]]
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 Invokes the equivalent of the DBLSPACE program within Windows.  DBLSPACE.EXE cannot run while in Windows, so SFTSHELL emulates some of its COMMAND LINE capabilities within the Windows environment.

\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:  This command is not valid for 'non-DBLSPACE' compressed drives.
\par
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20  The following DBLSPACE command switches are supported by SFTSHELL:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab /HELP\tab \tab \tab -\tab prints a short HELP screen
\par \tab [/INFO] [d:]\tab \tab -\tab compressed volume file info
\par \tab /LIST\tab \tab \tab -\tab list valid drives, and CVF status
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 For more information, see the MS-DOS 6.x User's Guide on DBLSPACE
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DDE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DDE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X013}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DDE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DDE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DDE [INITIATE|REGISTER] [[server]|topic]
\par \pard \s26\li120\sl-240\slmult0\widctlpar DDE [function] [TOPIC_ID] [item] [text]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This is an advanced function
which allows a user to make an 'ad-hoc' 'Dynamic Data Exchange' (DDE) command from the command line, or from within a BATCH file.  This command causes the environment string 'DDE_RESULT' to be assigned a value representing the result from this command.

\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 PARAMETERS:
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab function\tab \tab -\tab this represents a valid DDE function, which may be one of the following:
\par \tab ADVISE\tab \tab -\tab Tell server to update (hot link) whenever data changes.
\par \tab EXECUTE \tab -\tab Sends command string to server
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab INITIATE\tab \tab -\tab Begins a DDE conversation.  The 'TOPIC
_ID' is returned in the DDE_RESULT environment variable. Note the different command format!
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab POKE\tab \tab -\tab Send un-solicited data to server
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab REGISTER\tab -\tab Registers this application as a DDE server for a particular topic.  Note the different command format!
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab REQUEST\tab -\tab Request data item from server
\par \tab TERMINATE\tab -\tab Ends a Client DDE conversation.
\par \tab UNADVISE\tab -\tab Terminate warm/hot link (see 'ADVISE' above).
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab UNREGISTER -\tab Removes a server and topic that are associated with the 'TOPIC_ID'.  Any active conversations are ended.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab TOPIC_ID\tab -\tab
This value is returned in the 'DDE_RESULT' environment variable after executing the INITIATE or REGISTER function.  Note that the TOPIC_ID usage is different for client and server uses, and cannot be interchanged.
\par \tab server\tab \tab -\tab The name of the server to REGISTER/INITIATE a DDE conversation for/with.  The default server name is 'SFTSHELL' for REGISTER, and NONE (blank) for INITIATE.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab topic\tab \tab -\tab The name of the DDE topic.  The default is the 'SYSTEM' topic.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab item\tab \tab -\tab An individual 'storage location' ass
ociated with a DDE conversation.  The items correspond to the environment variables of the same name, and are GLOBAL for all conversations.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx630\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab text\tab \tab -\tab
The DDE 'EXECUTE' command sent by a client to a server, using the 'EXECUTE' function, or the value to 'POKE' using a 'POKE' transaction.  (If not specified on 'POKE' it uses the current value of the environment variable having the same name as th
e item to 'POKE').
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:\tab When the INITIATE or REGISTER functions are used, the 'DDE_RESULT' environment variable wil
l contain the conversation handle, or 'ERROR' if unable to perform the desired operation.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
All DDE operations use the environment variables for the 'ITEM' associated with a topic.  All topics share the same value for a particular 'ITEM', including server topics.  If it is necessary to instance the data for different topics you must spawn multip
le copies of SFTSHELL.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DEFINE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DEFINE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X013a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DELTREE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DEFINE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DEFINE function (parameters)
\par \pard \s26\li120\sl-240\slmult0\widctlpar [LOCALS var1[,var2[,...]]]
\par \{commands\}
\par RETURN \{expression\}
\par END DEFINE
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 This command allows
 you to write USER-DEFINABLE functions that can be called from within any algebraic equation, or as the argument to a '??' command if you wish to call it as a subroutine and ignore the return value.  User-defined functions have many uses, but the greatest
 advantage is isolating common operations to a single section of code.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The 'DEFINE/END DEFINE' block can be located anywhere in the program, so long as it is executed only once, and prior to calling the function.  Preferably, all 'DEFINE/END DEFINE' blocks
appear at or near the beginning of the code.  The 'RETURN' command can be used to assign a value to 'RETVAL' and exit the function at any point.  Otherwise, the function will return to the caller at the 'END DEFINE', where an implicit 'RETURN ""' is execu
ted.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
When the 'DEFINE' procedure is executed, the parameter variables are temporarily saved, and assigned the result value of any equations being passed as parameters, and only by value (not by reference).  The code within the 'DEFINE/END DEFINE' block is e
xecuted, RETVAL is assigned (if RETURN is used), and the original values for the variables specified in the parameter list in the 'DEFINE' statement are restored.  Effectively, the 'DEFINE'd function gets its own set of parameter variables that are unalte
red on exit.  Additionally, if you want to preserve the values of certain variables that you use within the function, you can include them as arguments to an optional \lquote LOCALS\rquote  command.  All other variables not declared by the \lquote LOCALS
\rquote  command are considered "global" and can be used or modified by the 'DEFINE'd function, as desired.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
If you need to pass values by reference, you can use the string substitution operators '%%' to de-reference a variable name that is passed as a parameter.  In other words, if one of the parameters to the function is 'pA', and I pass the value 'XYZ' for th
is parameter, the 'DEFINE'd function can then derefence it as '%pA%' whenever 'XYZ' should be referenced.  Care should be taken to avoid multiple nesting of '%%' operators, which
only evaluate at execution time, immediately after retrieving the batch line of code, and immediately before interpreting and executing it.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
One typical use for the 'DEFINE' command is in custom text formatting.  The following example demonstrates how 'DEFINE' can be used to generate a custom date/time format, compatible with the ODBC date/time format.  Date output format is as follows: "yyyy-
mm-dd hh:mm:ss.tt".
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard \li360\sl-240\slmult0\widctlpar {\f11\fs18 DEFINE MyFmt(x,y,z)
\par   IF (z=0) RETURN Right(String(y,ASC("0"))++Str(INT(x)),y)
\par   ; assign correct # of digits to right of decimal point plus a '1'
\par   LET MyFmtTemp=String(z,ASC("0"))
\par   ; 'MyFmtTemp' now contains a string of 'z' zeros
\par   LET x=INT(x*val("1"++MyFmtTemp)+.5) / val("1"++MyFmtTemp)
\par   LET MyFmtTemp=Str(x+val("."++MyFmtTemp++"1"))
\par   ; trim the extra '1' off of the right, and decimals are correct
\par   LET MyFmtTemp=Left(MyFmtTemp,Len(MyFmtTemp)-1)
\par   ; add correct # of zeros to the left ('y' must be large enough)
\par   LET x=Right(String(y,ASC("0"))++MyFmtTemp,y)
\par   ; assign 'MyFmtTemp' to null string to free up some space
\par   LET MyFmtTemp=""
\par   RETURN x
\par END DEFINE
\par DEFINE SQLDate(x)
\par   RETURN Year(x)++"-"++MyFmt(Month(x),2,0)++"-"++MyFmt(day(x),2,0)
\par }\pard \li360\sl-240\slmult0\widctlpar {\f11\fs18 END DEFINE
\par }\pard \li360\sl-240\slmult0\widctlpar {\f11\fs18 DEFINE SQLTime(x)
\par }\pard \li360\sl-240\slmult0\widctlpar {\f11\fs18   RETURN MyFmt(Hour(x),2,0)++":"++MyFmt(Minute(x),2,0)++":"++MyFmt(Second(x),5,2)
\par }\pard \li360\sl-240\slmult0\widctlpar {\f11\fs18 END DEFINE
\par DEFINE SQLDateTime(x)
\par   RETURN SQLDate(x)++" "++SQLTime(x)
\par END DEFINE
\par
\par \{ additional code goes here \}
\par
\par ? SQLDateTime(Now())
\par }\pard \li360\sb80\sl-240\slmult0\widctlpar {\f11\fs18
\par }\pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 See also:  {\uldb LOCALS}{\v CMD_LOCALS}, {\uldb RETURN}{\v CMD_RETURN}.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DEL Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DEL}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X014}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} ERASE;DEL}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DEL Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DEL      LABEL BYTE
\par \pard \s26\li120\sl-240\slmult0\widctlpar ERASE    LABEL BYTE
\par DEL [/Y][/Q][/S] [filename]
\par ERASE [/Y][/Q] [filename]
\par \pard \s26\li120\sl-240\slmult0\widctlpar T
his function deletes files.  As with the MS-DOS version, you may specify a wildcard pattern for 'filename'.  If the resulting 'filename' would cause all files in a directory to be deleted, the user will be asked to confirm the file set with an 'are you su
re' message box.
\par \pard \s26\li120\sl-240\slmult0\widctlpar PARAMETERS:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab filename\tab -\tab the file name specification to delete.  This may contain wildcard characters, or may be a directory name.
\par SWITCHES:\tab /Y\tab -\tab Invokes an automatic 'YES' response to the prompt which asks the user to confirm deletion of '*.*'.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /Q\tab -\tab
Prompts user for each file prior to attempting to delete it.  User presses a single key to delete or keep the file.  A 'Y' deletes the file; any other key keeps the file.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /S\tab -\tab Recurse sub-directories when deleting files.  This does *NOT* remove empty sub-directories!.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 See also:  {\uldb DELTREE}{\v CMD_DELTREE}.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DELTREE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DELTREE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X015}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DELTREE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DELTREE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DELTREE [/Y][/Q] [path]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function deletes a directory and all of its sub-directories and files contained within the sub-directories, effectively 'PRUNING' the tree branch off of the remainder of the directory tree.
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 SWITCHES:\tab /Y\tab -\tab Invokes an automatic 'YES' response to the prompt which asks the user to confirm deletion of the tree.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /Q\tab -\tab
Prompts user for each file and sub-directory prior to attempting to delete it.  User presses a single key to delete or keep the file.  A 'Y' deletes the file; any other key keeps the file.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} DIR Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_DIR}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X016}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} DIR}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} DIR Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DIR [filename] [/p][/w][/a[[:]attributes]][/o[[:]sortorder]][/s][/b][/l]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function lists the specified directory and
files according to the drive, directory, and filename pattern specified on the command line.  It is functionally equivalent to the 'DIR' command found in MS-DOS, though the appearance of the output may vary.  The 'DIRCMD' environment variable contains the
 default switches to be used whenever the 'DIR' command is invoked; to disable an option contained in the 'DIRCMD' environment variable you can precede the normal switch value with a '-', as with '/-w' or '/-o' (etc.).  The sort, attribute, and recursion
switches follow the conventions set forth in MS-DOS version 5.0 and later.
\par \pard \s26\li120\sl-240\slmult0\widctlpar PARAMETERS:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab filename\tab -\tab
The file name specification for which to list the directory.  This may or may not contain wildcard '*' or '?' characters.  If a sub-directory name is specified, '*.*' is assumed for the file name specification.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 SWITCHES:\tab /p\tab -\tab displays one screen at a time, and prompts for a key to be pressed prior to the next screen.
\par \tab \tab /w\tab -\tab displays the listing in 'wide' format, with sub-directories surrounded by '[ ]'.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /a
:attr - attributes to be included/excluded in the directory listing.  Items to be included must be present in all files listed.  Items to be excluded (preceded by '-') may not appear in any item listed.  The ':' is not required in the switch syntax.  Belo
w is a list of allowed attribute flags:
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab \tab \tab a - archive bit\tab h - hidden files
\par \tab \tab \tab \tab d - directories\tab r - read-only files
\par \tab \tab \tab \tab s - system files\tab p - programs (NEW!)
\par \tab \tab \tab \tab (NOTE:  no spaces may appear within switch)
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /o:sort -\tab sort order to be used.  Default is 'gne
' (dir, name, ext in alphabetical order).  To sort on an item in descending order, prefix it with a '-' (no spaces allowed in switch).  Below is a list of allowed sort flags:
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab \tab \tab d - date/time\tab e - extension
\par \tab \tab \tab \tab g - directories 1st\tab n - filename
\par \tab \tab \tab \tab s - size
\par \tab \tab /s\tab -\tab Recurse through sub-directories
\par \tab \tab /b\tab -\tab 'Brief' listing - like '/w', except only one filename per line.
\par \tab \tab /l\tab -\tab Displays un-sorted directories & filenames in lower case.
\par \tab \tab /x\tab -\tab ** ENHANCEMENT **
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab \tab \tab Opens each file and reads the header to determine i
f it is an EXECUTABLE file;  if so, it attempts to identify it (<WIN>,<DOS>,<OS2>,etc.) and puts an appropriate identifier string in the 'Type' column of the directory listing (/W overrides it)
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:\tab
For additional information on 'DIR', see the MS-DOS User's Guide and reference concerning use of the various switches, and specifics concerning file name specifications and so forth.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ECHO Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_ECHO}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X017}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} ECHO}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} ECHO Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 ECHO [ON|OFF]
\par \pard \s26\li120\sl-240\slmult0\widctlpar ECHO message
\par ECHO.[message]
\par \pard \s26\li120\sl-240\slmult0\widctlpar The above three allowable syntaxes represent two different us
es of the 'ECHO' command - normally they will only be used in BATCH processing.  The first syntax either causes command echoing to turn ON or OFF for batch processing ONLY (this differs somewhat from MS-DOS in this respect).  Echo is always ON when comman
ds are being entered at the prompt.  The 2nd and 3rd syntaxes represent methods used to display lines on the screen from within a batch file.  The 2nd one has a message on the line following the word 'ECHO'' the 3rd optionally has a message (and is always
 d
istinguished from the 1st syntax in case your message may conflict with the 1st syntax).  The 2nd syntax does require a message to be present on the line, so if you want a blank line you MUST use the 3rd syntax, with no 'message' parameter following.  If
'ECHO' appears on a line by itself, it is the same as 'ECHO ON' (compatibility).
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:  The Windows{\f1 \'d4} Command Line Interpreter allows imbedded ANSI escape sequences in the PROMPT and ECHO commands to force the screen background and text colors to a specifi
c value.  Some ANSI sequences (such as BLINKING TEXT) are not supported.  See the MS-DOS User's Guide and Reference for information regarding ANSI escape sequences under the section for the ANSI.SYS device driver.  You can embed '<Esc>' and other special
characters into the command string by use of the Ctrl-P character, followed by the character you wish to insert (<Enter> is an exception).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} EXIT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_EXIT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X018}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} EXIT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} EXIT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 EXIT
\par \pard \s26\li120\sl-240\slmult0\widctlpar EXIT WINDOWS
\par EXIT REBOOT
\par EXIT RESTART [command]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Each form of this command end the curren
t instance of 'SFTSHELL'.  If a background operation, such as 'COPY' is in progress the user will be prompted to abort or continue that operation prior to ending the program.  For 'EXIT WINDOWS', 'EXIT REBOOT', or 'EXIT RESTART', each running task will be
 queried whether it's safe to end; if they all respond in a favorable manner, then the Windows{\f1 \'d4}
 session will be ended.  For 'EXIT RESTART [command]', if 'command' is present it is executed in DOS from the command line interpreter prior to re-starting Windows (3.1+ only).
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar See also:  {\uldb FOR}{\v CMD_FOR}.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FOR Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_FOR}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X019}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} FOR}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} FOR Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 FOR %variable [NOT] IN (file set) DO command
\par \pard \s26\li120\sl-240\slmult0\widctlpar FOR %%variable [NOT] IN (file set) DO command
\par FOR variable FROM start TO end [STEP stepval] [DO command]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command allows repeated processing of a given command using each of the file names referenced within '(file set)'.  An ENHANCEMENT to the normal MS-DOS version of this function is the 'NOT' keyword, which allows you to specify an EXCLUSION file set (
which *MUST* pertain to the current director
y!).  An EXCLUSION set will apply to all files in the CURRENT directory that do not match the file specs provided in '(file set)'.  The 'command' argument can be any valid command.  Note that the nesting of 'FOR' commands may be performed here, but can le
ad to insufficient memory or stack overflow conditions if done to excess.  This could also be considered an enhancement over MS-DOS, which does not allow nesting of 'FOR' commands.  The MS-DOS version of 'FOR' requires batch files to be specified using th
e 'CALL' command preceding them, or else it does not function as expected.  Here, you may leave off the 'CALL' command for batch files, with no adverse side effects.  You are still required to 'double' the '%' on the variable for batch files, however.

\par \pard \s26\li120\sl-240\slmult0\widctlpar PARAMETERS:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab %variable\tab -\tab
The text to be substituted with a file name from '(file set)' (or NOT from file set, depending on the presence/absence of the 'NOT' option) for each iteration of 'command'.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab (file set)\tab \tab -\tab A list of files specifications used for deter
mining which file names to substitute for '%variable'.  This may consist of multiple file names, separated either by spaces or commas.  Each file name may contain wildcard ('*' or '?') characters, which operate in the same manner as directory searches.

\par \tab command\tab -\tab
A valid command, program, or batch file.  As an extra added bonus, the 'FOR' command will pause until the batch file or program file has completed. Note that there is no way to determine if a program that was run from within a BATCH file has finish
ed.  In such a case, the batch file should use the 'IF ISTASK' function to wait for completion.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 See also: {\uldb NEXT}{\v\uldb CMD_NEXT}
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} FORMAT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_FORMAT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X020}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} FORMAT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} FORMAT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 FORMAT drive: [/v[:label]] [/q][/u] [size modifiers] [/b|/s]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command initiates a BACKGROUND FORMAT of the appropriate device by QUEUING the specified information to the background formatter.  The background formatter will not format more than one disk at a time since doing so would greatly reduce the efficienc
y of the process (the floppy controller can only a
ccess one drive at a time anyway).  Attempting to format a Hard Drive, non-removable drive, network drive, or 'SUBST/JOIN'ed drives will result in an error.  If, however, a drive has active 'SUBST/JOIN'ed drives pointing to it will still format correctly.
  It is recommended that you verify no 'SUBST/JOIN'ed drives are pointing to the drive to be formatted prior to formatting.  See the on-line help regarding SUBST and JOIN for further information.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 SWITCHES:
\par \pard \s26\li120\sl-240\slmult0\widctlpar The FORMAT command switches correspond to the swit
ches used in MS-DOS version 5.0 and later, including the /q switch.  However, this FORMAT command does NOT write 'UNFORMAT' information in the absence of '/u'!  It is important to consider this whenever you format a diskette without the '/u' switch.

\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab /v[:label]\tab \tab \tab
Assigns a VOLUME LABEL at format time.  If it is omitted the volume label will be prompted for prior to queuing the disk to be formatted.  Specifying '/v:' yields the same result as pressing <ENTER> for the volume label.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab /q\tab \tab \tab 'Quick' format - writes FAT and root directory, but does not verify any tracks/sectors on the diskette.
\par \tab /u\tab \tab \tab 'Unconditional' - by default SFTSHELL will format a diskette in this manner.  It is not compatible with UNFORMAT.
\par \tab /f:size\tab \tab \tab Specify the size of the media to format, if it is other than the default size for the drive.  Only the following values are accepted:
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab \tab \tab 360  or 360k  or 360kb     - 360k double sided 5-1/4\tab "
\par \tab \tab \tab \tab 720  or 720k  or 720kb     - 720k double sided 3-1/2"
\par \tab \tab \tab \tab 1200 or 1200k or 1200kb or
\par \tab \tab \tab \tab 1.2  or 1.2m  or 1.2mb     - 1.2M double sided 5-1/4"
\par \tab \tab \tab \tab 1440 or 1440k or 1440kb or
\par \tab \tab \tab \tab 1.44 or 1.44m or 1.44mb    - 1.44M double sided 3-1/2"
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab /b\tab \tab \tab Reserves space for IO.SYS and MSDOS.SYS .  This switch is ignored since MS-DOS 5.0 does not require it.
\par \tab /s\tab \tab \tab Copies system files IO.SYS, MSDOS.SYS, and COMMAND.COM to the formatted diskette.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab /t:tracks\tab \tab \tab Specifies number of tracks to use.  Not compatible with '/f'
\par \tab /n:sectors\tab \tab Specifies number of sectors/track.  Not compatible with '/f'
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab /4\tab \tab \tab Specifies '40 track' for 1.2Mb drives only.  Obsolete - use the '/f' switch instead - it's better.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
Switches not listed above are NOT supported - this includes disk sizes for MS-DOS version 1.x, single sided diskettes, and so on.  If you wish to format a Hard Disk, use one of the options above, or format media that is not supported by the SFTSHELL FORMA
T command, type FORMAT.EXE in place of 'FORMAT' (or FORMAT.COM for older DOS versions) to force running the external MS-DOS program in place of the internal 'FORMAT' command.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} GOTO Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_GOTO}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X021}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} GOTO}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} GOTO Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 GOTO label
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command resumes execution from a specific point in a batch file.  It is not valid for on-line command entry (and will result in an error).  Labels are declared in batch files by prefixing them with a ':', as follows:
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 {\b :MY_LABEL
\par }\pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 In a 'GOTO' statement you would refer to this label as follows:
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 {\b GOTO MY_LABEL
\par }\pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 For more information on this topic, refer to the MS-DOS User's Guide and Reference.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} HELP Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_HELP}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X022}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} HELP}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} HELP Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 HELP [command]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This is the on-line HELP command, which allows you to view a short description of a standard MS-DOS command supported by this program, or an ENHANCEMENT which has been added to the Windows{\f1 \'d4}
 Command Line Interpreter.  To see a brief list of commands recognized by this program, enter 'HELP' with no arguments on the command line.  To see help on a particular command, enter 'HELP' followed by that command on the command line.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} IF Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_IF}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X023}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} IF}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} IF Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 {\b\ul SINGLE-LINE 'IF' COMMAND}
\par \pard \s26\li120\sl-240\slmult0\widctlpar IF [not] ERRORLEVEL number command  (not supported under Windows{\f1 \'d4})
\par IF [not] string1==string2 command
\par IF [not] EXIST filename command
\par IF [not] ISTASK handle command
\par IF [not] ISYES string command
\par IF [not] ISNO string command
\par IF [not] (equation) command
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\b\ul STRUCTURED 'IF' block
\par }\pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 IF [not] (equation)
\par \pard \s26\li120\sl-240\slmult0\widctlpar \{commands\}
\par [ELSE IF [not] (equation)]
\par \{commands\}
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 [ELSE]
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 \{commands\}
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 ENDIF
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
The 'IF' command allows conditional processing, either of a single command or of a nestable block of commands.  Many of the command forms used by MS-DOS's COMMAND.COM have been included here, as well as enhanced versions of the same
command form.  As well, the 'NOT' modifier may be placed in front of the conditional argument to essentially invert the results of the 'test', treating a 'FALSE' condition as though it were 'TRUE', and a 'TRUE' condition as though it were 'FALSE'.

\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar The 'IF\~ERRORLEVEL' form of the command is not supported under Windows{\f1 \'d4}
, since Windows is a multi-tasking system, and the processes that are spawned from within SFTShell normally run concurrently, and therefore do not generate exit codes.  If it is necessary to
 wait for a process to finish before continuing then the program should wait until a task finishes by use of the 'WAIT' command within a loop, and using a command such as 'IF NOT ISTASK handle GOTO xxxx' to form a loop that waits for a given task to compl
ete.  The exit code from this task may then be obtained using the 'GetExitCode()' function.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar The 'IF [not] string1==string2' form compares two strings.  They can either be literals (if embedded spaces exist they should be surrounded by quotes) or variables
so long as variables are either BATCH variables (%1, %2, etc.) or MS-DOS ENVIRONMENT variables (%path%, %prompt%, %temp%, etc.).
\par \pard \s26\li120\sl-240\slmult0\widctlpar
The third allows the user to check for existence of a file before trying an operation in which the file must either exist or not exist (that is the question...), and an error or error message would be unacceptable. The 4th through 6th are all ENHANCEMENTS
 to normal MS-DOS COMMAND.COM processing.  'ISTASK' allows a process to take place based on the existence of a task handle.  Th
is handle is usually obtained either by the TASKLIST or via the 'TASK_ID' environment variable (assigned whenever a task is successfully spawned).  It may be necessary to check if this variable exists by using the '==' form of the command against a blank
string, as follows:
\par \pard \s26\li120\sl-240\slmult0\widctlpar     IF ",34,"%TASK_ID%",34,"==",34,34," GOTO BAD_TASK
\par \pard \s26\li120\sl-240\slmult0\widctlpar Typically, this variable will be assigned to another following a successful run of a program, as follows:
\par \pard \s26\li120\sl-240\slmult0\widctlpar     MYPROG.EXE
\par     IF ",34,"%TASK_ID%",34,"==",34,34," GOTO MYPROG_DID_NOT_RUN
\par     SET MYPROG_ID=%TASK_ID%
\par        ...
\par        ...
\par     IF ISTASK %MYPROG_ID% CLOSETASK %MYPROG_ID%
\par (this is one possible use of the CLOSETASK function as well).
\par \pard \s26\li120\sl-240\slmult0\widctlpar
For 'background' processing it is possible to have the application minimize itself via the 'MIN' function - see 'MIN' for more information (The 'CALL' command provides another means of waiting for a program to end  prior to continuing a batch file or retu
rning control to the command line interpreter.  Type 'HELP CALL' for more information). The nex
t two options, 'ISYES' and 'ISNO' check the string which follows to see if it 'qualifies' as a valid 'YES' or 'NO' response, and processes the remaining command accordingly.  Note that if imbedded spaces may exist in the string (as would be possible if ob
tained via the 'INPUT' function) it would be wise to use a format similar to the example below:
\par \pard \s26\li120\sl-240\slmult0\widctlpar     INPUT USER_YESNO Enter a 'Yes' or 'No' response:
\par     IF ISYES ",34,"%USER_YESNO%",34," ECHO You entered a 'Yes' response
\par     IF ISNO ",34,"%USER_YESNO%",34," ECHO You entered a 'No' response
\par \pard \s26\li120\sl-240\slmult0\widctlpar
If a default of 'No' is expected, use 'ISYES' only.  If a default of 'Yes' is expected, use 'ISNO' only.  If you wish to force the user to enter a valid 'Yes' or valid 'No' response only, use both forms in such a manner that neither a valid yes or valid n
o would print a warning/error and trap the error in whatever manner is desired. The final (and most powerful) option is an enhancement which covers the functionality of the other options, and also exceeds their capabilities
. It is part of SFTShell's high level language extensions, allowing you to perform an algebraic evaluation of 'equation', then use the results to determine if it is TRUE (non-zero number, non-'blank' string) or FALSE.  This result is also modified by the
'NOT' operator as with the other options.  If the total result is TRUE, the command following the equation is evaluated and performed.  Otherwise, it is not, and control passes to the next line.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par See also:  {\uldb LET}{\v CMD_LET}, {\uldb CALC}{\v CMD_CALC}.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} INPUT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_INPUT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X024}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} INPUT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} INPUT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 INPUT [variable [string]]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This is a *very* useful command for creating interactive batch files.  You could use this command to prompt for file names, options, etc.  Use this in conjunction with the 'LET' command to provide string parsing capabilities. Use the 'ISYES' and 'ISNO' op
tions for the 'IF' command to automatically parse out 'yes' and 'no' responses in a standard manner. The command operates by displaying the optional 'string' (which begins at the first non-white-space character following 'variable
', and extends to the end of the command line), following this with a single space.  If no prompt appears in the command, a default prompt consisting of the variable name followed by a '?' will be displayed.  The user will then be able to type in a comman
d from the keyboard, which will then be assigned to the environment variable (minus the <CR> <LF>).  Pressing <Ctrl-C> during the process terminates the input and returns a NULL string.
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 PARAMETERS:
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab variable\tab \tab -\tab The name of the DOS environment variable.
 This variable will be created if it does not already exist, and will be assigned the value of the string entered by the user.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab string\tab \tab -\tab
The prompt printed prior to input.  This parameter is optional.  The default prompt consists of the variable name followed by '?'.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} JOIN Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_JOIN}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X025}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} JOIN}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} JOIN Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 JOIN
\par \pard \s26\li120\sl-240\slmult0\widctlpar The 'JOIN' command is an 'information-only' function which provides a list of 'JOIN'ed drives currently in the system.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} KILLTASK Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_KILLTASK}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X026}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} KT;KILLTASK}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} KILLTASK Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 KILLTASK task|instance|window|module name
\par \pard \s26\li120\sl-240\slmult0\widctlpar This command is one which allows you to 'kill' a task by specifying its MODULE NAME (enhancement from prior release) or the 'Task Handle' (the 'ID' number Windows{\f1 \'d4}
 uses for the task).  No other function anywhere (to my knowledge) does this so easily.  Developers, take note!  If a task is running WITHOUT a corresponding window (normally an ERROR condition) it is possible to see this task via the TASKLIST function.
You can then terminate such tasks via KILLTASK by specifying the task handle or MODULE NAME (from the TASKLIST display); the Task 'ID' may be in hexadecimal, decimal, or octal (for mainframe people who refuse to downsize).
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
If the MODULE NAME is specified, and more than one 'instance' of this program is running, then the program will produce a list of all of the running programs, their Task 'ID's, and Window Captions.  It will then prompt for the task entry to be KILL'ed usi
ng sequence numbers (1,2,3,etc.) printed to the left of each entry.  You may press <ENTER> to cancel, or enter an appropriate sequence number to delete
 that task. As with the 'C' language, OCTAL numbers are preceded by a leading zero, and HEXADECIMAL numbers by '0x'.  You can also use an 'H' suffix on HEX numbers (as in Assembler), and as displayed by TASKLIST.  Normally, HEX notation (with the 'H') is
the preferred method, but the others are once again provided for flexibility (since it uses same interpreter as the equation evaluator).
\par \pard \s26\li120\sl-240\slmult0\widctlpar CAUTION:  Certain tasks may not behave well if they are 'killed' with this function.  Exercise discretion in its use!  I
f possible, use the 'CLOSETASK' function in its place, which attempts to close the main window of a task in order to terminate it.  Once it has been determined that 'KILLTASK' can be used without causing any loss of system integrity, go for it!  Some appl
ications do not exit properly when you use 'KILLTASK', and can leave *time bombs* behind that result in GP faults.  If you are in doubt about safety, try using CLOSETASK first.  If this won't work, then try KILLTASK.  In the worst cases, the 'NUKETASK' co
mmand may be employed (which provides the LEAST FRIENDLY method of ending an application).
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 See also: {\uldb CLOSETASK}{\v CMD_CLOSETASK}, {\uldb NUKETASK}{\v CMD_NUKETASK}.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LABEL Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_LABEL}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X027}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} LABEL}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} LABEL Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 LABEL [drive:][label]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command allows you to display or change the volume label of the current for a specified disk drive.  If 'label' is omitted, the current label is only displayed; if 'drive:' is omitted, the current (default) drive is assumed.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LET Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_LET}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X028}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} LET}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} LET Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 LET variable=[equation]
\par Assigns a value to 'variable' based on t
he evaluation of 'equation' using a plethora of mathematical operators and functions, and algebraic order of operations (similar to an assignment statement in BASIC, PASCAL, or C/C++).  Numeric and String data types are somewhat interchangeable, and the t
ype of function called affects how the values are treated.  Results are stored as string values within environment variables, and can also be imbedded within string constants using the '%' substitution operators.  Information on the various operators and
functions is provided in the {\uldb High Level Language Overview}{\v CALC}.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 SAMPLE EXPRESSION:
\par \pard \s26\fi-1440\li1555\sl-240\slmult0\widctlpar\tx1555   LET a=1+2\tab this assigns the environment variable 'a' with the result of the equation '1+2'
\par \pard \s26\fi-1440\li1555\sl-240\slmult0\widctlpar\tx1555   LET a= a + 1\tab
this assigns the environment variable 'a' with the result of the equation 'a + 1'.  It is important to note that 'a' must not contain any white-space in its name, and especially must not have white-space between the variable name and the '=
' when used as the 'target' variable for assignment.  In this regard, it behaves like the 'SET' command, with the exception that the right-hand side of the '=' is treated as an expression instead of a string-literal
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar
String operators are normally 'doubled' to denote them from numeric operators. This is due to the treatment of *ALL* data as text (assigned to an environment variable, for example) and such distinction is necessary in order to properly render the data.  T
herefore, the expression 'a + b' treats 'a' and 'b' as environment variables containing 'numeric' data, while 'a ++ b' treat
s 'a' and 'b' as environment variables containing 'text' data.  As well, the use of '%' substitution is always evaluated *BEFORE* the equation is parsed. This is useful information for generating 'self-writing' code, which is a unique phenomena of interpr
etive languages. It is also important to note that functions which provide control to the environment (i.e. setting the cursor position, text output, and so forth might be adversely affected if they are used via the 'CALC' command.  The alternative would
be to assign the results of one of these functions (which is normally a blank string) to a 'dummy' variable via the LET command.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 See also:  {\uldb CALC}{\v CMD_CALC}, {\uldb IF}{\v CMD_IF}.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LISTOPEN Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_LISTOPEN}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X029}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} LO;LISTOPEN}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} LISTOPEN Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 LISTOPEN
\par \pard \s26\li120\sl-240\slmult0\widctlpar LO
\par \pard \s26\li120\sl-240\slmult0\widctlpar
The LISTOPEN function gets you a 'sneak peek' at the SYSTEM FILE TABLE which contains an entry for each open file in the system.  This function may be useful in tracking the progress of extensive operations in which file I/O is being performed, or for obt
aining general information about MS-DOS and Windows.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 PARAMETERS:  NONE
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The columns in the 'Open File' list are defined as follows:
\par \pard\plain \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915 \f5\fs20   File/Dev Name:\tab The drive letter and file name, or device name, of the open file.  Since MS-DOS does *not* keep track of the file's directory path, only the name is available.

\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Open Mode:\tab The access mode for the open file.  This can be 'Rd', 'Wrt', or 'R/W' for Read, Write, and Read/Write mode.
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Share Mode:\tab The 'file sharing' mode used for this open file.  This only has an effect if SHARE or Network software has been loaded.
The 5 share modes are 'Comp', 'Shr', 'NoRd', 'NoWr', and 'Excl' for COMPATIBILITY, Shared, 'No Read' (by other applications), 'No Write' (by other applications), and 'Exclusive' access.
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Machine ID:\tab
This is the 'Virtual Machine' (VM) within which the file's owning application resides.  VM '0' is the 'MS-DOS' VM.  VM '1' is normally the 'Windows' VM, in which all Windows applications run.  The remaining VM's normally belong to 'non-Windo
ws' applications.
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Owner PSP:\tab The 'DOS' (real mode) segment value for
the 'PSP' (PDB) that identifies the program which owns the open file.  A 'PSP' (or PDB) is a Program Segment Prefix (MS-DOS; in Windows it's known as a Program DataBase) that MS-DOS uses to identify memory and file 'ownership', and it contains a 'file han
dle translation table' which is used to translate a program's file handle to an SFT entry.
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Cur File Pointer:\tab This is the position within the file at which the next READ or WRITE operation will occur.  This value may exceed the file size (see below).
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Cur File Length:\tab
This is the *ACTUAL* file length, independent of the file length indicated in a 'DIR' listing.  A 'DIR' list will only reflect what the file's directory entry has stored in it.  MS-DOS must be explicitly invoked to update the directory entry
.  Otherwise, this function (or a similar one, using the SFT) is the only method by which the actual file length may be determined
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Owner Task:\tab This is the TASK HANDLE for the open file's owner.  If no task is associated with the PSP (or VM), this entry is blank.
\par \pard \s26\fi-1800\li1915\sl-240\slmult0\widctlpar\tx1915   Owner Module:\tab
This is the MODULE NAME for the open file's owner.  For Windows applications, it is the module name associated with the task (or PDB).  For NON-WINDOWS applications, it is the PROGRAM NAME contained in the PSP's Memory Control Block (DOS 4
 or later).  For MS-DOS (VM #0) and 'Windows owned' files, or if the file's owner cannot be determined, an appropriate label appears in this column.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LOAD Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_LOAD}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X030}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} LH;LOAD;LOADHIGH}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} LOAD Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 LH [program] [commands]
\par \pard \s26\li120\sl-240\slmult0\widctlpar LOAD [program] [commands]
\par LOADHIGH [program] [commands]
\par \pard \s26\li120\sl-240\slmult0\widctlpar For command compatibility with MS-DOS 5.x and above, the LH and LOADHIGH commands, plus the Windows{\f1 \'d4}
 Command Line Interpreter *ENHANCEMENT* 'LOAD' all execute programs (similar to typing the program name at the command prompt).  However, use of these commands causes the 'nCmdShow' parameter (passed to the program on startup) to MINIMIZE the window (icon
), similar to specifying 'LOAD=' from within WIN.INI (on startup only), or using the 'Run Minimized' option from File Manager's 'FILE' 'RUN' menu.  Beca
use of the similarity in command appearance, 'LH' and 'LOADHIGH' have been included with 'LOAD' in providing this functionality.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar See also:  {\uldb CALL}{\v CMD_CALL}, {\uldb START}{\v CMD_START}, {\uldb RETURN}{\v CMD_RETURN}.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} LOCALS Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_LOCALS}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X030a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} LOCALS}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} LOCALS Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 DEFINE function (parameters)
\par \pard \s26\li120\sl-240\slmult0\widctlpar LOCALS var1[,var2[,...]]
\par \{commands\}
\par RETURN \{expression\}
\par END DEFINE
\par \pard \s26\li120\sl-240\slmult0\widctlpar The \lquote LOCALS\rquote
 command is only valid within a user-defined function.  This command takes the variables specified in a comma-delimited list and saves their respective values in a temporary location that is specific to the current function call \lquote instance\rquote
, stored on the stack along with the parameters.  When the function returns, these variables are restored with their previous values.  In this way, a function can re-enter itself, allowing for recursive a
lgorithms, and allowing users to use the same variable names in multiple functions without the danger of them interfering with one another.  This also simplifies cleanup.  In essence, all variables that are NOT required to be global ought to be declared a
s \lquote local\rquote  with the \lquote LOCALS\rquote  command.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar See also:  {\uldb DEFINE}{\v CMD_DEFINE}, {\uldb RETURN}{\v CMD_RETURN}.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MAX Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_MAX}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X031}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} MAX}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} MAX Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 MAX [window]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
Toggles a window between its MAXIMIZED state (full-screen view) and its RESTORED state (normal view).  If 'window' is a valid window handle that is capable of being maximized, it will be maximized.  Otherwise, if there is no argument, the Windows{\f1 \'d4
} Command Line Interpreter window is maximized or restored to 'NORMAL'.  The 'WINDOW_STATE' variable can be used to verify if the SFTShell main wi
ndow has already been maximized.  This variable will have one of the following values, depending on the current window state:
\par \pard \s26\li120\sl-240\slmult0\widctlpar \tab "MINIMIZED"  Window is minimized
\par \tab "NORMAL"    Window is 'normal' (neither minimized nor maximized)
\par \tab "MAXIMIZED"  Window is maximized
\par \pard \s26\li120\sl-240\slmult0\widctlpar To restore the main window to its NORMAL state, the following batch commands work rather nicely:
\par \pard \s26\li120\sl-240\slmult0\widctlpar \tab IF %WINDOW_STATE%==MINIMIZED MIN
\par \tab IF %WINDOW_STATE%==MAXIMIZED MAX
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MEM Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_MEM}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X032}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} MEM}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} MEM Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 MEM [/C]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function is not the same as you find under MS-DOS{\f1\fs16 .} Since Windows{\f1 \'d4 }
uses a much different memory management method than does DOS, you will not get the same results from this program that you would if you used a similar program running under MS-DOS.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 SWITCHES:\tab /C\tab -\tab lists each loaded module once, and the total amount of memory allocated to it for all instances combined.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 When no switch is supplied, this function prints a summary report of memory use in the system. This report differs between 386 Enhanced Mode and Standard Mode.  The 386 Enhanced Mode summary
includes information about Virtual and linear (RAM) memory, including an estimate of the total 'unused' amount of each type.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MIN Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_MIN}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X033}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} MIN}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} MIN Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 MIN [window]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
Toggles a window between its MINIMIZED state (Icon, if you will) and its RESTORED state (normal view).  If 'window' is a valid window handle that can be minimized, it will be minimized.  Otherwise, if there is no argument, the Windows{\f1 \'d4}
 Command Line Interpreter window is minimized or restored to 'NORMAL'.  The 'WINDOW_STATE' variable can be used to
verify if the SFTShell main window has already been minimized.  This variable will have one of the following values, depending on the current window state:
\par \pard \s26\li120\sl-240\slmult0\widctlpar \tab "MINIMIZED"\tab Window is minimized
\par \tab "NORMAL"\tab Window is 'normal' (neither minimized nor maximized)
\par \tab "MAXIMIZED"\tab Window is maximized
\par \pard \s26\li120\sl-240\slmult0\widctlpar To restore the main window to its NORMAL state, the following batch commands work rather nicely:
\par \pard \s26\li120\sl-240\slmult0\widctlpar \tab IF %WINDOW_STATE%==MINIMIZED MIN
\par \tab IF %WINDOW_STATE%==MAXIMIZED MAX
\par
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MKDIR Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_MKDIR}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X034}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} MD;MKDIR}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} MKDIR Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 MD dirname
\par \pard \s26\li120\sl-240\slmult0\widctlpar MKDIR dirname
\par \pard \s26\li120\sl-240\slmult0\widctlpar Makes a new sub-directory with the name 'dirname' on the specified drive (defaults to current drive/directory as 'source node').  The 'dirname' parameter may either consist of a full drive:\\
path specification, or a directory specification without the root '\\' (in which case the current default directory on the specified drive is used as the point from which the directory is created.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 For more information, see the MS-DOS User's Guide and Reference.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} MOVE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_MOVE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X035}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} MOVE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} MOVE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 MOVE source [dest]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This is much like the MS-DOS
 MOVE command, which allows you to 'move' entire file sets from one directory to another.  This version is restricted to files on the same drive only, though they may be in different sub-directories on the drive.  Also, the source and destination file nam
e specifications are identical to those used by the 'COPY' command, with automatic conversion of sub-directory names to 'path\\
*.*', and so forth.  Destination file names can contain either patterns (involving '?' or '*' wildcards), or a file / dir name.  If a directory name is specified for the destination, it is automatically converted to a wildcard 'path\\
*.*' destination pattern.
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 PARAMETERS:
\par \tab source\tab \tab -\tab source file name (or pattern)
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab dest\tab \tab -\tab
destination file name (assumes current dir). Characters from the source file are automatically substituted for any '?' or '*' characters in the destination.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} NEXT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_NEXT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X035a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} NEXT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} NEXT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 NEXT \{var\}
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 This command is used in conjunction with the FOR command to provide structured loops.  A FOR/NEXT loop may be nested, provided that each nested loop uses a different variable name for \{var\}
.  The following is an example of a FOR/NEXT loop:
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 FOR i FROM 1 TO 10
\par \pard \s26\li120\sl-240\slmult0\widctlpar ECHO I am on iteration %i%
\par ECHO and I am using a FOR/NEXT loop
\par NEXT i
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par See also: {\uldb FOR}{\v CMD_FOR}
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} NUKETASK Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_NUKETASK}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X036}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} NUKETASK}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} NUKETASK Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 NUKETASK task|instance|window|module name
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This function allows you to 'NUKE' a task using either the Task 'ID', the Main Window 'ID', or the MODULE NAME.  To obtain a list of running tasks and their associated MODULE NAMES, Task 'ID's see the 'TASKLIST' functio
n. The preferred method uses the MODULE NAME (normally the same as the Program Name, without the extension) to identify the task to be closed.  If more than one 'instance' of the same program is running a list of these tasks, their Task 'ID's, and their M
ain Window 'Captions' (titles) will appear, with sequence numbers to the left.  The program then prompts which one to delete. You may respond by entering the appropriate sequence number (1,2,3,etc.) or by pressing <ENTER> to cancel the operation.  For Tas
k 'ID's and Main Window 'ID's there will always be a unique task associated with it.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\fi-1080\li1195\sl-240\slmult0\widctlpar\tx1195 \f5\fs20 WARNING:\tab
THIS IS THE LEAST PREFERRED METHOD OF ENDING A TASK!  Using this method can leave limited resources (such as FONTS, BITMAPS, etc.) allocated, even though the task has been ended.  Excessive use of this function can lead to system failures, requir
ing Windows to be restarted, or even a REBOOT, to correct the problems.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 This function 'NUKE's the associated task by forcing Windows to end the task immediately, without any prompts or messages.
\par See also:  {\uldb CLOSETASK}{\v CMD_CLOSETASK}, {\uldb KILLTASK}{\v CMD_KILLTASK}.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} ODBC Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_ODBC}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X036a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} ODBC}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} ODBC Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 ODBC CONNECT [connect string]
\par \pard \s26\li120\sl-240\slmult0\widctlpar ODBC DISCONNECT [CONV_ID | ALL]
\par ODBC SQL BEGIN [CONV_ID]
\par ODBC SQL END
\par ODBC [CREATE|DROP] STATEMENT [CONV_ID]
\par ODBC [{\i function}] [CONV_ID] [arguments]
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
The ODBC commands allow SFTShell to use the Microsoft Open Database Connectivity protocol to access any valid 16-bit ODBC driver that has been installed on your system, and perform standard SQL operations.  The 'ODBC CONNECT' comma
nd establishes a connection with the an ODBC driver, and creates a 'statement' that defines a unique environment for accessing one or more tables through SQL 'SELECT' statements, or for performing standard operations within the specified database via SQL.
  If an additional statement is needed, you can create one using the ODBC CREATE STATEMENT command.  Any one statement can be deleted using the ODBC DROP STATEMENT command.  The ODBC DISCONNECT command will automatically drop all open statements for the s
pecified conversation, and disconnect the driver.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
Following each command, the 'ODBC_RESULT' environment variable will be assigned a value appropriate to the action.  When performing a CONNECT or CREATE STATEMENT operation, it will be assigned the new 'CONV_ID' value that must be passed to the other comma
nds.  A value of 'ERROR' is assigned whenever an error occurs.  The actual error information can then be obtained using the ODBC ERROR command.
\par \pard \fi-2765\li2880\sb80\sl-240\slmult0\widctlpar\tx1710\tx2880 {\cf9 PARAMETERS:}\tab [{\i function}]\tab this represents a valid ODBC command function, which may be one of the following:
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab OPEN [tbl]\tab Opens table '[tbl]' for read/write access so that you can perform UPDATE, INSERT, and/or DELETE operations.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab EXECUTE\tab
Executes the current SQL program defined by ODBC SQL BEGIN and ODBC SQL END.  The results are normally saved as an ODBC 'Dynaset', if editing is allowed.  This statement does not wait for completion.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab UPDATE\tab Performs an update operation on the current record.
\par \tab \tab DELETE\tab Deletes the current record.
\par \tab \tab INSERT\tab Inserts a new record.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab FIRST\tab Sets
 pointer to first record in table or result set and retrieves the record.  If the result set or table is empty, the 'ODBC_RESULT' variable will contain 'EOF' and the retrieved record will be blank.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab NEXT\tab
Increments the record pointer in the table or result set and retrieves the record.  Following 'OPEN' or 'EXECUTE', it behaves the same as 'FIRST'.  When the record pointer passes the last record in the table or result set, it causes an 'ODBC_RESULT
' of 'EOF', and the record it retrieves is blank.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab PREVIOUS\tab
Decrements the record pointer in the table or result set and retrieves the record.  Following 'OPEN' or 'EXECUTE', it causes an 'ODBC_RESULT' of 'EOF', and the record it retrieves is blank.
\par \tab \tab LAST\tab Completes any deferred I/O for a result set, and retrieves the last record. If the result set or table is empty, the 'ODBC_RESULT' variable will contain 'EOF' and the retrieved record will be blank.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab CANCEL\tab Cancels current SQL or transaction.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab BIND [v f]\tab Binds a variable 'v' to a field 'f' in the result set or
 table.  Any changes to the variable will be reflected in the table for UPDATE and INSERT operations.  As each record is retrieved, the variable 'v' will be assigned the corresponding value from the retrieved record.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab ERROR\tab
Obtains the error string associated with the last error (if any) and places it into the 'ODBC_RESULT' variable.  If there is no error message, or no error occurred, 'ODBC_RESULT' will contain "OK".  Each ODBC ERROR command will remove one error me
ssage from the driver's error stack, if there is more than one error message to be retrieved.
\par \pard \fi-3485\li3600\sb80\sl-240\slmult0\widctlpar\tx1620\tx2160\tx3600 \tab \tab TRANSACT\tab Based on the command argument (BEGIN, END, ROLLBACK, or CANCEL) the TRANSACT option manages transactions for DBMS's that support them.\line
For additional information on ODBC transactions, see {\uldb Using Transactions}{\v ODBC_TRANSACTIONS}.
\par \pard \fi-2765\li2880\sb80\sl-240\slmult0\widctlpar\tx1710\tx2880 \tab [CONV_ID]\tab This parameter contains the 'ODBC_RESULT' value returned from 'ODBC CONNECT' or 'ODBC CREATE STATEMENT'.
\par \pard \fi-2765\li2880\sb80\sl-240\slmult0\widctlpar\tx1710\tx2880
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 Each command sets the 'ODBC_RESULT' variable to one of several possible values, depending upon the resu
lts from the command, and the type of command being executed.  The possible values for ODBC_RESULT are as follows:
\par \pard \s26\fi-1350\li1620\sl-240\slmult0\widctlpar\tx1620 [CONV_ID]\tab
from ODBC CONNECT or ODBC CREATE STATEMENT.  This represents a unique ODBC conversation, including the 'environment' and 'statement', between SFTShell and the ODBC driver.  Each ODBC command that affects a conversation must include this value on
 the command line.
\par \pard \s26\fi-1350\li1620\sl-240\slmult0\widctlpar\tx1620 OK\tab any ODBC function except ODBC CONNECT or ODBC CREATE STATEMENT.  This indicates a successful operation (or no error after ODBC ERROR).
\par \pard \s26\fi-1350\li1620\sl-240\slmult0\widctlpar\tx1620 ERROR\tab any ODBC function.  This indicates a failed operation.
\par EOF\tab ODBC FIRST, ODBC NEXT, ODBC PREVIOUS, or ODBC LAST
\par \{error msg\}\tab An error message obtained by ODBC ERROR
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par See also:  {\uldb Using ODBC}{\v USING_ODBC} for a more detailed explanation on how to use the ODBC command.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PATH Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_PATH}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X037}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} PATH}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} PATH Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 PATH[=| ][newpath]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This is functionally equivalent to 'SET PATH=newpath' when 'newpath' is not blank.  If 'PATH' is the only item on the command line, then the current value for 'PATH' is displayed.  The v
alue of the 'PATH' environment variable determines which drives/directories are to be searched whenever a program name is entered on the command line.  The search order always proceeds as follows:
\par \pard \s26\li120\sl-240\slmult0\widctlpar   1:  Current drive/directory
\par   2:  Windows directory
\par   3:  Windows SYSTEM directory
\par   4:  All directories in the 'PATH' environment variable, in order
\par   5:  'Mapped' network drives
\par \pard \s26\li120\sl-240\slmult0\widctlpar Each entry in the 'PATH' environment variable should be separated with a ';' and a ';' at the end of the PATH is optional.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PAUSE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_PAUSE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X038}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} PAUSE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn_previou
s");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} PAUSE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 PAUSE [message]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Pauses the execution of a batch job, and optionally prints a user-defined message in place of the (default) 'Press any key to continue . . .'.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 The 'message' parameter is an ENHANCEMENT to the MS-DOS function.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PLAYSOUND Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_PLAYSOUND}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X039}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} PS;PLAYSOUND}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} PLAYSOUND Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 PLAYSOUND [/W | /L] [soundfile]
\par \pard \s26\li120\sl-240\slmult0\widctlpar PS [/W | /L] [soundfile]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Plays the sound file 'soundfile' (a .WAV file) using the Windows{\f1 \'d4} Multi-Media API through the system's "wave" device.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 SWITCHES:\tab /W\tab -\tab forces sound file to play 'SYNCHRONOUSLY' (waits for the sound file to finish before continuing).
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /L\tab -\tab
forces sound file to play 'ASYNCHRONOUSLY' (does not wait for the sound file to finish before continuing) and 'loop' until a blank name is specified.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 PARAMETERS:
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab    soundfile\tab -\tab
the name of a '.WAV' file containing the sound to be played on the Multi-Media WAVE device.  If no extension is on the file, '.WAV' is assumed.  If this parameter is BLANK, all WAVE output will cease.  The sound file is played 'ASYNCHRONOU
SLY' (i.e. at the same time SFTSHELL is processing additional commands) when possible.  (NOTE:  the PC SPEAKER driver cannot play sound files ASYNCHRONOUSLY).
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 Specifying a SYSTEM SOUND in lieu of 'soundfile' will play the appropriate SYSTEM sound (as defined in the control panel 'Sound' dialog).
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 The DEFAULT SYSTEM SOUNDS (and associated Message Box icons) are:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20   SystemAsterisk\tab \tab -\tab "Asterisk" (information) - uses 'Circle "i"' icon.
\par   SystemHand\tab \tab \tab -\tab "Critical Stop" - uses 'Stop Sign' icon.
\par   SystemDefault\tab \tab \tab -\tab "Default" - no icon (default sound).
\par   SystemExclamation\tab \tab -\tab "Exclamation" - uses 'Exclamation Point' icon.
\par   SystemQuestion\tab \tab -\tab "Question" - uses 'Question Mark' icon.
\par   SystemExit\tab \tab \tab -\tab "Exit" - no icon (plays on exit from windows).
\par   SystemStart\tab \tab \tab -\tab "Start" - no icon (plays on Windows startup).
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PRINT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_PRINT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X040}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} PRINT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} PRINT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 PRINT filename
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function uses the registration database information to determine which application should be run to print the file specified, based on its extension.  The appropriate application is then executed using the SH
ELL interface, and commanded to print the specified file.  The application will normally terminate itself, depending on the commands stored within the registration database.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 PARAMETERS:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab filename\tab -\tab
A file whose extension is included in the REGISTRATION database.  See the 'REGEDIT' application and the 'File Associate' menu within File Manager.
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} PROMPT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_PROMPT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X041}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} PROMPT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} PROMPT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 PROMPT[=][value]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This is functionally equivalent to 'SET PROMPT=value' when 'value' is not blank.  If 'PROMPT' is the only item on the com
mand line, then the current value for 'PROMPT' is displayed.  The value of the 'PROMPT' environment variable determines what is displayed when the system is waiting for the user to type a command, and what appears when ECHO is ON during batch file executi
on.  Certain characters (prefixed by '$') are special and generate unique functionality when included in the 'PROMPT' environment variable. Below is a list of these and a brief explanation of each:
\par \pard \s26\fi-720\li835\sl-240\slmult0\widctlpar\tx835    $q\tab '=' (equals sign)
\par    $$\tab '$' (dollars sign)
\par    $t\tab Current Time
\par    $d\tab Current Date
\par    $p\tab Current drive:path
\par    $v\tab MS-DOS Version (and Windows Version - ENHANCEMENT)
\par    $n\tab Current Drive Only
\par    $g\tab '>' (greater than sign)
\par    $l\tab '<' (less than sign)
\par    $b\tab '|' (pipe symbol)
\par    $_\tab Carriage Return/Line Feed Combination
\par    $e\tab 'Escape' character (ASCII 27., 1bH)
\par \pard \s26\fi-720\li835\sl-240\slmult0\widctlpar\tx835    $h\tab Backspace Character
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s36\fi-720\li835\sl-240\slmult0\widctlpar\tx835 \f5\fs20 NOTE:  The Windows{\f1 \'d4}
 Command Line Interpreter allows imbedded ANSI escape sequences in the PROMPT and ECHO commands to force the screen background and text colors to a specific value.
 Some ANSI sequences (such as BLINKING TEXT) are not supported.  See the MS-DOS User's Guide and Reference for information regarding ANSI escape sequences under the section for the ANSI.SYS device driver.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} REM Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_REM}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X042}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} REM}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} REM Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 REM \{comments\}
\par \pard \s26\li120\sl-240\slmult0\widctlpar Normally, this is used for comments in batch files.  From the command line it does absolutely nothing.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} REMOVE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_REMOVE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X043}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} REMOVE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} REMOVE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 REMOVE [module handle|module name]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This command removes the specified module either by name or by handle from memory.  On occasions, especia
lly if an application has a fatal error, certain modules may be 'left behind'.  These may be unloaded manually by use of the 'REMOVE' function.  Additionally, Windows may load fonts or other 'memory hog' modules that you do not *REALLY* want.  These may a
lso be removed by this function.
\par \pard \s26\fi-1080\li1195\sl-240\slmult0\widctlpar\tx1195 WARNING:\tab
This function circumvents normal Windows' memory management.  If you unload a module that is *IN USE* the results are unpredictable and might possibly require a re-boot or other          drastic action on the part
of the user.  It should be noted that unless you are ABSOLUTELY SURE that you wish to unload a module you should not do so.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} RENAME Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_RENAME}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X044}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} REN;RENAME}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} RENAME Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 REN oldname newname
\par \pard \s26\li120\sl-240\slmult0\widctlpar RENAME oldname newname
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This function, like its DOS counterpart, renames a file from one name to another, without changing its path name.  If a drive or path is specified in the 'newname' parameter, an ERROR will result.  Wildcards may be used in both the 'oldname' and 'newname'
 parameters.  As an extra added bonus, you may also rename a SUB-DIRECTORY using this function!!  In order to do this, you must be in the 'PARENT' directory at the time you invoke the command.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 PARAMETERS:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab oldname\tab -\tab original file name (or pattern).
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715             newname\tab -\tab new file name (or pattern).  Characters from the original name are automatically substituted for any '?' or '*' characters.

\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} REPEAT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_REPEAT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X044a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} REPEAT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} REPEAT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 REPEAT
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \{commands\}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar UNTIL \{condition\}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar This command initiates a REPEAT/UNTIL loop.  Use of REPEAT in nested loops does not allow for GOTO commands to labels outside of a loop.  To exit from a REPEAT/UNTIL loop, use the EXIT LOOP command.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The commands within the REPEAT and UNTIL commands will be executed at least once, and repeated until the condition identified by \{condition\} results in a non-zero (TRUE) value.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard \li120\sb80\sl-240\slmult0\widctlpar See also: {\uldb UNTIL}{\v CMD_UNTIL}, {\uldb EXIT}{\v CMD_EXIT}, {\uldb WHILE}{\v CMD_WHILE}, {\uldb WEND}{\v CMD_WEND}, {\uldb FOR}{\v CMD_FOR}, {\uldb NEXT}{\v CMD_NEXT}, {\uldb GOTO}{\v CMD_GOTO}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} REPLACE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_REPLACE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X045}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} REPLACE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("btn
_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} REPLACE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 REPLACE [source] [[dest]] [/A][/P][/R][/S][/U][/W]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function is similar to copy, except that you can compare existing files in the destination directory to those in the source, and copy only those files which match the desired criteria.
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 SWITCHES:\tab /A\tab -\tab Adds new files to destination directory instead of replacing existing files.
\par \tab \tab \tab \tab This switch cannot be used with either '/S/ or '/U'
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /P\tab -\tab Prompts you for confirmation before replacing a destination file or adding a source file.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /R\tab -\tab Replaces read-only files as well as normal files.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /S\tab -\tab Recurse sub-directories in the destination path only. This switch cannot be used with '/A'.
\par \tab \tab /U\tab -\tab Updates ONLY those files in the destination which are older than the files in the source. This switch cannot be used with '/A'.
\par \tab \tab /W\tab -\tab Prompts you to insert the correct disk before searching for files to be copied.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} RETURN Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_RETURN}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X046}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} RETURN}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} RETURN Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 RETURN [value]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Valid only for BATCH FILES.  Terminates the current batch file, optionally assigning 'value' to the variable 'RETVAL' (blank if not specified).  This command may also be invoked using an 'IF' statement.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar See also:  {\uldb CALL}{\v CMD_CALL}, {\uldb LOAD}{\v CMD_LOAD}, {\uldb START}{\v CMD_START}.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} RMDIR Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_RMDIR}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X047}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} RD;RMDIR}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} RMDIR Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 RD dirname
\par \pard \s26\li120\sl-240\slmult0\widctlpar RMDIR dirname
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command removes a sub-directory.  If the sub-directory is in-use, or any files reside in it, it will not be deleted, and an error message will result.  This is essentially the opposite of the 'MD' or 'MKDIR' command.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SET Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_SET}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X048}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} SET}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} SET Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 SET [varname=[string][%[varname2]%[string][%[varname3]%]...]]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This command either displays all environment variables, or assigns a new string value to an environment variable (creating it i
f it does not already exist).  Note that any spaces between the 'varname' and the '=' are included as part of the environment variables name (allowing imbedded spaces, so be careful when specifying variable names!).  Environment variables are used a numbe
r of items, plus many enhanced functions unique to the Windows{\f1 \'d4 }
Command Line Interpreter. One enhancement over the MS-DOS 'SET' command is the ability to include a variable name within '%' as part of the SET command from the command prompt.  In the MS-DOS v
ersion only BATCH files could reference another environment variable using the '%variable%' designation.  By doing this the user can make use of environment variables for temporary storage of the PATH or PROMPT variables, as follows:
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20    SET TEMP_PATH=%PATH%        (this would put the path into 'TEMP_PATH')
\par \pard \li120\sb80\sl-240\slmult0\widctlpar Alternately, you could add something to an existing variable as follows:
\par    SET PROMPT=Type 'EXIT' and press <ENTER> to return$_$_%PROMPT%
\par \pard \li120\sb80\sl-240\slmult0\widctlpar Note that there is no real limit to the length environment variab
les within the Command Line Interpreter, but DOS programs expect environment variables to have a length less than 128 characters, including the name and equals sign.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SHIFT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_SHIFT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X049}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} SHIFT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} SHIFT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 SHIFT
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command is used in batch files only, and causes the values of the parameters %0, %1, etc. to be 'shift'ed, such that %0 now represents what '%1' used to be, and so on.  This is one way to access more than 10 parameters from the command line within a
batch file.  Once the 'SHIFT' command has been used, it cannot be reversed.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} START Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_START}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X049z}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} START}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} START Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 START [/Minimized|/MAXimized|/Restored|/Hidden][/Wait] program [args]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command starts a program as a separate process, optionally specifying the size of the application window, and optionally waiting for the process to complete before returning control to the program or command line.  This command is compatible with the
 Windows NT and Win '95 'START' command, with some additional enhancements.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s26\fi-2760\li2880\sl-240\slmult0\widctlpar\tx1620\tx2700 \f5\fs20 PARAMETERS:\tab program\tab -\tab this is the name of the program that you wish
to run using the 'START' command.  This program will always run as a separate process, similar to typing the name of the program at the command prompt, or as a command line argument to either the 'CALL' or 'LOAD' commands.
\par \pard \s26\fi-1260\li2880\sl-240\slmult0\widctlpar\tx1620\tx2700 args\tab -\tab this represents the optional command line arguments for the specified program.
\par \pard \s26\fi-1260\li2880\sl-240\slmult0\widctlpar\tx1620\tx2700 /MAXimized\tab -\tab This switch starts the application with a MAXIMIZED main window.  It cannot be specified with either the /H, /M, or /R switches.
\par /Minimized\tab -\tab This switch starts the application with a MINIMIZED (Iconic) window.  It cannot be specified with either the /H, /MAX, or /R switches.
\par /Restored\tab -\tab This switch starts the application with a RESTORED (normal) window.  It cannot be specified with either the /H, /MAX, or /M switches.
\par \pard \s26\fi-1260\li2880\sl-240\slmult0\widctlpar\tx1620\tx2700 /Hidden\tab -\tab
This switch specifies that the main window should be initially HIDDEN.  It cannot be specified with either the /MAX, /MIN, or /R switches.  A hidden window must be explicitly shown, either by using the MIN or MAX commands, or by using the 'ShowW
indow()' function.
\par \pard \s26\fi-1260\li2880\sl-240\slmult0\widctlpar\tx1620\tx2700 /Wait\tab -\tab This switch causes SFTShell to wait until the program terminates before it continues with the next command. This is functionally similar to the 'CALL' command.
\par \pard \s26\fi-2580\li2700\sl-240\slmult0\widctlpar\tx1800
\par \pard \s26\li120\sl-240\slmult0\widctlpar NOTE:  lower case letters in switch values denote optional characters.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar Specifying the '/Wait' option causes the 'RETVAL' environment variable to be assigned the 'return code' value from the application, in the same manner as the 'CALL' command.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard \s26\li120\sl-240\slmult0\widctlpar See also:  {\uldb CALL}{\v CMD_CALL}, {\uldb LOAD}{\v CMD_LOAD}, {\uldb RETURN}{\v CMD_RETURN}.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SUBST Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_SUBST}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X050}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} SUBST}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} SUBST Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 SUBST [drive:] [/D|[drive:][path]]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
The SUBST command accesses the DOS internal data structures that maintain information about logical drives, and either lists all 'SUBST'ed drives, or optionally add or delete a 'SUBST'ed drive to the system. A new logical drive may be 'SUBST'ituted for an
other drive.  This causes MS-DOS to treat the root directory of the 'SUBST'ed drive as though it was the same as the 'SUBST'ed drive and directory.  For example if I wish to have drive 'E' point to the 'D:\\E_DRIVE' sub-directory I would iss
ue the following command:
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20    SUBST E: D:\\E_DRIVE
\par \pard \li120\sb80\sl-240\slmult0\widctlpar If both drives and the path are valid the 'E' drive will be created and point to the same files as the 'D:\\E_DRIVE' directory.  When the command 'DIR E:\\*.*' is entered, a directory of 'D:\\
E_DRIVE' will be shown, except that it will appear to be part of the 'E:\\' directory.
\par \pard \li115\sb80\sl-240\slmult0\widctlpar\tx475\tx1195 To 'SUBST'itute a drive for a path on another drive, the command format is:
\par \pard\plain \s26\li115\sl-240\slmult0\widctlpar\tx475\tx1195 \f5\fs20 \tab SUBST D: C:\\path
\par \pard \s26\li115\sl-240\slmult0\widctlpar\tx475\tx1195 \tab where\tab 'D:' is the new logical drive to create (must not exist)
\par \tab and\tab 'C:\\path' is the sub-directory to which 'D:' will refer
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 To delete a 'SUBST'ed drive, use the logical drive designator and the '/D' switch as follows:
\par \pard\plain \s26\li115\sl-240\slmult0\widctlpar\tx475\tx1195 \f5\fs20 \tab SUBST D: /D
\par \pard \s26\li115\sl-240\slmult0\widctlpar\tx475\tx1195 \tab where\tab 'D:' is the logical 'SUBST'ed drive to be deleted
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} SYS Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_SYS}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X051}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} SYS}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} SYS Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 SYS [boot drive:[path]] dest drive:
\par \pard \s26\li120\sl-240\slmult0\widctlpar
Copies the MS-DOS system files (IO.SYS and MSDOS.SYS) from the boot drive (either specified by 'boot drive:[path]' or the 'default') to the destination drive.  If 'boot drive:[path]' is not specified, the current drive is assumed; as an enhancement, if no
 sy
stem files are found on the current drive (current path or root directory) then the system will attempt to determine which drive the 'boot' drive was when the system was started.  If it is not possible to make this determination the function will fail.  O
therwise, the system files will be copied from the appropriate drive, as well as 'COMMAND.COM'.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TASKLIST Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_TASKLIST}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X052}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} TL;TASKLIST}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} TASKLIST Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 TL
\par \pard \s26\li120\sl-240\slmult0\widctlpar TASKLIST
\par \pard \s26\li120\sl-240\slmult0\widctlpar This provides the user with a list of tasks that are currently running from within the Windows{\f1 \'d4} environment.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 See also:  {\uldb MEM}{\v CMD_MEM}.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TIME Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_TIME}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X053}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} TIME}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} TIME Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 TIME [newtime]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This command allows the user to view the current system time, or else change it to a new value.  If 'TIME' with no arguments is specified, the current system time is displayed; otherwise, the 'newtime' argument is assigned to the system clock.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TREE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_TREE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X054}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} TREE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} TREE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 TREE [pathname]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This produces a rather nice display of the directory structure for either the current drive:directory combination, or the drive:directory specified by 'pathname'.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TRUENAME Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_TRUENAME}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X055}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} TRUENAME}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} TRUENAME Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 TRUENAME [filename]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This function began as an undocumented feature of MS-DOS 4.0. If a SUBST or JOIN or '.' or '..' is present for the 'filename' parameter specified by the user this function will determine the 'TRUE' pathname component for such a drive or directory name, an
d the fully qualified (result) path is displayed. This corresponds to INT 21H function 60H (an undocumented DOS function).
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} TYPE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_TYPE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X056}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} TYPE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} TYPE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 TYPE [filename]
\par \pard \s26\li120\sl-240\slmult0\widctlpar This function types the contents of 'filename' into the SFT
SHELL display. It is recommended that (especially for large files) a program such as 'NOTEPAD.EXE' be used to view the file, rather than using 'TYPE'.  This command has been included mostly for compatibility.
\par \pard \s26\li120\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} UNTIL Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_UNTIL}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X056a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} UNTIL}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} UNTIL Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 REPEAT
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \{commands\}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar UNTIL \{condition\}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar This command completes a REPEAT/UNTIL loop.  Use of UNTIL in nested loops does not allow for GOTO commands to labels outside of a loop.  To exit from a REPEAT/UNTIL loop, use the EXIT LOOP command.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The commands within the REPEAT and UNTIL commands will be executed at least once, and repeated until the condition identified by \{condition\} results in a non-zero (TRUE) value.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard \li120\sb80\sl-240\slmult0\widctlpar See also: {\uldb REPEAT}{\v CMD_REPEAT}, {\uldb EXIT}{\v CMD_EXIT}, {\uldb WHILE}{\v CMD_WHILE}, {\uldb WEND}{\v CMD_WEND}, {\uldb FOR}{\v CMD_FOR}, {\uldb NEXT}{\v CMD_NEXT}, {\uldb GOTO}{\v CMD_GOTO}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} VER Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_VER}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X057}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} VER}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} VER Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 VER
\par \pard \s26\li120\sl-240\slmult0\widctlpar This command displays the current MS-DOS version, AND Windows{\f1 \'d4} version (an enhancement over the MS-DOS functionality).
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} VERIFY Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_VERIFY}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X058}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} VERIFY}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} VERIFY Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 VERIFY [ON|OFF]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Specifies whether MS-DOS is to verify that write operations have been perform
ed correctly.  The 'on' value enables this verification process, and hence causes disk operations to be slowed down somewhat.  The 'off' value disables it, resulting in slightly faster (but possibly unreliable) disk write operations.  Specifying the 'VERI
FY' command only (with no argument) displays the current VERIFY status.  NOTE:  This is a GLOBAL flag, common to all applications.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} VOL Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_VOL}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X059}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} VOL}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} VOL Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 VOL [drive:]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Displays the volume label for drive 'drive' (or default if none specified) and serial number, when applicable.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} WAIT Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_WAIT}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X060}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} WAIT}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} WAIT Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 WAIT FOR time [/Q]
\par \pard \s26\li120\sl-240\slmult0\widctlpar WAIT UNTIL [date|time|date time] [/Q]
\par \pard \s26\li120\sl-240\slmult0\widctlpar
This is a powerful command that tells the BATCH processor to WAIT until a particular date and time, or for a specified time interval.  If the date is not specified, the program waits for a particular time only.  As an added bonus, you may specify a day of
 the week in place of the date.
\par \pard \s26\li120\sl-240\slmult0\widctlpar PARAMETERS:
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 \tab date\tab \tab -\tab this may be specified in one of the acceptable date formats.  Additionally, you can specify a day o
f the week (i.e. Sunday, Monday, etc.) which is case insensitive.  Dates may be specified as MM/DD/YY, MM/DD/YYYY, MM-DD-YY, DD-Mmm-YY, and related format variations (specifying 2 digit or 4 digit years, leaving the year off, etc.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab \tab \tab NOTE:  This parameter may only be specified if the 'WAIT UNTIL' option is used.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab time\tab \tab -\tab
optional if 'date' specified.  Required if the 'WAIT FOR' option is in use.  With the 'WAIT UNTIL' option, specifies the time at which control returns to the batch file.  For the 'WAIT FOR
' option, specifies the time duration (Hours:Minutes:Seconds) to suspend execution. Time is specified in HH:MM:SS format; leaving off the seconds assumes 'HH:MM'.  Specifying a single integer value with 'WAIT FOR' assumes that number of seconds.  It is re
commended that you minimize the window using the 'MIN' command before 'WAIT'.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 SWITCHES:\tab /Q\tab -\tab
This switch inhibits the printing of any status messages - desirable for use in batch files in which the 'WAIT' command is used for periodic polling, or other (sim
ilar) operations.  In such cases the status messages would be of little use and may clutter the screen.
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} WEND Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_WEND}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X060a}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} WEND}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} WEND Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 WHILE \{condition\}
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \{commands\}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar WEND
\par \pard \li120\sb80\sl-240\slmult0\widctlpar This command completes a WHILE/WEND loop.  Use of WEND in nested loops does not allow for GOTO commands to labels outside of a loop.  To exit from a WHILE/WEND loop, use the EXIT LOOP command.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The commands within the WHILE and WEND commands will be executed only as long as the condition identified by \{condition\} results in a non-zero (TRUE) value.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard \li120\sb80\sl-240\slmult0\widctlpar See also: {\uldb REPEAT}{\v CMD_REPEAT}, {\uldb UNTIL}{\v CMD_UNTIL}, {\uldb EXIT}{\v CMD_EXIT}, {\uldb WHILE}{\v CMD_WHILE}, {\uldb FOR}{\v CMD_FOR}, {\uldb NEXT}{\v CMD_NEXT}, {\uldb GOTO}{\v CMD_GOTO}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} WHILE Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_WHILE}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X060b}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} WHILE}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !} EnableButton("b
tn_previous");EnableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} WHILE Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 WHILE \{condition\}
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 \{commands\}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar WEND
\par \pard \li120\sb80\sl-240\slmult0\widctlpar This command initiates a WHILE/WEND loop.  Use of WHILE in nested loops does not allow for GOTO commands to labels outside of a loop.  To exit from a WHILE/WEND loop, use the EXIT LOOP command.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar The commands within the WHILE and WEND commands will be executed only as long as the condition identified by \{condition\} results in a non-zero (TRUE) value.
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard \li120\sb80\sl-240\slmult0\widctlpar See also: {\uldb REPEAT}{\v CMD_REPEAT}, {\uldb UNTIL}{\v CMD_UNTIL}, {\uldb EXIT}{\v CMD_EXIT}, {\uldb WEND}{\v CMD_WEND}, {\uldb FOR}{\v CMD_FOR}, {\uldb NEXT}{\v CMD_NEXT}, {\uldb GOTO}{\v CMD_GOTO}
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par \pard\plain \s1\li120\sb280\sa120\sl-320\slmult0\widctlpar \b\f5\fs28\cf2 \page {\cs15\fs20\up6\super ${\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super $} XCOPY Command}} {\cs15\fs20\up6\super #{\footnote
\pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super #} CMD_XCOPY}} {\cs15\fs20\up6\super +{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super +} X061}} {\cs15\fs20\up6\super K
{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super K} XCOPY}} {\cs15\fs20\up6\super !{\footnote \pard\plain \s16\li120\sb80\sl-240\slmult0\widctlpar \f5\fs20 {\cs15\cf2\up6\super !}
 EnableButton("btn_previous");DisableButton("btn_next");EnableButton("btn_up");ChangeButtonBinding("btn_up", "JumpId(`sftshell.hlp',`COMMANDS')")}} XCOPY Command
\par \pard\plain \s26\li120\sl-240\slmult0\widctlpar \f5\fs20 XCOPY [source] [dest] [switches]
\par \pard \s26\li120\sl-240\slmult0\widctlpar Implements an equivalent of MS-DOS's 'XCOPY' command, but in background (as with other copy operations).  Creates any necessary directories before copying any files, to ensure that the paths are available.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard\plain \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \f5\fs20 PARAMETERS:
\par \tab [source]\tab \tab -\tab this is a valid path specification which may contain wildcard characters.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab [dest]\tab \tab -\tab this is a valid drive, dir, or drive:dir combination - if left off assumes current directory.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab [switches]\tab -\tab optional switches (see below).
\par SWITCHES:\tab /a\tab -\tab copies only source files that have the 'ARCHIVE' bit set.
\par \tab \tab /d:date - copy only files modified on or after a certain date.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /e\tab -\tab copies any subdirectories, even if empty.  Use in combination with '/S' (below).
\par \tab \tab /m\tab -\tab like '/a', above, except that archive bits in the source files are turned off after copying.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /p\tab -\tab prompts for each file name whether or not to copy.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab \tab \tab NOTE:  this prompting is done prior to placing the files into the COPY QUEUE, and not at the time they are actually copied!!!
\par \tab \tab /s\tab -\tab recursively copies files in sub-directories, creating new directories as required.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /v\tab -\tab verifies each file after copying.
\par \pard \s35\fi-1973\li2088\sl-240\slmult0\widctlpar\tx835\tx1555\tx1915\tx2088\tx2275\tx2995\tx3715 \tab \tab /w\tab -\tab Displays a 'warning' message prompting you to press <ENTER> to commence copying files.
\par \pard\plain \li120\sb80\sl-240\slmult0\widctlpar \f5\fs20
\par \pard \li120\sb80\sl-240\slmult0\widctlpar
\par }
