{\rtf1\ansi \deff0{\fonttbl{\f0\froman Tms Rmn;}{\f1\froman Symbol;}{\f2\fswiss Helv;}{\f3\fmodern Courier;}{\f4\fswiss Arial;}{\f5\fmodern Courier New;}{\f6\fmodern Courier 10cpi;}{\f7\fswiss MS Sans Serif;}{\f8\froman Courier PS;}
{\f9\fmodern Modern;}{\f10\froman Roman;}{\f11\fscript Script;}{\f12\fswiss System;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;}{\stylesheet{\s244\li120\sb80\sl-240 \f2\fs18\up6 \sbasedon0\snext0 footnote reference;}{\s245\li120\sb80\sl-240 \f2\fs20 \sbasedon0\snext0 footnote text;}{\s251\fi-245\li360\sb120\sa60\sl-240 \f2\fs20
\sbasedon253\snext251 heading 4;}{\s252\li120\sb120\sa60\sl-240 \f2\fs20 \snext0 heading 3;}{\s253\li120\sb120\sa60\sl-240 \b\f2\fs20 \snext0 heading 2;}{\s254\li120\sb280\sa120\sl240 \b\f4 \snext10 heading 1;}{\s255\li360\sb80\sl-240 \f2\fs20
\snext0 Normal Indent;}{\li120\sb80\sl-240 \f2\fs20 \snext0 Normal;}{\s2\fi-240\li600\sb60\sl-240 \f2\fs20 \snext2 Jli;}{\s3\li120\sb60\sl-240\keep\tx520\tx920\tx1320\tx1720\tx2120 \f3\fs16 \snext3 Ex;}{\s4\li120\sb160\sl-240 \f2\fs20 \snext13 Sa1;}{
\s5\fi-240\li360\sl-240\tx360 \f2\fs20 \snext6 Lb1;}{\s6\fi-240\li360\sb60\sl-240\tx360 \f2\fs20 \snext6 Lb2;}{\s7\li360\sb60\sl-240 \f2\fs20 \snext6 Lp1;}{\s8\li115\sb120\sa40\sl-240\brdrb\brsp20\brdrs \brdrbtw\brsp20\brdrs \b\f2\fs20 \snext9 Th;}{
\s9\li115\sb60\sl-240 \f2\fs20 \snext9 Tp;}{\s10\li120\sl-240 \f2\fs20 \snext0 Normal 2;}{\s11\li120\sb120\sa120 \f2\fs20 \snext0 bitmap;}{\s12\li120\sb120\sl-240 \f2\fs20 \snext13 Sa2;}{\s13\fi-240\li360\sb60\sl-240 \f2\fs20 \snext13 Jl;}{
\s14\li115\sb120\sa40\sl-240\brdrb\brsp20\brdrs \brdrbtw\brsp20\brdrs \f2\fs20 \sbasedon8\snext9 Th2;}{\s15\li115\sb120\sa40\sl-240\brdrb\brsp20\brdrs \brdrbtw\brsp20\brdrs \b\f2\fs16 \sbasedon8\snext9 Th3;}{\s16\li115\sb200\sl-240 \f2\fs20
\sbasedon0\snext0 Normal 3;}{\s17\fi-1800\li1915\sb120\sa40\sl-240\brdrb\brsp20\brdrs \brdrbtw\brsp20\brdrs \tx1915 \b\f2\fs20 \sbasedon0\snext18 Thh;}{\s18\fi-1800\li1915\sb60\sl-240\tx1915 \f2\fs20 \sbasedon0\snext18 Tph;}}{\info
{\author Bob Frazier}{\creatim\yr1993\mo3\dy5\hr18\min43}{\version1}{\edmins492}{\nofpages20}{\nofwords6480}{\nofchars36914}{\vern8368}}{\*\template C:\\WFW\\WHAT30.DOT}\sectd \linex0 \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4
{\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} Table of Contents}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 #} contents}} {\plain \f2\fs18\up6 +{\footnote
\pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 00}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} Contents}} {\fs28\cf2 "WinXRay" Help File - Table of Contents
\par }\pard\plain \li120\sb80\sl-240 \f2\fs20 {\uldb General Description
\par }{\v general}
\par {\plain \b\f4\cf2 Standard Functions}{\b\f4
\par }{\uldb Files}{\v files}
\par {\uldb Memory}{\v memory}
\par {\uldb Tasks}{\v tasks}
\par {\uldb IDT (Interrupt Descriptor Table)}{\v IDT}
\par {\uldb GDT (Global Descriptor Table)}{\v GDT}
\par {\uldb LDT (Local Descriptor Table)}{\v LDT}
\par
\par {\plain \b\f4\cf2 386 Enhanced Mode Functions}{\b\f4
\par }{\uldb VM - Virtual Machine Info}{\v VMMenu}
\par {\uldb Page Map}{\v pagemap}
\par
\par {\uldb Copyright Notice}{\v copyright}
\par {\uldb About Stewart-Frazier Tools, Inc.}{\v about_company}
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} Copyright Notice}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 #
} copyright}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 02}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} copyright}} {\plain \f2\fs18\up6 @{\footnote
\pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 @} Copyright Notice}} Copyright Notice
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 {\plain \f12 The program, }{\plain \b\f12 WINXRAY}{\plain \f12 , and this help file are \'a9
 1992-93 by Robert E. Frazier - all rights reserved.  These files may be freely distributed, at no cost above that of the media on which they are distributed, so long as they are distributed together and without any modifications.
\par }
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} About Stewart-Frazier Tools, Inc.}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240
\f2\fs20 {\fs18\up6 #} about_company}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 03}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K}
 About Stewart-Frazier Tools, Inc.}} {\plain \f2\fs18\up6 @{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 @} About the company}} About Stewart-Frazier Tools, Inc.
\par \pard\plain \s10\li120\sl-240 \f2\fs20 {\b Stewart-Frazier Tools, Inc.} is a software development company, co-founded by Robert E. Frazier and Danny D. Stewar
t, and is located in Del Mar, California.  Our company specializes in software analysis tools oriented towards companies engaged in manufacturing, using the Windows(tm) environment.  The software tools utilize a custom high-speed multi-threaded database e
ngine that helps improve productivity without excessive use of computer resources.
\par \pard \li720\sb80\sl-240 Stewart-Frazier Tools, Inc.
\par http://mrp3.com/
\par \pard \li90\sb80\sl-240
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} General Description}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {
\fs18\up6 #} general}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 01}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} GENERAL DESCRIPTION}}
 "WinXRay" General Description
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 This progra
m allows the user to view various system-level information about the MS-DOS and Windows environment, which includes OPEN FILES, TASKS, MEMORY USAGE, and various PROTECTED MODE system tables, such as the IDT, GDT, and LDT.  Additionally, for 386 Enhanced m
ode operation, a VM LIST and a map of the PAGING TABLES is available to let the user see how Virtual Machines and Virtual Memory are being managed by Windows.
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} List of Open Files}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {
\fs18\up6 #} files}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 04}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} FILES}} List of Open Files
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 This feature allows you to see which files are currently open.  The entries of the {\b System File Table }
(an internal MS-DOS structure) contain all of the files open for each Windows and MS-DOS program currently running.  The display in the listbox consists of several columns with the following headings:
\par \pard \li120\sb80\sl-240\tx810\tx1530
\par \pard \fi-2160\li2160\sb80\sl-240\tx720\tx1440 {\b File/Dev Name:}\tab
The drive letter and name of the open file.  The sub-directory (fully qualified path) information is not contained in the System File Table, so only the drive and file name is displayed.  For a character device,
only the device name appears in this column (character devices are "CON", "AUX", "PRN", etc.)
\par {\b Open Mode:}\tab \tab File open mode.  Valid modes are: "Rd" (Read), "Wr" (Write), and "R/W" (Both Read & Write access).
\par {\b Share Mode:}\tab \tab
File 'sharing' mode.  This only takes effect when SHARE.EXE or Network software is loaded.  Valid modes are:  "Comp" (Compatibility mode), "Excl" (Exclusive access), "NoWr" ('No Write Access' by other applications), "NoRd" ('No Read Access' by other appl
ications), "Shr" (Shared - other applications can read or write file)
\par {\b Machine ID:}\tab \tab
Current 'VM' (Virtual Machine) ID for program that is accessing the file.  Windows programs all run in the same 'VM'; non-Windows applications each have their own VM in 386 Enhanced mode.  The 'Windows VM' is usually 1; the 'SYSTEM VM' is usually 0.  All
 other 'VM's normally represent non-Windows applications.
\par {\b Owner PSP:}\tab \tab This is the 'DOS PSP' (Program Segment Prefix) of the file's owner, which is a REAL MODE SEGMENT VALUE.  The actual REAL MODE address of this PSP is 16 times the SEGMENT value.
\par {\b Cur File Pointer:}\tab Current file pointer position at which the next I/O action is to be performed.
\par {\b Cur File Length:}\tab Current file length.  This is the ACTUAL FILE SIZE, which may differ from the size indicated in the directory listing.
\par {\b Owner Task:}\tab \tab Task ID of file owner.  This is BLANK if no TASK ID exists for this PSP.  For NON-WINDOWS applications, this is the TASK ID for the 'WINOLDAP' instance that is controlling the NON-WINDOWS application.
\par {\b Owner Module:}\tab Module name
 of file owner.  NON-WINDOWS applications and files opened by WINDOWS may contain a string such as "* NON-WINDOWS *" or "*WINDOWS*".  If it is not possible to determine the owning module's name, as with an 'un-closed' file left open by an "Application Err
or" (or other fatal error) the string "* UNDEFINED *" will appear in this column.
\par \pard \li90\sb80\sl-240
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} Task List}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 #} tasks
}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 05}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} TASKS}} Task List
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 This provides a list of all running tasks in the system.  Each entry shows the {\b MODULE NAME}, {\b Task 'ID'}, {\b Instance 'ID'}, {\b Module 'ID'}, and whether or not it is a {\b 'non-Windows' application}.

\par
\par The MODULE NAME and Module 'ID' fields are unique for each program executing, and are normally the same for each 'instance' of a program.  Windows loads a program only once into memory, even though several 'instances' of this program may be running (as ev
idenced by multiple entries in this display with the same MODULE NAME or Module 'ID').  Each program 'instance', however, has it's own private data, memory allocation, and open file information.
\par The Task 'ID' and Instance 'ID' fields are unique for each 'instance' of a program, and uniquely identify a particular 'instance' of an application.  That is, if you had 5 copies of NOTEPAD running, each would share a common MODULE NAME and Module 'ID', b
ut have different Instance 'ID's and Task 'ID's.  The Instance 'ID' is the GLOBAL MEMORY HANDLE to the program's private 'default' data and (normally) its default stack area.  The Task 'ID' references other information specific to th
is task, such as allocated (Global) memory, open files, and various other system parameters; it is the selector for the 'TDB' structure (Task DataBase) containing all of the system parameters Windows needs to allow a program to run.
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} Memory Allocation Listing}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {
\fs18\up6 #} memory}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 06}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} MEMORY}} Memory Allocation Listing
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 The MEMORY ALLOCATION LISTING provides a summary of all GLOBAL memory resources allocated to the Windows 'VM', by module name and memory 'type' classification.  The grand total summary
at the end of the listing provides additional information of how Windows manages memory.  In 386 Enhanced mode, this includes Virtual and 'Linear' memory management, as well as memory allocated to the SYSTEM and NON-WINDOWS applications.
\par
\par The following is a brief summary of the various columns in the list:
\par
\par \pard \fi-2160\li2160\sb80\sl-240\tx2160 {\b\f4 MODULE NAME:}{\f4 \tab
This column contains the MODULE NAME associated with the sum of all memory allocated for the programs or the Dynamic Link Library that use this module name.  FONT resources and Device Drivers are Dynamic Link Libraries, so they also have an entry in the l
isting.
\par }{\b\f4 HANDLE:}{\f4 \tab
This is a unique value that represents the MODULE HANDLE associated with the name in the left column.  In actuality, it is a handle to a global memory block that contains information describing the executable binary file that contains the p
rogram, Dynamic Link Library, etc.
\par }{\b\f4 Code Segments:}{\f4 \tab
This is the sum of allocated storage for all CODE SEGMENTS owned by the module.  CODE SEGMENTS are the 'executable' portion of a program, and may not be written to.  Many code segments can therefore be marked as 'discardable', since they are never modifie
d, so that Windows may discard them when additional memory is needed elsewhere.
\par }{\b\f4 Data & Resource:}{\f4 \tab This is the sum of allocated storage for all DATA SEGMENTS and RESOURCES (read-only data which is dynamicall
y loaded from the executable file when needed; many resources are discardable).  This does not include PRIVATE read/write memory blocks allocated from the Global heap.
\par }{\b\f4 Other Memory:}{\f4 \tab
This is the sum of all memory which is neither a CODE SEGMENT, DATA SEGMENT nor a RESOURCE item.  This includes PRIVATE read/write memory blocks allocated from the Global heap, which the program or Dynamic Link Library may require at various times (based
on current operations and status).  Some of this memory may be discardable, but usually is not.
\par }{\b\f4 Total In Use:}{\f4 \tab This represents the total of the above 3 items, including both NON-DISCARDABLE and DISCARDABLE memory.
\par }{\b\f4 Discardable:}{\f4 \tab
This represents the sum of all memory associated with this MODULE that may be discarded (as long as it's not currently being accessed at the time) if the system requires additional memory and does not have enough free space available.  This capability all
ows Windows to run many large applications simultaneously, in which a large program only loads part of its code and data at a time, and automatically discards that which is not needed when Windows requires additional free space.
\par }\pard \li90\sb80\sl-240 {\f4
\par The summary at the end of the listing contains information regarding the overall use of memory.  For 386 Enhanced Mode, this becomes an in-depth report of memory usage. 'Virtual memory' refers to the 'swap file' (whether permanent or temporary) that Windo
ws uses to provide additional memory by 'swapping' portions of memory on and off of the disk when appropriate, and 'Linear memor
y' refers to normal (RAM) memory.  Certain calculations are performed which attempt to estimate the total amount of 'Linear' (RAM) memory, and 'Virtual' (swap file) memory that are being utilized at a given time.  The 'estimated' numbers are not exact, bu
t do provide a guidepost in determining how Windows is managing memory.  The remaining values are accurate, based on numbers directly provided by the Windows KERNEL.  Note that the 'Total Available Memory' value includes all discardable memory as 'availab
le for use.'
\par One of the more unique features in the 386 Enhanced Mode summary is the calculation of 'Non-Windows/System/Miscellaneous' memory in use.  This is derived from the total 'non-Discardable' memory in use, minus the total non-discardable memory in use by Wind
ows.  The resulting value is the total memory used by the operating system (which does not show up in the Windows 'VM' memory management) plus the memory used for NON-WINDOWS applications.
\par
\par }\pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} Descriptor Tables}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {
\fs18\up6 #} descriptor_tables}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 07}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} Descriptor Tables,LDT,GDT}}
{\plain \f2\fs18\up6 @{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 @} Descriptor Table Information}} Descriptor Tables
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 A {\b DESCRIPTOR TABLE}
 consists of an array of 8-byte structures that instruct the CPU of the START ADDRESS, selector type (Data, Code, or "special" types), maximum legal offset value (segment limit), 16-bit or 32-bit operation, privelege level, read/write/execute access, and
"expand" direction (data selectors only).  You will note that a range of values corresponding to each SELECTOR entry is listed.  This is because a SELECT
OR contains various bit flags that determine the 'Requested Privelege Level' for memory access.  For all practical purposes, this fact may be ignored when viewing the GDT or LDT listings (a description of how this works is beyond the scope of this help fi
le).  Additionally, you might note that selectors in the GDT end in 0 through 3, or 8 through B, and that selectors in the LDT end in 4 through 7, or C through F.  This is due to bit 3 in the selector, which is 0 for the GDT selectors, and 1 for the LDT s
electors.  The CPU uses this bit to determine which table (GDT or LDT) to use in determining the segment attributes.
\par
\par The {\b Linear Address} colum
n contains the 'linear' address (not necessarily 'physical RAM address' - in 386 Enhanced Mode paging can re-map memory so that it does not appear in the same position in which it is physically located, especially with regards to VIRTUAL memory) that corr
esponds to the start (or end) of this memory block.  16-bit memory blocks cannot exceed 64k in length, though multiple "consecutive" selectors may be used to process blocks of memory in excess of 64k bytes.  32-bit memory blocks may be as large as all of
memory, and in fact Windows allocates several selectors in this manner, using a linear address of 0 and a Segment Limit of FFFFFFFFH.
\par The {\b Segment Limit}
 column contains the maximum 'OFFSET' value allowed for this SELECTOR.  This value is a maximum of FFFFH for 16-bit selectors, and FFFFFFFFH for 32-bit selectors.  Values not within these ranges correspond to unused or 'erroneous' selectors, which would c
ause General Protection Faults if accessed.
\par The {\b DPL/Flag & Sel Type} column indicates the type of selector present.  This is usually CODE or DATA, with a 'privelege level' (Descriptor Privilege Level, or 'DPL') of 3.  The 'priority' determines which
selectors may be accessed by a particular program, and the
privelege level in which a code selector executes.  Since user applications run in "ring 3" (DPL 3) within Windows, only those selectors with DPL 3 may be accessed.  This is the 'most restrictive' privilege level, and helps Windows prevent a "wild" applic
ation from bringing the entire system down by rest
ricting access to certain areas of memory.  The other flags determine how a particular selector may be accessed.  CODE selectors (a 'C' in the 2nd column following the '/') may be executed as programs, but may not be written to.  On the other hand, DATA s
electors (a 'D' in the 2nd column following the '/') may be read from (and normally written to as well), but cannot be executed as programs.  Other selector types are used for special purposes by the operating system.  These will be discussed in detail la
ter in this section.
\par Additionally, the {\b DPL/Flag & Sel Type} column may contain a '{\b !}' in the last character of the column.  A '{\b !}' indicates that the '{\b P}' (present) bit is a 0, and accessing this selector (by loading it into a segment register) will cause a '{
\b NOT PRESENT}' exception (int 0BH, or 0CH for SS) to occur.  'Protected Mode' Windows uses the '{\b P}' bit to indicate discarded code segments, thereby forcing the segment to be loaded whenever a program attempts to execute code in a discarded segment
 ('Real Mode' Windows uses a different (less efficient) method to accomplish the same process).
\par
\par The {\b 16/32 Bit & Granularity} column indicates whether a selector is assigned for 16 bit access or 32 bit access, and what 'Granularity' is used in determining the {\b Segment Limit}
.  "Byte" granularity allows a segment limit of no more than FFFFFH, though it also means the KERNEL can allocate memory "down to the byte" if needed, leaving fewer "holes" in memory.  Using "Page" granularity allows a segment limit of FFFFFFFFH, but rest
ricts memory allocation to 1000H (4096) byte {\b PAGES}, and the start address MUST begin on an 'even' page boundary.  This most often is used with 'FLAT MODEL' selectors, the start addresses of which begin at 00000000H, with a segment limit of FFFFFFFFH.

\par
\par {\b Selector Types}
\par The Selector Type is indicated by a somewhat 'cryptic' display, which is used to indicate the various 'bit flags' without using excessive horizontal width in the display.  The first item in the Selector Type (as displayed) is the PRIVILEGE LEVEL, or DPL.
 This may be any value between 0 and 3, but  is usually 3 (and occasionally 0).  This is followed by a {\b "/"}, and a single character indicating whether the segment is {\b CODE} ('C'), {\b DATA} ('D'), or a {\b SYSTEM}
 ('S') selector.  The remaining characters are specific to the selector type being referenced, and are described below:
\par
\par {\b CODE SELECTORS:}  {\b #/C}{\ul CRA}
\par '{\ul C}' represents the 'Conforming' bit; it is either the letter 'C', or a blank.  If this is a 'C', the 'Conforming' bit is set in the selector.  This indicates to the CPU that whenever program code in this selector
has been called from within a code selector that has a 'higher DPL' (i.e. more restrictive), the CPU should use the privilege level of the calling program.  If this bit is not set, code in a selector in which the DPL does not match the 'Current' privilege
 level of the calling program could not be accessed (a General Protection Fault would occur).
\par '{\ul R}' represents the 'Readable' bit; it is either the letter 'R', or the letter 'X' (for EXECUTE ONLY).  If this is an 'R', the 'Readable' bit is set, allowing this
 code selector to be read as data.  Code segments can never be written to, however.  If this is an 'X', the code segment cannot be read from as data, but may still be executed as program code.  Any attempt to read from memory (as data) using this selector
 results in a General Protection Fault.
\par '{\ul A}' represents the 'Accessed' bit; it is either the letter 'A' or a blank.  If this is an 'A', the segment has been accessed at least once since this bit was last 'cleared' by the operating system.  This bit may be u
sed by a Protected Mode operating system to determine which code segments are not being utilized, and thus which code segments may be candidates for "discarding."
\par
\par {\b DATA SELECTORS:}  {\b #/D}{\ul EWA}
\par \pard \li120\sl-240 '{\ul E}
' represents the 'Expand Down' bit; it is either the letter 'E' or a blank.  If this is an 'E', the segment "Expands Down" instead of up.  Normally a segment begins at an offset of zero, and allows offsets up to (and including) the segment limit.  If the
segment is "Expand Down", it begins at an offset of FFFFH (for 16-bit selectors), or FFFFFFFFH (for 32-bit selectors), and allows offsets down to (but not including) the segment limit.
\par '{\ul W}
' represents the 'Writable' bit; it is either the letter 'W', or the letter 'R' (for READ ONLY).  If this is a 'W', the segment may be written to using this selector.  Otherwise, if it's an 'R', an attempt to write to memory using this selector will resul
t in a General Protection Fault.
\par \pard \li120\sb80\sl-240 '{\ul A}' again represents the 'Accessed' bit; it is either the letter 'A' or a blank.  If this is an 'A'
, the segment has been accessed at least once since this bit was last 'cleared' by the operating system.  This bit may be used by a Protected Mode operating system to determine which code segments are not being utilized, and thus which data segments may b
e candidates for "discarding" (if appropriate).
\par
\par \pard\plain \s10\li120\sl-240 \f2\fs20 {\b OTHER (SYSTEM) SELECTORS: #/}xxxxxx
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 The contents of 'xxxxx' represents the various LEGAL descriptor values as a text string, indicating the type of 'System' selector, or a BINARY value ('0's and '1's only) indicati
ng the flag bits in order from 'Most Significant Bit' to 'Least Significant Bit.'  At this time, the only 'illegal
' combinations are '0000' and '1000', which are not allowed by the 80386 processor.  As such, they represent 'UNUSED' selectors.  For the remaining selector types, the 1st character is either a '2' or a '3', indicating whether or not the 'Most Significant
 Bit' is set ('3') or cleared ('2').  The '3' represents selectors that are specifically associated with the 80386 (and later) processors; the
'2' represents selectors that are '80286 compatible.'  As a result, the values '3LDT' and '3TASK', though not valid, actually represent the values for '2LDT' and '2TASK' with the Most Significant Bit set (a binary value of '1010' and '1101', respectively)
.
\par Following is a list of valid 'System' selector types and a brief description of each:
\par '{\b LDT}' - these are LOCAL DESCRIPTOR TABLE selectors, and are only valid if they exist within the GLOBAL DESCRIPTOR TABLE.  Only a single LDT may be 'active' at any giv
en moment.  Windows applications share the same LDT in Windows 3.0 and 3.1; in 386 Enhanced mode, protected mode applications each get their own LDT.
\par '{\b TSS16}', '{\b TSS32}
' - these are TASK STATE SELECTORS, and contain information that the CPU needs to switch between the various 'privilege levels' (among other things), plus information regarding I/O privileges of the task, information about the previous task (following a t
ask switch - see 'TASK', below), program status at interrupt time, and so forth.  A valid 'TSS' selector {\b MUST} reside in the GDT.  The 'ACTIVE' TSS will have a "{\b *}" preceding it, as in "*TSS32
".  A 'TSS' must be active at all times whenever multiple privilege
 levels ("rings") are used.  This especially includes 386 Enhanced Mode, since MS-DOS (non-Windows) applications run in Virtual 8086 mode, and therefore run in "ring 3" (as pre-determined by the 80386 CPU).
\par '{\b INT16}', '{\b INT32}
' - these are known as 'INTERRUPT GATES', which is used to transfer control to a specific code selector and offset as the result of an 'interrupt' (i.e. a wire on the CPU receives an appropriate electronic signal, or the 'INT' instruction is invoked withi
n a program).  Normally an INTERRUPT
 GATE only exists within the Interrupt Descriptor Table (IDT), and normally refers to a GDT selector to ensure that the selector address is independent of which LDT is currently 'active' at interrupt time.  An INTERRUPT GATE clears the 'I' flag automatica
lly when it is invoked, which prevents additional interrupts from occurring until an IRET instruction or STI instruction is executed.
\par '{\b TRAP16}','{\b TRAP32}' - these are known as 'TRAP GATES', which behave similarly to an INTERRUPT GATE.  They are used to re-direc
t program execution to a particular offset within a particular code segment, and can also be used to 'transcend' privilege levels from a more restrictive level to a less restrictive level, if it has been assign a code selector with a 'lower' DPL.  Normall
y a 'TRAP GATE' is only found in the Interrupt Descriptor Table (IDT), and normally refers to a GDT selector to ensure that the selector address is independent of which LDT is currently 'active' at interrupt time.  A TRAP GATE does not clear the 'I' flag
(unlike an INTERRUPT GATE), which makes it ideal for software interrupts invoked by the 'INT xx' instruction.
\par '{\b CALL16}', '{\b CALL32}
' - these are known as 'CALL GATES', which are functionally similar to INTERRUPT and TRAP gates.  In a Protected Mode system, it is often necessary to perform operating system functions that normally a "user application" should not be able to do (independ
ent of the operating system), such as writing to a disk drive.  Therefore, a 'CALL GATE' can be used to allow non-priveleged programs
 to execute priveleged code within the correct "ring"; that is, if I/O operations require "ring 0" (least restrictive privelege level), and user applications run in "ring 3" (as in Windows 3.1), then a call gate can be used to transfer program control to
an operating system function that provides the necessary security checks and functionality.  Note that the call gate's DPL must be accessible by the calling process.
By forcing such privileged operations to pass through a 'CALL GATE' the operating system can help prevent a single application error from bringing down the entire s
ystem.  CALL GATES normally do not exist in the IDT, but may exist in either the GDT or LDT.
\par '{\b TASK}
' - this is known as a 'TASK GATE', and allow a program to switch 'TASKS' by calling an appropriate 'TASK GATE' that refers to the new 'TSS'.  This is performed using a FAR CALL with the task gate's selector as the selector of the 'called' function.  The
new TSS stores information about the old TSS, so that when an 'IRET' instruction occurs, the new task ends and the old one is restored.  A TASK GATE can be i
n ANY of the 3 descriptor tables (IDT, GDT, LDT), but the TSS to which it refers MUST reside in the GDT.
\par
\par {\b Structures for Code and Data Segment Descriptors
\par
\par }Code and data segment descriptors are 8 byte structures, stored in the following format in the appropriate descriptor table:
\par {\f3 struct _code_data_descriptor \{
\par    unsigned short low_limit, low_base;
\par    unsigned char mid_base;
\par    unsigned a_bit:1, rw_bit:1, ce_bit:1, code_or_data:1,
\par             code_data_flag:1, dpl_bits:2, p_bit:1;
\par    unsigned high_limit:4, avl:1, zero:1, use32:1,
\par             granularity:1;
\par    unsigned char high_base;
\par \};
\par }The base address is calculated by the following:
\par    d.low_base + d.mid_base * 0x10000L + d.high_base * 0x1000000L;
\par For code selectors, the 'code_or_data' flag is 1; for data, it is zero.
\par The 'code_data_flag' is always a 1 to indicate that it's a code or data selector.
\par The 'a_bit' is set by the CPU whenever the segment is accessed.
\par The 'rw_bit' is set for readable CODE and writable DATA; it is cleared otherwise.
\par The 'ce_bit' is set for CONFORMING CODE or EXPAND DOWN DATA; it is cleared otherwise.
\par The 'avl' flag is 'available for use' and does not affect the CPU.
\par The 'zero' flag is always a zero.
\par The 'use32' flag indicates a 32-bit selector (if set), or a 16-bit selector (if clear).  For code selectors it affects the address mode of the code being executed.  For data selectors, it only directly affects 'expand down' segments (which use a starting
limit of 0ffffffffH if this bit is set, or 0ffffH if it is clear).
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} IDT - Interrupt Descriptor Table}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240
\f2\fs20 {\fs18\up6 #} IDT}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 08}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} IDT}}
 IDT - Interrupt Descriptor Table
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 The INTERRUPT DESCR
IPTOR TABLE maps the PROTECTED MODE interrupts to specific program addresses (such as those within the operating system, device driver, or a user application) in the same manner that the Interrupt Vector Table (memory addresses 0:0000H through 0:03FFH in
REAL MODE) maps the REAL MODE interrupts to specific program addresses.  Each entry in the IDT consists of an 'Interrupt Gate', which is essentially a protected mode SELECTOR (must be a GDT CODE SELECTOR) and an offset within that selector for the appropr
ia
te program address.  There are 256 interrupts, labelled 00H through FFH; each interrupt has been assigned according to both HARDWARE (80x86 definitions, which cannot be changed, plus dedicated interrupts for hardware devices) and SOFTWARE (BIOS, MS-DOS, a
pplications).  Some of the HARDWARE interrupts may be configurable by switch selections, CMOS settings, or other means.  Other HARDWARE and SOFTWARE interrupts are automatically 're-mapped' to avoid conflict with 80x86 interrupts (one example is the TIMER
 i
nterrupt, which occurs on INT 8H; this conflicts with Protected Mode Exception #8, which uses the interrupt vector for INT 8H.  Therefore, a Protected Mode system must re-map INT 8H using special circuitry present in the AT compatible systems to prevent c
onflicts between them).
\par
\par Because DPMI and the IDT table usually reflect different settings for the same interrupt vector (due to software "re-mapping" of interrupt vectors, "virtualization" of interrupts, and so forth) the IDT listing displays the DPMI PR
OTECTED MODE VECTOR and DPMI REAL MODE VECTOR (emulated by the Protected Mode KERNEL), and the actual IDT VECTOR (used by the CPU).
\par
\par See also:  {\uldb Descriptor Tables}{\v descriptor_tables
\par }
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} GDT - Global Descriptor Table}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240
\f2\fs20 {\fs18\up6 #} GDT}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 09}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} GDT}} GDT - Global Descriptor Table

\par \pard\plain \li120\sb80\sl-240 \f2\fs20
The GLOBAL DESCRIPTOR TABLE is a PROTECTED MODE structure that determines what areas of memory a particular SELECTOR VALUE accesses.  In PROTECTED MODE, the old-style 'segmented memory' model (used by REAL MODE) is modified so that a
 SELECTOR value (used in the same manner a MEMORY SEGMENT is used in REAL MODE) becomes an index to either the GLOBAL or LOCAL descriptor table.  The corresponding entry in the table then determines where the memory block is located, and not the value of
the SELECTOR itself (unlike REAL MODE, in which a SEGMENT represents an absolute block of memory, 16 bytes in length; this results in a maximum addressable area of 1Mb, and the 640k limit for MS-DOS programs).  GLOBAL DESCRIPTORS are common for {\b all}
 protecte
d mode programs running in all Virtual Machines ('VM's), including NON-Windows applications that run in PROTECTED MODE via DPMI (or other) protected mode interface.  Interrupt vectors, 'TASK TABLE' and 'LOCAL DESCRIPTOR TABLE' selectors must reside in the
 Global Descriptor Table.  You can only have 1 Global Descriptor Table in a PROTECTED MODE system.
\par
\par See also:  {\uldb Descriptor Tables}{\v descriptor_tables
\par }
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} LDT - Local Descriptor Table}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20
{\fs18\up6 #} LDT}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 10}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} LDT}} LDT - Local Descriptor Table
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 The
LOCAL DESCRIPTOR TABLE is a PROTECTED MODE structure that determines what areas of memory a particular SELECTOR VALUE accesses.  In PROTECTED MODE, the old-style 'segmented memory' model (used by REAL MODE) is modified so that a SELECTOR value (used in th
e same manner a MEMORY SEGMENT is used in REAL MODE) becomes an index to either the GLOBAL or LOCAL descriptor table.  The corresponding entry in the table then determines where the memory block is located, and not the value of the SELECTOR itself (unlike
 R
EAL MODE, in which a SEGMENT represents an absolute block of memory, 16 bytes in length; this results in a maximum addressable area of 1Mb, and the 640k limit for MS-DOS programs).  LOCAL DESCRIPTORS may be 'local' to a particular application or 'VM' (dep
ending upon how the operating system is designed).  You may have more than 1 Local Descriptor Table in a PROTECTED MODE system; however, only 1 may be "active" at any particular time.
\par
\par In Windows release 3.0 and 3.1, all Windows applications share a commo
n 'LDT'.  Protected Mode 'non-Windows' applications each receive their own LDT in 386 Enhanced mode.  A Local Descriptor Table's selector must be allocated from the Global Descriptor Table before it can be used by a protected mode application.
\par
\par See also:  {\uldb Descriptor Tables
\par }{\v descriptor_tables
\par }
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} VM - Virtual Machine}} {\plain \f2\fs18\up6 #{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {
\fs18\up6 #} VMMenu}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 11}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} VM}} {\plain \f2\fs18\up6 @{\footnote
\pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 @} Virtual Machine Listing}} VM - Virtual Machine
\par \pard\plain \s10\li120\sl-240 \f2\fs20
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 A  VIRTUAL MACHINE is, essentially, a separate computer operating system and application that shares the s
ame hardware platform with other applications, yet has entirely separate memory and other resource allocations.  Windows in 386 Enhanced mode (using a 80386 or higher CPU) has the ability to create VIRTUAL ADDRESS SPACES for 'Real Mode' (DOS) applications
, in which the actual memory addresses are "re-directed" (using hardware inside the CPU) to memory within the PROT
ECTED MODE environment used by Windows.  All Windows applications run within a single Virtual Machine (usually VM #1); other Virtual Machines are created (as necessary) to run MS-DOS (Real Mode or Protected Mode) applications.
\par Windows uses a SCHEDULER to pre-emptively share CPU time between the various Virtual Machines.  If a VM is able to run in BACKGROUND, Windows will schedule 'time slices' to it in proportion to its PRIORITY (selected using the 'PIF' editor and CONTROL PANE
L application) with respect to the FOREGROUND application (the one currently visible).   Additionally, Windows may SWAP blocks of memory (called 'PAGES') to and from the SWAP FILE as part of its Virtual Memory  system (see {\uldb Page Map}{\v pagemap}
) when a Virtual Machine is not 'active' (either in FOREGROUND or BACKGROUND).  An application's PIF file (or Windows settings via CONTROL PANEL) determines whether or not any other application can receive time slices while it is in the foreground by sett
ing or clearing the 'EXCLUSIVE' flag.
\par
\par
\par {\plain \b\f4\cf2 Virtual Machine List
\par }The following is a list of the columns displayed for each Virtual Machine, and a brief description of each:
\par
\par {\b\ul First Row Information}
\par \pard \fi-2045\li2160\sb86\sl-240 {\b VM #(ID)}:\tab This column contains the 'Virtual Machine' ID.  The Windows' Virtual Machine (VM) is usually '1'.
\par {\b Ctrl Blk Address:}\tab This is the Linear Address of the 'Control Block' (an internal structure) which contains various flags specific to this VM.  This is also the '{\b VM Handle}'.
\par {\b High Lin Address:}\tab This is the 'High Linear Address' at which the VM's memory space is mapped.  Windows must re-map 'low' memory addresses, depending on which VM is running.  Each VM needs its own memory spaces mapped within the 1st Megabyt
e whenever it executes. The High Linear Address always maps to the memory space corresponding to '0000:0000' for the specified VM, no matter which VM is currently active.
\par {\b Client Pointer:}\tab
This is the Linear Address of the 'Client' area, which stores register values during hardware interrupts, exceptions, and other events that require processing by the various Virtual Device Drivers.  It is the linear address passed in the 'EBP' register wh
enever a Virtual Device Driver 'hooks' an interrupt (Virtual Device Drivers usually have a '.386' extension).
\par {\b EMS Range:}\tab
This is the Minimum and Maximum allocation for EMS (Expanded Memory) to a virtual machine (HEXADECIMAL VALUES).  The 'Minimum' amount is the amount reserved by Windows for EMS allocation to this VM.  The 'Maximum' amount is the high limit of EMS that this
 VM can allocate.  If an MS-DOS application seems to use too much memory, it may be that EMS is being allocated to it unnecessary.  These values are assigned using the 'PIF' editor application to create or edit a '.PIF' file for the MS-DOS program.
\par {\b XMS Range:\tab }
This is the Minimum and Maximum allocation for XMS (Extended Memory) to a virtual machine (HEXADECIMAL VALUES).  The 'Minimum' amount is the amount reserved by Windows for XMS allocation to this VM.  The 'Maximum' amount is the high limit of XMS that this
 VM can allocate.  If an MS-DOS application  seems to use to much memory, it may be that XMS is being allocated to it unnecessary.  These values are assigned using the 'PIF' editor application to create or edit a '.PIF' file for the MS-DOS program.
\par {\b HMA use:}\tab
If the application is able to use the HMA, this flag is "Y"; otherwise, it is "N".  The 'HMA' is the 1st 64k-byte memory block above the 1Meg boundary (Linear address 00100000H through 0010FFEFH), which is available in REAL MODE due to a 'hardware quirk'
in the design of IBM Compatible machines.  MS-DOS 5 and later can load the MS-DOS code into this memory area, making more 'low' memory available for MS-DOS applications.  Other applications (specifi
cally written to do so) may also use this memory area.  This flag determines whether or not it is made available to applications.
\par {\b Priority FG(BG):}\tab
This is the Foreground and Background priorities as specified by either the Windows Control Panel (386 Enhanced Mode section) or the application's 'PIF' file (as appropriate).  The Foreground priority is used by the 'Time Slice' Scheduler whenever the app
lication has the primary focus (i.e. the FOREGROUND).  The Background priority is used whenever the applicati
on is in the BACKGROUND and is able to receive time slices (i.e. BACKGROUND operation is enabled, and the FOREGROUND application is not running 'exclusive').  The priorities of the various Virtual Machines are weighed against one another and the appropria
te number of time slices scheduled to each.
\par {\b CPU Pct:}\tab This is the calculated percent of CPU time that is normally scheduled to the specified Virtual Machine.  This is the resulting value calculated by the 'Time Slice' Scheduler that is used to issue 'time slices' to each Virtual Machine.

\par {\b Flags:}\tab This represents a select group of 'flag bits' that determine how a Virtual Machine runs within the Windows environment.  Below is a list of each flag, with a brief description of each:
\par \pard \fi-360\li2520\sb86\sl-240 {\b X}\tab Exclusive operation in FOREGROUND
\par {\b B}\tab Background operation is allowed.
\par {\b H}\tab High priority background - exclusive FOREGROUND VM's do not prevent time slices from being scheduled to this VM!  (Internal)
\par {\b I}\tab 'Idle' task - this VM is 'giving up' time slices, most likely due to a 'wait for input' condition.
\par {\b P}\tab PROTECTED MODE application!  This is either the Windows VM, or a non-Windows VM running a Protected Mode DOS application (using DPMI, VCPI or other protected mode DOS interface).
\par {\b W}\tab 'Windowed' application - this VM's application runs on the Windows desktop.  See also 'F' (below).  'F' and 'W' are mutually exclusive.
\par {\b F}\tab 'Full Screen' application - this VM's application runs in FULL SCREEN mode.  See also 'W' (above).  'F' and 'W' are mutually exclusive.
\par {\b K}\tab This VM may be 'activated' using a 'HOT KEY'.
\par {\b L}\tab 'Locked' VM.  Part (or all) of the memory allocated to this VM is LOCKED and remains 'in RAM' at all times.
\par {\b C}\tab Close window when VM's application ends.  See also 'N' (below).  'C' and 'N' are mutually exclusive.
\par {\b N}\tab
Do *NOT* close window when VM's application ends.  MS-DOS applications running in FULL SCREEN mode will be converted to windows on the desktop.  The VM window must then be closed manually to remove it from the desktop.  This allows viewing the final scree
n output after the application ends.  See also 'C' (above).  'C' and 'N' are mutually exclusive.
\par \pard \li115\sb86\sl-240
\par {\b\ul Second Row Information}
\par \pard \fi-2045\li2160\sb86\sl-240 {\b CPU TIME:}\tab This is the total amount of CPU time accumulated by this VM since it was created.
\par {\b Allocated Pages:}\tab The first number represents the total number of V86 pages currently allocated to the VM.  The number in parentheses represents the total number of V86 pages that are currently 'mapped in'.{\b
\par }\pard \li115\sb86\sl-240
\par {\b\ul Third Row Information}
\par \pard \fi-2045\li2160\sb86\sl-240 {\b Application Name:}\tab This is the name of the program that is currently active in thi
s VM.  This value is obtained by reading the last 8 bytes of the MCB for the currently actrive PSP in this VM, and is only available for MS-DOS versions 4.0 and later.  For the SYSTEM VM, this is always displayed as "{\b *WINDOWS*}".{\b
\par }\pard \li115\sb86\sl-240
\par
\par \pard\plain \s254\li120\sb280\sa120\sl240 \b\f4 \page {\plain \f2\fs18\up6 ${\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 $} Page Map - 386 Enhanced Mode Memory Management}} {\plain \f2\fs18\up6 #{\footnote \pard\plain
\s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 #} pagemap}} {\plain \f2\fs18\up6 +{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 +} 12}} {\plain \f2\fs18\up6 K{\footnote \pard\plain \s245\li120\sb80\sl-240 \f2\fs20 {\fs18\up6 K} PageMap}}
 Page Map - 386 Enhanced Mode Memory Management
\par \pard\plain \s10\li120\sl-240 \f2\fs20
\par \pard\plain \li120\sb80\sl-240 \f2\fs20 (This is currently 'Under Construction', so no help is (yet) available).
\par
\par }
