{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fnil MS Sans Serif;}{\f1\fnil\fcharset2 Symbol;}{\f2\fswiss\fprq2 System;}{\f3\fnil Times New Roman;}{\f4\fswiss\fprq2 Arial;}{\f5\fnil Symbol;}}
{\colortbl\red0\green0\blue0;}
\deflang1033\pard\ri960\qc\plain\f4\fs40\b SFTShell User's Guide
\par \pard\ri960\plain\f4\fs30 
\par \plain\f4\fs20 Thank you for purchasing our SFTShell\plain\f5\fs20 \'d4\plain\f4\fs20  application!   We at S.F.T. Inc. hope that you will benefit from its many features, in both convenience and productivity, and that you will find it to be one of the more often used applications on your computer system.
\par 
\par This document contains some basic information about SFTShell and its primary features.  More detailed information can be found in the accompanying Windows\plain\f5\fs20 \'d4\plain\f4\fs20  help file, and through the on-line help that is built into SFTShell.  Pressing F1 at any time will get you a list of commands and a short message describing how to get additional help.  For examples of "batch programs" that take advantage of SFTShell's batch language extensions, there are a number of sample applications that were included with SFTShell during the install process.  These programs are also included in the Windows help file, and they may be modified as you see fit, and portions of them may be included in your own applications.
\par 
\par \plain\f4\fs30\b\ul Getting Started\plain\f4\fs30 
\par \plain\f4\fs20 To install SFTShell on your system, you need to run the SETUP program on the program diskette.  This program actually runs SFTShell from the diskette, and executes a special batch program to copy the files to your hard drive, then optionally create a 'Program Manager' program group or 'Explorer' folder (Windows '95).  Within the program directory for SFTShell you will find the following files:
\par 
\par SFTSHELL.EXE\tab Main program file
\par SFTSH32X.EXE\tab 32-bit executable for Windows '95, NT; assists running 32-bit and DOS programs
\par SFTSHELL.HLP\tab Windows 'WINHELP' help file
\par SAMPLE PROGRAMS\tab Several ".BAT" files containing sample code for SFTShell.  These are:
\par ALARM.BAT\tab An 'Alarm Clock' sample application
\par CALCULAT.BAT\tab A simple calculator appllication that uses direct screen printing
\par CONTROLR.BAT\tab A demonstration of controlling an appliction using SFTShell.
\par DIRCOMP.BAT\tab A program to compare directory contents for file differences
\par MYDIR.BAT\tab A program to display a custom directory listing
\par ODBCDEMO.BAT\tab A sample ODBC application that displays database and table information.
\par WININFO.BAT\tab An application that will list windows for a particular task
\par 
\par 
\par \plain\f4\fs30\b\ul Basic Features\plain\f4\fs30 
\par \plain\f4\fs20 SFTShell is primarily a command line interpeter for Windows, much the same way that COMMAND.COM is a command line interpreter for MS-DOS.  SFTShell supports most of the standard MS-DOS commands internally, and in much the same manner as COMMAND.COM, with a few exceptions.  As a general rule, those commands that are 'MS-DOS specific' may not function at all within the Windows environment, and so they have been either 'trapped', excluded, or modified to fit within the Windows environment (such as the 'MEM' command).  Additionally, the manner in which programs are executed has changed.  All programs are "launched" by default, and console applications (including both 32-bit and MS-DOS applications) will write output to their own windows, and not to the SFTShell display area.  Additionally, these programs run concurrently with SFTShell, or "asynchronously"; in other words, SFTShell will not wait for a program to finish before it is ready to execute the next command or batch instruction.  If you do wish to wait for a program to finish before continuing, you can use the 'CALL' or 'START' commands (see on-line help or the Windows help file for more information on these two commands).  
\par 
\par In addition, with SFTShell you can execute a file with a registered extension as though it were a program, and SFTShell will call the appropriate program for you to open the file as a document.  As an example, typing "SFTSHELL.WRI" at the command prompt will open this file, using either WRITE or WORDPAD (depending upon your Windows version) to view the file.  For this to work you must include the file's extension (program extensions such as ".EXE" do not need to be specified).  For any file that does not have a path name specified, SFTShell will search for it using the 'PATH' statement in the following order:
\par 
\par \pard\li360\ri960\fi-360{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'b7}}\plain\f4\fs20 {\pntext\f1\'b7\tab}The current drive/directory
\par {\pntext\f1\'b7\tab}The SFTShell program directory
\par {\pntext\f1\'b7\tab}The WINDOWS directory
\par {\pntext\f1\'b7\tab}The Windows 'SYSTEM' directory
\par {\pntext\f1\'b7\tab}Each drive and directory listed in the PATH statement
\par {\pntext\f1\'b7\tab}The REGISTRY entries corresponding to "APPLICATION.document type..." when 'APPLICATION' was entered on the command line without an extension.  An example under Windows '95 would be WORDPAD, which has an entry 'Wordpad.Document.1' in the registry.  Some applications such as Excel and Word for Windows have more complicated entries; in such cases, SFTShell uses the OLE 2.0 "CLSID" to determine the correct program.
\par {\pntext\f1\'b7\tab}Any other location supported by the Windows 'OpenFile' API function, such as mapped-in network drives.
\par \pard\ri960\plain\f4\fs20 
\par In addition, applications with the same name, but different extensions, are chosen by the following priority:
\par 
\par \pard\li360\ri960\fi-360{\*\pn\pnlvlblt\pnf1\pnindent360{\pntxtb\'b7}}\plain\f4\fs20 {\pntext\f1\'b7\tab}Windows ".EXE" file (including 32-bit console applications, when supported by the operating system)
\par {\pntext\f1\'b7\tab}Windows ".PIF" file
\par {\pntext\f1\'b7\tab}Batch ".BAT" file
\par {\pntext\f1\'b7\tab}Non-Windows ".COM" file
\par {\pntext\f1\'b7\tab}Non-Windos ".EXE" file
\par \pard\ri960\plain\f4\fs20 
\par Therefore, if the files "MYPROG.BAT", "MYPROG.EXE", and "MYPROG.COM" all exist in the same directory, "MYPROG.EXE" will be run if it's a Windows application, and "MYPROG.BAT" will be run if "MYPROG.EXE" is a non-windows application.  And, if "PROGRAM.COM" and "PROGRAM.EXE" are in the same directory, "PROGRAM.EXE" will be run if it is a Windows application; otherwise, "PROGRAM.COM" will be run.
\par 
\par \plain\f4\fs30\b\ul Toolbar Buttons\plain\f4\fs30 
\par \plain\f4\fs20 To improve productivity,  SFTShell has a number of toolbar buttons available for certain operations.  The 'document' button allows you to use the Windows 'File Open' dialog box to chose a file to be executed as though the name were typed in from the command line.  In many ways, it's the "best of both worlds" between the command line interface and the graphical user interface.  In addition, you can also change drives and directories using the 'folder' button.  It provides a hierarchical list of directories, similar to what you see in the 'File Open' dialog box, from which you can chose a drive and directory.  Additionally, the 'Print' button also provides a 'File Open' dialog box, but invokes the 'Print' command instead of executing the file.  If at any time you do not wish to view the tool bar, you can disable it by 'un-checking' the 'View Toolbar' menu item.  And, all of the features that are enabled from the toolbar can also be invoked using the menu.
\par 
\par In addition to the 3 file-oriented buttons, there are 4 buttons dedicated to the clipboard, 1 button that opens an "instant batch program" edit dialog box, a button that opens the font selection dialog box, a button that opens the 'Queue Manager' dialog box, and a button that opens the Windows help file for SFTShell.  The clipboard buttons allow you to quickly copy the entire screen contents (as text) to the clipboard, copy the command buffer to the clipboard, paste the clipboard contents into the command buffer (to execute as a 'memory batch file'), and erase the clipboard.  The "instant batch program" edit dialog box allows you to enter a multi-line batch program that executes within memory.  Often there is a need for the ability to set up a progrm loop, which cannot be done from the command line.  The 'instant batch program' feature allows you to create a short program that takes advantage of 'program only' features (such as loops and structured 'IF' statements) without requiring you to use an editor (such as NOTEPAD) to create a batch file, then save the file to disk, and THEN run it using SFTShell.
\par \plain\f4\fs20\b 
\par \plain\f4\fs30\b\ul Background Operations\plain\f4\fs30 
\par \plain\f4\fs20 Because of it's multi-threaded design, SFTShell can provide background diskette format and background copy.  Waiting for file copies to complete before typing in another command can often get in the way of productivity, or provide additional frustration from apparently slow operations.  And, for diskette format, it's even worse.  Besides which, Windows is supposed to be a MULTI-TASKING operating system, isn't it?  The idea that you would have to do anything "linearly" goes against the basic paradigm of 'multi-tasking' anyway.  Even with the GUI method of file copy, there is STILL a delay involved, and selecting a large number of files is more time consuming than typing in "*.ext" for all files with the '.ext' extension, especially when there are more than just a few, or a large number of files to look through.  SFTShell enters all files into a 'copy queue', saving the fully qualified paths in the queue so that you can change drives and directories any time after the copy process begins.  Additionally, both the copy and format queue can be suspended, and items removed, using the 'Queue Management' dialog box.
\par 
\par An additional side benefit of SFTShell's background format operation is that under Windows '95 the SFTShell format runs about 50% faster than Windows '95, without adversely affecting system performance.  And, you don't get the annoying "do you wish to format another diskette" message every time.  With SFTShell, if you want to format 8 diskettes, just enter the command "For i from 1 to 8 do format A:".  You will be prompted for 8 volume labels (press <ENTER> for none), and once for each diskette, to enter a diskette in drive 'A' (In my own test, the prompts for the volume labels on diskette's 2 through 8 are made while diskette #1 is formatting).
\par 
\par \plain\f4\fs30\b\ul Command Piping and File Re-Direction\plain\f4\fs30 
\par \plain\f4\fs20 As with MS-DOS's COMMAND.COM, SFTShell can re-direct character-mode program input and output as specified by the '>', '<', and '>>' re-director operators, or "pipe" the output from one character mode application into another using the "|" re-director operator.  SFTShell does this by re-directing the "standard input" and "standard output" for these programs to temporary files that are created by SFTShell.  Additionally, if you run an MS-DOS or 32-bit console application, and you wish to see the output on the SFTShell screen, you can place a "|" at the end of the command line, and output will be re-directed (or "piped") to a temporary file, then displayed on SFTShell's screen when the program completes.  Additionally, specifying a 'filter' (such as 'MORE') that SFTShell supports internally will accomplish the same thing.  As an example, Microsoft provides a program called "EXEHDR" with its 16-bit compiler, that allows you to view information about a program file.  If you want to see this on the SFTShell screen (which supports viewing up to 400 lines of text) you can enter the following command: "EXEHDR myprog.exe |".  The '|' at the end of the command forces output to SFTShell's screen, and SFTShell waits for the program to complete before prompting you for the next command.  Alternately, you can also type "EXEHDR myprog.exe | MORE" and SFTShell will give you "a screenfull" at a time.  The resulting output, though, will look the same when you scroll through the screen contents, whether or not you use 'MORE'.
\par 
\par Another good use for command piping is viewing the contents of a ZIP file.  More often than not I find that ZIP files contain more information than a 25 line (or even a 50 line screen) can hold.  Therefore, I like to use SFTShell to view ZIP files by entering the command "PKZIP -v myzip.zip |".  Output from PKZIP is displayed on SFTShell's screen, and I can then navigate through the list using SFTShell's scrollbars.
\par 
\par In order to properly support command piping under Windows '95, a special 32-bit application "SFTSH32X.EXE" is used to invoke 32-bit and MS-DOS applications.  Under Windows '95, it passes the current environment block to these applications, and re-directs their input and output files (when appropriate).  In Windows 3.x, it is not possible to pass an environment block to any program without generating an error; this is due to a probem in Windows 3.1 and Windows 3.11 that was fixed in Windows '95.  Additionally, piping for MS-DOS applications under Windows 3.x invokes COMMAND.COM, and therefore shortens the length of the command line.  Such limitations do not exist under Windows '95.  (NOTE:  'console' 32-bit applications will not run in Windows 3.x).  Applications that are executed "implicitly" (due to opening or printing a file with a registered extension) will receive a copy of the standard Windows environment variables, regardless.
\par 
\par \pard\ri960\plain\f4\fs20 One notable exception that is often seen in programs is the use of re-direction with the 'ECHO' command.  In SFTShell the 'ECHO' command never re-directs its output.  To write to a disk file using SFTShell, use the 'FileOpen' command to create or open a file, and use the 'WriteLn' function to write output to it.
\par 
\par \pard\ri960\plain\f4\fs30\b\ul Special file names: CON, PRN, NUL\plain\f4\fs30 
\par \plain\f4\fs20 SFTShell traps the use of 'CON', 'PRN', and 'NUL' with COPY, XCOPY, and redirection ('<', '>', and '|') and processes them internally.  Input from 'CON' will enter a special mode that allows you to type in characters, and end with ctrl-z (just like COMMAND.COM).  Output to 'CON' is automatically directed to SFTShell's screen.  And, output to 'PRN' is directed to the print spooler, rather than the MS-DOS 'PRN' device, so that Windows can properly manage printer output.  Output to the 'NUL' device still functions as it always has.
\par 
\par \plain\f4\fs20\b 
\par }
 